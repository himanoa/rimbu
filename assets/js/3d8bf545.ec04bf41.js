"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[79576],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),s=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[d]="string"==typeof e?e:a,l[1]=p;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},63802:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>k,default:()=>C,frontMatter:()=>f,metadata:()=>y,toc:()=>b});var r=n(3905),a=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,u=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,d=(e,t)=>{for(var n in t||(t={}))o.call(t,n)&&u(e,n,t[n]);if(p)for(var n of p(t))s.call(t,n)&&u(e,n,t[n]);return e},c=(e,t)=>i(e,l(t)),m=(e,t)=>{var n={};for(var r in e)o.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&p)for(var r of p(e))t.indexOf(r)<0&&s.call(e,r)&&(n[r]=e[r]);return n};const f={title:"Spy.Fn<F>",slug:"/rimbu/spy/Spy/Fn/interface"},k="interface Spy.Fn<F>",y={unversionedId:"rimbu_spy/Spy/Fn.interface",id:"rimbu_spy/Spy/Fn.interface",title:"Spy.Fn<F>",description:"The spied function type containing extra information about the function calls.",source:"@site/api/rimbu_spy/Spy/Fn.interface.mdx",sourceDirName:"rimbu_spy/Spy",slug:"/rimbu/spy/Spy/Fn/interface",permalink:"/api/rimbu/spy/Spy/Fn/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Spy.Fn<F>",slug:"/rimbu/spy/Spy/Fn/interface"},sidebar:"defaultSidebar",previous:{title:"Spy.ClsObjMeta<T,A>",permalink:"/api/rimbu/spy/Spy/ClsObjMeta/interface"},next:{title:"Spy.FnMeta<F>",permalink:"/api/rimbu/spy/Spy/FnMeta/interface"}},v={},b=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>calls</code>",id:"calls",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isCalled</code>",id:"iscalled",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>nrCalls</code>",id:"nrcalls",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>clearCalls</code>",id:"clearcalls",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>resetStub</code>",id:"resetstub",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>setStub</code>",id:"setstub",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-5",level:4}],h={toc:b},N="wrapper";function C(e){var t=e,{components:n}=t,a=m(t,["components"]);return(0,r.kt)(N,c(d(d({},h),a),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",d({},{id:"interface-spyfnf"}),(0,r.kt)("inlineCode",{parentName:"h1"},"interface Spy.Fn<F>")),(0,r.kt)("p",null,"The spied function type containing extra information about the function calls."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extends:")," ",(0,r.kt)("a",d({parentName:"p"},{href:"/api/rimbu/spy/FuncInterface/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"FuncInterface<F>")),", ",(0,r.kt)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnMeta/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Spy.FnMeta<F>"))),(0,r.kt)("h2",d({},{id:"type-parameters"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Constraints"),(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",d({parentName:"tr"},{align:null}),"F"),(0,r.kt)("td",d({parentName:"tr"},{align:null}),(0,r.kt)("a",d({parentName:"td"},{href:"/api/rimbu/spy/Func/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"Func"))),(0,r.kt)("td",d({parentName:"tr"},{align:null}),"the spied function type")))),(0,r.kt)("h2",d({},{id:"properties"}),"Properties"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",d({},{id:"calls"}),(0,r.kt)("inlineCode",{parentName:"h3"},"calls")),(0,r.kt)("p",null,"Returns an array containing, for each received spy call, the given parameters.")),(0,r.kt)("h4",d({},{id:"definition"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"get calls(): Parameters<F>[];"))),(0,r.kt)("h4",d({},{id:"overrides"}),"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnMeta/interface#calls"}),"FnMeta.calls"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",d({},{id:"iscalled"}),(0,r.kt)("inlineCode",{parentName:"h3"},"isCalled")),(0,r.kt)("p",null,"Returns true if the spy function has received at least one call.")),(0,r.kt)("h4",d({},{id:"definition-1"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"get isCalled(): boolean;"))),(0,r.kt)("h4",d({},{id:"overrides-1"}),"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnMeta/interface#isCalled"}),"FnMeta.isCalled"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",d({},{id:"nrcalls"}),(0,r.kt)("inlineCode",{parentName:"h3"},"nrCalls")),(0,r.kt)("p",null,"Returns the number of calls this spy function has received.")),(0,r.kt)("h4",d({},{id:"definition-2"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"get nrCalls(): number;"))),(0,r.kt)("h4",d({},{id:"overrides-2"}),"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnMeta/interface#nrCalls"}),"FnMeta.nrCalls"))),(0,r.kt)("h2",d({},{id:"methods"}),"Methods"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",d({},{id:"clearcalls"}),(0,r.kt)("inlineCode",{parentName:"h3"},"clearCalls")),(0,r.kt)("p",null,"Clears the spy functions' ",(0,r.kt)("inlineCode",{parentName:"p"},"calls")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"nrCalls")," history.")),(0,r.kt)("h4",d({},{id:"definition-3"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"clearCalls(): void;"))),(0,r.kt)("h4",d({},{id:"overrides-3"}),"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnMeta/interface#clearCalls"}),"FnMeta.clearCalls"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",d({},{id:"resetstub"}),(0,r.kt)("inlineCode",{parentName:"h3"},"resetStub")),(0,r.kt)("p",null,"Resets the implementation used for the next spy function call to the original one used at construction time.")),(0,r.kt)("h4",d({},{id:"definition-4"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"resetStub(): void;"))),(0,r.kt)("h4",d({},{id:"overrides-4"}),"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnMeta/interface#resetStub"}),"FnMeta.resetStub"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",d({},{id:"setstub"}),(0,r.kt)("inlineCode",{parentName:"h3"},"setStub")),(0,r.kt)("p",null,"Sets a stub implementation for this spy function, which will be used instead of the current function implementation upon the next received call.")),(0,r.kt)("h4",d({},{id:"definition-5"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"setStub(stub: "),(0,r.kt)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,r.kt)("inlineCode",{parentName:"p"},"<F> "),(0,r.kt)("code",null,"|"),(0,r.kt)("inlineCode",{parentName:"p"}," undefined): void;"))),(0,r.kt)("h4",d({},{id:"parameters"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",d({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"stub")),(0,r.kt)("td",d({parentName:"tr"},{align:null}),(0,r.kt)("a",d({parentName:"td"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,r.kt)("inlineCode",{parentName:"td"},"<F> "),(0,r.kt)("code",null,"|"),(0,r.kt)("inlineCode",{parentName:"td"}," undefined")),(0,r.kt)("td",d({parentName:"tr"},{align:null}),"the stub implementation to use")))),(0,r.kt)("h4",d({},{id:"overrides-5"}),"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",d({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnMeta/interface#setStub"}),"FnMeta.setStub"))))}C.isMDXComponent=!0}}]);