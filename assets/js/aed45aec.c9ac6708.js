"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[53595],{3905:(t,e,a)=>{a.d(e,{Zo:()=>m,kt:()=>f});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function p(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var l=n.createContext({}),u=function(t){var e=n.useContext(l),a=e;return t&&(a="function"==typeof t?t(e):p(p({},e),t)),a},m=function(t){var e=u(t.components);return n.createElement(l.Provider,{value:e},t.children)},c="mdxType",y={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},s=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,l=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),c=u(a),s=r,f=c["".concat(l,".").concat(s)]||c[s]||y[s]||i;return a?n.createElement(f,p(p({ref:e},m),{},{components:a})):n.createElement(f,p({ref:e},m))}));function f(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,p=new Array(i);p[0]=s;var o={};for(var l in e)hasOwnProperty.call(e,l)&&(o[l]=e[l]);o.originalType=t,o[c]="string"==typeof t?t:r,p[1]=o;for(var u=2;u<i;u++)p[u]=a[u];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},33819:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>M,contentTitle:()=>d,default:()=>O,frontMatter:()=>f,metadata:()=>b,toc:()=>h});var n=a(3905),r=Object.defineProperty,i=Object.defineProperties,p=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,m=(t,e,a)=>e in t?r(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a,c=(t,e)=>{for(var a in e||(e={}))l.call(e,a)&&m(t,a,e[a]);if(o)for(var a of o(e))u.call(e,a)&&m(t,a,e[a]);return t},y=(t,e)=>i(t,p(e)),s=(t,e)=>{var a={};for(var n in t)l.call(t,n)&&e.indexOf(n)<0&&(a[n]=t[n]);if(null!=t&&o)for(var n of o(t))e.indexOf(n)<0&&u.call(t,n)&&(a[n]=t[n]);return a};const f={title:"VariantMultiMap.NonEmpty<K,V>",slug:"/rimbu/multimap/VariantMultiMap/NonEmpty/interface"},d="interface VariantMultiMap.NonEmpty<K,V>",b={unversionedId:"rimbu_multimap/VariantMultiMap/NonEmpty.interface",id:"rimbu_multimap/VariantMultiMap/NonEmpty.interface",title:"VariantMultiMap.NonEmpty<K,V>",description:"A non-empty type-variant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the MultiMap documentation and the VariantMultiMap API documentation",source:"@site/api/rimbu_multimap/VariantMultiMap/NonEmpty.interface.mdx",sourceDirName:"rimbu_multimap/VariantMultiMap",slug:"/rimbu/multimap/VariantMultiMap/NonEmpty/interface",permalink:"/api/rimbu/multimap/VariantMultiMap/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantMultiMap.NonEmpty<K,V>",slug:"/rimbu/multimap/VariantMultiMap/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"VariantMultiMap (namespace)",permalink:"/api/rimbu/multimap/VariantMultiMap/namespace"},next:{title:"VariantMultiMap.Types",permalink:"/api/rimbu/multimap/VariantMultiMap/Types/interface"}},M={},h=[{value:"Type parameters",id:"type-parameters",level:2}],v={toc:h},k="wrapper";function O(t){var e=t,{components:a}=e,r=s(e,["components"]);return(0,n.kt)(k,y(c(c({},v),r),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",c({},{id:"interface-variantmultimapnonemptykv"}),(0,n.kt)("inlineCode",{parentName:"h1"},"interface VariantMultiMap.NonEmpty<K,V>")),(0,n.kt)("p",null,"A non-empty type-variant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multimap/VariantMultiMap/interface"}),"VariantMultiMap API documentation")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Extends:")," ",(0,n.kt)("a",c({parentName:"p"},{href:"/api/rimbu/multimap/VariantMultiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantMultiMap<K,V>"))),(0,n.kt)("h2",c({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"the key type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"the value type")))),(0,n.kt)("admonition",c({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"Type-variance means that both the key and value types can be widened in a type-safe way without casting.  @note As a consequence of being variant, the type does not contain methods that (can) add new elements to the collection.")))}O.isMDXComponent=!0}}]);