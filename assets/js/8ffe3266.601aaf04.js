"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[95055],{3905:(e,a,t)=>{t.d(a,{Zo:()=>s,kt:()=>d});var r=t(67294);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){n(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function u(e,a){if(null==e)return{};var t,r,n=function(e,a){if(null==e)return{};var t,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var p=r.createContext({}),o=function(e){var a=r.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},s=function(e){var a=o(e.components);return r.createElement(p.Provider,{value:a},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},h=r.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),c=o(t),h=n,d=c["".concat(p,".").concat(h)]||c[h]||m[h]||i;return t?r.createElement(d,l(l({ref:a},s),{},{components:t})):r.createElement(d,l({ref:a},s))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,l=new Array(i);l[0]=h;var u={};for(var p in a)hasOwnProperty.call(a,p)&&(u[p]=a[p]);u.originalType=e,u[c]="string"==typeof e?e:n,l[1]=u;for(var o=2;o<i;o++)l[o]=t[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},89150:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>b,contentTitle:()=>f,default:()=>v,frontMatter:()=>d,metadata:()=>M,toc:()=>y});var r=t(3905),n=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,u=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,s=(e,a,t)=>a in e?n(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,c=(e,a)=>{for(var t in a||(a={}))p.call(a,t)&&s(e,t,a[t]);if(u)for(var t of u(a))o.call(a,t)&&s(e,t,a[t]);return e},m=(e,a)=>i(e,l(a)),h=(e,a)=>{var t={};for(var r in e)p.call(e,r)&&a.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&u)for(var r of u(e))a.indexOf(r)<0&&o.call(e,r)&&(t[r]=e[r]);return t};const d={title:"HashMultiMapHashValue (namespace)",slug:"/rimbu/core/HashMultiMapHashValue/namespace"},f="namespace HashMultiMapHashValue",M={unversionedId:"rimbu_core/HashMultiMapHashValue/index",id:"rimbu_core/HashMultiMapHashValue/index",title:"HashMultiMapHashValue (namespace)",description:"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the MultiMap documentation and the HashMultiMapHashValue API documentation",source:"@site/api/rimbu_core/HashMultiMapHashValue/index.mdx",sourceDirName:"rimbu_core/HashMultiMapHashValue",slug:"/rimbu/core/HashMultiMapHashValue/namespace",permalink:"/api/rimbu/core/HashMultiMapHashValue/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"HashMultiMapHashValue (namespace)",slug:"/rimbu/core/HashMultiMapHashValue/namespace"},sidebar:"defaultSidebar",previous:{title:"HashMap",permalink:"/api/rimbu/core/HashMap/var"},next:{title:"HashMultiMapHashValue.Builder<K,V>",permalink:"/api/rimbu/core/HashMultiMapHashValue/Builder/interface"}},b={},y=[{value:"Interfaces",id:"interfaces",level:2}],H={toc:y},k="wrapper";function v(e){var a=e,{components:t}=a,n=h(a,["components"]);return(0,r.kt)(k,m(c(c({},H),n),{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",c({},{id:"namespace-hashmultimaphashvalue"}),(0,r.kt)("inlineCode",{parentName:"h1"},"namespace HashMultiMapHashValue")),(0,r.kt)("p",null,"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapHashValue/interface"}),"HashMultiMapHashValue API documentation")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,r.kt)("a",c({parentName:"p"},{href:"/api/rimbu/core/HashMultiMapHashValue/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue<K,V>"))),(0,r.kt)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapHashValue/Builder/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue.Builder<K,V>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"A mutable ",(0,r.kt)("inlineCode",{parentName:"td"},"HashMultiMapHashValue")," builder used to efficiently create new immutable instances. See the ",(0,r.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapHashValue/Builder/interface"}),"HashMultiMapHashValue.Builder API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapHashValue/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue.Context<UK,UV>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"A context instance for an ",(0,r.kt)("inlineCode",{parentName:"td"},"HashMultiMapHashValue")," that acts as a factory for every instance of this type of collection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapHashValue/NonEmpty/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue.NonEmpty<K,V>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapHashValue/interface"}),"HashMultiMapHashValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapHashValue/Types/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue.Types"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}v.isMDXComponent=!0}}]);