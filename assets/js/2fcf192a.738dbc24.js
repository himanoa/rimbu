"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[86938],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),s=c(r),m=o,y=s["".concat(l,".").concat(m)]||s[m]||u[m]||a;return r?n.createElement(y,p(p({ref:t},d),{},{components:r})):n.createElement(y,p({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=s;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,p[1]=i;for(var c=2;c<a;c++)p[c]=r[c];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},21858:function(e,t,r){r.r(t),r.d(t,{assets:function(){return f},contentTitle:function(){return m},default:function(){return k},frontMatter:function(){return s},metadata:function(){return y},toc:function(){return b}});var n=r(3905),o=Object.defineProperty,a=Object.defineProperties,p=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&d(e,r,t[r]);if(i)for(var r of i(t))c.call(t,r)&&d(e,r,t[r]);return e};const s={title:"Protected",slug:"/rimbu/deep/Protected/type"},m="type Protected<T>",y={unversionedId:"rimbu_deep/Protected.type",id:"rimbu_deep/Protected.type",title:"Protected",description:"A deep readonly typed version of given type T. Makes all properties or elements read only. It maps types using the following rules: - arrays and tuples become readonly counterparts, and all element types are wrapped in Protected if applicable - Maps of key type K and value type V become Maps of key type Protected and value type Protected - Sets of element type E become Sets of element type Protected - Promises of value type E become Promises of value type Protected - Objects that have only simple properties (no functions or iterators) will have all the properties as Protected if applicable - Any other type will not be mapped",source:"@site/api/rimbu_deep/Protected.type.mdx",sourceDirName:"rimbu_deep",slug:"/rimbu/deep/Protected/type",permalink:"/api/rimbu/deep/Protected/type",draft:!1,tags:[],version:"current",frontMatter:{title:"Protected",slug:"/rimbu/deep/Protected/type"},sidebar:"defaultSidebar",previous:{title:"Path",permalink:"/api/rimbu/deep/Path/type"},next:{title:"Tuple (namespace)",permalink:"/api/rimbu/deep/Tuple/namespace"}},f={},b=[{value:"Definition",id:"definition",level:2}],P={toc:b};function k(e){var t,r=e,{components:o}=r,d=((e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&c.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=u(u({},P),d),a(t,p({components:o,mdxType:"MDXLayout"}))),(0,n.kt)("h1",u({},{id:"type-protectedt"}),(0,n.kt)("inlineCode",{parentName:"h1"},"type Protected<T>")),(0,n.kt)("p",null,"A deep readonly typed version of given type T. Makes all properties or elements read only. It maps types using the following rules: - arrays and tuples become readonly counterparts, and all element types are wrapped in ",(0,n.kt)("inlineCode",{parentName:"p"},"Protected")," if applicable - Maps of key type K and value type V become Maps of key type ",(0,n.kt)("inlineCode",{parentName:"p"},"Protected<K>")," and value type ",(0,n.kt)("inlineCode",{parentName:"p"},"Protected<V>")," - Sets of element type E become Sets of element type ",(0,n.kt)("inlineCode",{parentName:"p"},"Protected<E>")," - Promises of value type E become Promises of value type ",(0,n.kt)("inlineCode",{parentName:"p"},"Protected<E>")," - Objects that have only simple properties (no functions or iterators) will have all the properties as Protected if applicable - Any other type will not be mapped"),(0,n.kt)("h2",u({},{id:"definition"}),"Definition"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare type Protected<T> = IsAny<T> extends true ? T : T extends readonly any[] & infer A ? {"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"readonly [K in keyof A]: "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/deep/Protected/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Protected")),(0,n.kt)("inlineCode",{parentName:"p"},"<A[K]>;"),(0,n.kt)("br",null),(0,n.kt)("inlineCode",{parentName:"p"},"} : T extends Map<infer K, infer V> ? Map<"),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/deep/Protected/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Protected")),(0,n.kt)("inlineCode",{parentName:"p"},"<K>, "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/deep/Protected/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Protected")),(0,n.kt)("inlineCode",{parentName:"p"},"<V>> : T extends Set<infer E> ? Set<"),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/deep/Protected/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Protected")),(0,n.kt)("inlineCode",{parentName:"p"},"<E>> : T extends Promise<infer E> ? Promise<"),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/deep/Protected/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Protected")),(0,n.kt)("inlineCode",{parentName:"p"},"<E>> : IsPlainObj<T> extends true ? {"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"readonly [K in keyof T]: "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/deep/Protected/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Protected")),(0,n.kt)("inlineCode",{parentName:"p"},"<T[K]>;"),(0,n.kt)("br",null),(0,n.kt)("inlineCode",{parentName:"p"},"} : T;")))}k.isMDXComponent=!0}}]);