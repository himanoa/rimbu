"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[7090],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return b}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),p=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(u.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(t),b=a,s=d["".concat(u,".").concat(b)]||d[b]||c[b]||o;return t?r.createElement(s,i(i({ref:n},m),{},{components:t})):r.createElement(s,i({ref:n},m))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},92721:function(e,n,t){t.r(n),t.d(n,{assets:function(){return f},contentTitle:function(){return b},default:function(){return k},frontMatter:function(){return d},metadata:function(){return s},toc:function(){return y}});var r=t(3905),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,m=(e,n,t)=>n in e?a(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,c=(e,n)=>{for(var t in n||(n={}))u.call(n,t)&&m(e,t,n[t]);if(l)for(var t of l(n))p.call(n,t)&&m(e,t,n[t]);return e};const d={title:"IndexRange",slug:"/rimbu/common/IndexRange/type"},b="type IndexRange",s={unversionedId:"rimbu_common/IndexRange.type",id:"rimbu_common/IndexRange.type",title:"IndexRange",description:"A flexible range specification for numeric indices. If a start or end is defined, a tuple can be used where the second item is a boolean indicating whether that end is inclusive or exclusive.",source:"@site/api/rimbu_common/IndexRange.type.mdx",sourceDirName:"rimbu_common",slug:"/rimbu/common/IndexRange/type",permalink:"/api/rimbu/common/IndexRange/type",draft:!1,tags:[],version:"current",frontMatter:{title:"IndexRange",slug:"/rimbu/common/IndexRange/type"},sidebar:"defaultSidebar",previous:{title:"ForcedError",permalink:"/api/rimbu/common/ErrBase/ForcedError/class"},next:{title:"MaybePromise",permalink:"/api/rimbu/common/MaybePromise/type"}},f={},y=[{value:"Definition",id:"definition",level:2}],g={toc:y};function k(e){var n,t=e,{components:a}=t,m=((e,n)=>{var t={};for(var r in e)u.call(e,r)&&n.indexOf(r)<0&&(t[r]=e[r]);if(null!=e&&l)for(var r of l(e))n.indexOf(r)<0&&p.call(e,r)&&(t[r]=e[r]);return t})(t,["components"]);return(0,r.kt)("wrapper",(n=c(c({},g),m),o(n,i({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("h1",c({},{id:"type-indexrange"}),(0,r.kt)("inlineCode",{parentName:"h1"},"type IndexRange")),(0,r.kt)("p",null,"A flexible range specification for numeric indices. If a start or end is defined, a tuple can be used where the second item is a boolean indicating whether that end is inclusive or exclusive.\nAn IndexRange can have one of the following forms:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"{ amount: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: number, amount: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: number, end: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: number, end: ","[number, boolean]"," }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[number, boolean]"," }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[number, boolean]",", amount: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[number, boolean]",", end: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[number, boolean]",", end: ","[number, boolean]"," }"),(0,r.kt)("li",{parentName:"ul"},"{ end: number }"),(0,r.kt)("li",{parentName:"ul"},"{ end: ","[number, boolean]"," }")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Companion namespace:")," ",(0,r.kt)("a",c({parentName:"p"},{href:"/api/rimbu/common/IndexRange/namespace"}),"IndexRange")),(0,r.kt)("h2",c({},{id:"definition"}),"Definition"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare type IndexRange = {"),(0,r.kt)("br",null),"\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"amount: number;"),(0,r.kt)("br",null),"\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"start?: number "),(0,r.kt)("code",null,"|"),(0,r.kt)("inlineCode",{parentName:"p"}," [number, boolean];"),(0,r.kt)("br",null),"\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"end?: undefined;"),(0,r.kt)("br",null),(0,r.kt)("inlineCode",{parentName:"p"},"} "),(0,r.kt)("code",null,"|"),(0,r.kt)("inlineCode",{parentName:"p"}," "),(0,r.kt)("a",c({parentName:"p"},{href:"/api/rimbu/common/Range/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"Range")),(0,r.kt)("inlineCode",{parentName:"p"},"<number>;")))}k.isMDXComponent=!0}}]);