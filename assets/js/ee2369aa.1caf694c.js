"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[62123],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),m=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=m(e.components);return r.createElement(l.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=m(n),d=a,f=s["".concat(l,".").concat(d)]||s[d]||u[d]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p[s]="string"==typeof e?e:a,o[1]=p;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87912:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>b,contentTitle:()=>h,default:()=>S,frontMatter:()=>f,metadata:()=>y,toc:()=>k});var r=n(3905),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,s=(e,t)=>{for(var n in t||(t={}))l.call(t,n)&&c(e,n,t[n]);if(p)for(var n of p(t))m.call(t,n)&&c(e,n,t[n]);return e},u=(e,t)=>i(e,o(t)),d=(e,t)=>{var n={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&p)for(var r of p(e))t.indexOf(r)<0&&m.call(e,r)&&(n[r]=e[r]);return n};const f={title:"HashSet.NonEmpty<T>",slug:"/rimbu/core/HashSet/NonEmpty/interface"},h="interface HashSet.NonEmpty<T>",y={unversionedId:"rimbu_core/HashSet/NonEmpty.interface",id:"rimbu_core/HashSet/NonEmpty.interface",title:"HashSet.NonEmpty<T>",description:"A non-empty type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the Set documentation and the HashSet API documentation",source:"@site/api/rimbu_core/HashSet/NonEmpty.interface.mdx",sourceDirName:"rimbu_core/HashSet",slug:"/rimbu/core/HashSet/NonEmpty/interface",permalink:"/api/rimbu/core/HashSet/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"HashSet.NonEmpty<T>",slug:"/rimbu/core/HashSet/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"HashSet.Context<UT>",permalink:"/api/rimbu/core/HashSet/Context/interface"},next:{title:"HashSet.Types",permalink:"/api/rimbu/core/HashSet/Types/interface"}},b={},k=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4}],N={toc:k},v="wrapper";function S(e){var t=e,{components:n}=t,a=d(t,["components"]);return(0,r.kt)(v,u(s(s({},N),a),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",s({},{id:"interface-hashsetnonemptyt"}),(0,r.kt)("inlineCode",{parentName:"h1"},"interface HashSet.NonEmpty<T>")),(0,r.kt)("p",null,"A non-empty type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",s({parentName:"p"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",s({parentName:"p"},{href:"https://rimbu.org/api/rimbu/hashed/HashSet/interface"}),"HashSet API documentation")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extends:")," ",(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/core/Streamable/NonEmpty/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/core/HashSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashSet<T>"))),(0,r.kt)("h2",s({},{id:"type-parameters"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"T"),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the value type")))),(0,r.kt)("admonition",s({},{title:"note",type:"note"}),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"HashSet")," uses the context's ",(0,r.kt)("inlineCode",{parentName:"li"},"hasher")," instance to hash keys for performance. - The ",(0,r.kt)("inlineCode",{parentName:"li"},"HashSet")," uses the context's ",(0,r.kt)("inlineCode",{parentName:"li"},"eq")," function to determine equivalence between keys."))),(0,r.kt)("admonition",s({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const s1 = HashSet.empty<string>()\nconst s2 = HashSet.of('a', 'b', 'c')\n"))),(0,r.kt)("h2",s({},{id:"methods"}),"Methods"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",s({},{id:"stream"}),(0,r.kt)("inlineCode",{parentName:"h3"},"stream")),(0,r.kt)("p",null,"Returns a non-empty ",(0,r.kt)("inlineCode",{parentName:"p"},"Stream")," of the elements in this collection.")),(0,r.kt)("h4",s({},{id:"definition"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"stream(): "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/core/Stream/NonEmpty/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,r.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,r.kt)("h4",s({},{id:"overrides"}),"Overrides"),(0,r.kt)("p",null,(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/core/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"))))}S.isMDXComponent=!0}}]);