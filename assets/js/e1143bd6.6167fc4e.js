"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[63680],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),u=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=u(a),d=n,h=m["".concat(p,".").concat(d)]||m[d]||c[d]||l;return a?r.createElement(h,i(i({ref:t},s),{},{components:a})):r.createElement(h,i({ref:t},s))}));function h(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},28187:(e,t,a)=>{a.d(t,{G:()=>l});var r=a(67294);function n(e){return e.replace(/</g,"%3C").replace(/>/g,"%3E")}function l(e){const t=n(`https://g.gravizo.com/svg?\n  @startuml;\n  skinparam monochrome true;\n  skinparam backgroundColor none;\n  skinparam classBackgroundColor darkslategrey;\n  skinparam classBorderColor gray;\n  skinparam classFontColor lightgray;\n  skinparam classStereotypeFontColor darkgray;\n  skinparam arrowColor lightgray;\n  skinparam linetype ortho;\n  ${e.contents}\n  @enduml;`);return r.createElement("img",{src:t,className:"diagram"})}},88508:(e,t,a)=>{a.d(t,{r:()=>h});var r=a(67294),n=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,s=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,m=(e,t)=>{for(var a in t||(t={}))p.call(t,a)&&s(e,a,t[a]);if(o)for(var a of o(t))u.call(t,a)&&s(e,a,t[a]);return e},c=(e,t)=>l(e,i(t));const d={previewwindow:"console",view:"split",editorsize:"60",codemirror:"1",moduleview:"1"};function h(e){const t=function(e){let t="",a="";for(const r in e)t+=`${a}${r}=${e[r]}`,a="&";return""===t?"":`?${t}`}(c(m({},d),{module:`/src/${e.path}`})),a=`https://codesandbox.io/embed/github/vitoke/rimbu-sandbox/tree/main${t}`,n=`https://codesandbox.io/s/github/vitoke/rimbu-sandbox/tree/main${t}`;return r.createElement(r.Fragment,null,r.createElement("a",{target:"_blank",className:"button button--secondary",href:n,style:{marginBottom:10}},"Open file below in new window with full type-check"),r.createElement("iframe",{src:a,className:"codesandbox-iframe",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}},99454:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>v,contentTitle:()=>y,default:()=>O,frontMatter:()=>k,metadata:()=>M,toc:()=>g});var r=a(3905),n=a(28187);const l="\ninterface Streamable<[K, V]>;\n\ninterface VariantMultiMap<K, V>;\nabstract MultiMap<K, V>;\nclass HashMultiMapHashValue<k, V>;\nclass HashMultiMapSortedValue<k, V>;\nclass SortedMultiMapHashValue<k, V>;\nclass SortedMultiMapSortedValue<k, V>;\n\nStreamable <|.. VariantMultiMap;\nVariantMultiMap <|-- MultiMap;\nMultiMap <|-- HashMultiMapHashValue;\nMultiMap <|-- HashMultiMapSortedValue;\nMultiMap <|-- SortedMultiMapHashValue;\nMultiMap <|-- SortedMultiMapSortedValue;\n";var i=a(88508),o=Object.defineProperty,p=Object.defineProperties,u=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,h=(e,t)=>{for(var a in t||(t={}))m.call(t,a)&&d(e,a,t[a]);if(s)for(var a of s(t))c.call(t,a)&&d(e,a,t[a]);return e},b=(e,t)=>p(e,u(t)),f=(e,t)=>{var a={};for(var r in e)m.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&s)for(var r of s(e))t.indexOf(r)<0&&c.call(e,r)&&(a[r]=e[r]);return a};const k={id:"multimap",slug:"./multimap",title:"MultiMap"},y="MultiMap",M={unversionedId:"collections/multimap",id:"collections/multimap",title:"MultiMap",description:"A Rimbu MultiMap is a Map in which each key has one or more values. For each key, it's associated values are unique, that is, the values for each key are kept in a Set.",source:"@site/docs/collections/multimap.mdx",sourceDirName:"collections",slug:"/collections/multimap",permalink:"/docs/collections/multimap",draft:!1,editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/collections/multimap.mdx",tags:[],version:"current",frontMatter:{id:"multimap",slug:"./multimap",title:"MultiMap"},sidebar:"sidebar",previous:{title:"Map",permalink:"/docs/collections/map"},next:{title:"MultiSet",permalink:"/docs/collections/multiset"}},v={},g=[{value:"When to use",id:"when-to-use",level:2},{value:"Exports",id:"exports",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Usage",id:"usage",level:2},{value:"Creation",id:"creation",level:3},{value:"Query",id:"query",level:3},{value:"Builder",id:"builder",level:3}],w={toc:g},N="wrapper";function O(e){var t=e,{components:a}=t,o=f(t,["components"]);return(0,r.kt)(N,b(h(h({},w),o),{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",h({},{id:"multimap"}),"MultiMap"),(0,r.kt)("p",null,"A Rimbu MultiMap is a Map in which each key has one or more values. For each key, it's associated values are unique, that is, the values for each key are kept in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Set"),"."),(0,r.kt)("h2",h({},{id:"when-to-use"}),"When to use"),(0,r.kt)("p",null,"A MultiMap is useful when there is a one to many relation between two types of entities. For example, one planet can have many moons, so if we have a MultiMap from Planet to Moon, we can easily find all the moons that belong to a particular planet. However, if we also easily want to know to which planet a moon belongs, it would be better to use a ",(0,r.kt)("a",h({parentName:"p"},{href:"bimultimap/"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMultiMap"))),(0,r.kt)("admonition",h({},{type:"tip"}),(0,r.kt)("p",{parentName:"admonition"},"The predefined immutable MultiMap implementations do not maintain the insertion order of the values per key. However, it is possible to create a custom context with an ",(0,r.kt)("inlineCode",{parentName:"p"},"OrderedMap")," implementation to achieve this behavior.")),(0,r.kt)("h2",h({},{id:"exports"}),"Exports"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,r.kt)("em",{parentName:"p"},"abstract")," MultiMap TypeScript types:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",h({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",h({parentName:"tr"},{align:null}),(0,r.kt)("a",h({parentName:"td"},{href:"/api/rimbu/multimap/VariantMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiMap<K, V>"))),(0,r.kt)("td",h({parentName:"tr"},{align:null}),"a type-variant multimap between values of type K and values of type V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",h({parentName:"tr"},{align:null}),(0,r.kt)("a",h({parentName:"td"},{href:"/api/rimbu/multimap/MultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMap<K, V>"))),(0,r.kt)("td",h({parentName:"tr"},{align:null}),"a generic multimap between values of type K and values of type V")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,r.kt)("em",{parentName:"p"},"concrete")," MultiMap types:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",h({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",h({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",h({parentName:"tr"},{align:null}),(0,r.kt)("a",h({parentName:"td"},{href:"/api/rimbu/multimap/HashMultiMapHashValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue<K, V>"))),(0,r.kt)("td",h({parentName:"tr"},{align:null}),"a multimap between hashed values of type K and hashed values of type V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",h({parentName:"tr"},{align:null}),(0,r.kt)("a",h({parentName:"td"},{href:"/api/rimbu/multimap/HashMultiMapSortedValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapSortedValue<K, V>"))),(0,r.kt)("td",h({parentName:"tr"},{align:null}),"a multimap between hashed values of type K and sorted values of type V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",h({parentName:"tr"},{align:null}),(0,r.kt)("a",h({parentName:"td"},{href:"/api/rimbu/multimap/SortedMultiMapHashValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapHashValue<K, V>"))),(0,r.kt)("td",h({parentName:"tr"},{align:null}),"a multimap between sorted values of type K and hashed values of type V")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",h({parentName:"tr"},{align:null}),(0,r.kt)("a",h({parentName:"td"},{href:"/api/rimbu/multimap/SortedMultiMapSortedValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue<K, V>"))),(0,r.kt)("td",h({parentName:"tr"},{align:null}),"a multimap between sorted values of type K and sorted values of type V")))),(0,r.kt)("h2",h({},{id:"inheritance"}),"Inheritance"),(0,r.kt)(n.G,{contents:l,mdxType:"UmlGraph"}),(0,r.kt)("h2",h({},{id:"usage"}),"Usage"),(0,r.kt)("h3",h({},{id:"creation"}),"Creation"),(0,r.kt)(i.r,{path:"multimap/create.ts",mdxType:"SandBox"}),(0,r.kt)("h3",h({},{id:"query"}),"Query"),(0,r.kt)(i.r,{path:"multimap/query.ts",mdxType:"SandBox"}),(0,r.kt)("h3",h({},{id:"builder"}),"Builder"),(0,r.kt)(i.r,{path:"multimap/build.ts",mdxType:"SandBox"}))}O.isMDXComponent=!0}}]);