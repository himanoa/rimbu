"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[32252],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),s=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=s(a),d=n,b=m["".concat(p,".").concat(d)]||m[d]||c[d]||i;return a?r.createElement(b,o(o({ref:t},u),{},{components:a})):r.createElement(b,o({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},69318:(e,t,a)=>{a.d(t,{G:()=>i});var r=a(67294);function n(e){return e.replace(/</g,"%3C").replace(/>/g,"%3E")}function i(e){const t=n(`https://g.gravizo.com/svg?\n  @startuml;\n  skinparam monochrome true;\n  skinparam backgroundColor none;\n  skinparam classBackgroundColor darkslategrey;\n  skinparam classBorderColor gray;\n  skinparam classFontColor lightgray;\n  skinparam classStereotypeFontColor darkgray;\n  skinparam arrowColor lightgray;\n  skinparam linetype ortho;\n  ${e.contents}\n  @enduml;`);return r.createElement("img",{src:t,className:"diagram"})}},73203:(e,t,a)=>{a.d(t,{r:()=>m});var r=a(67294),n=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,u=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;const c={previewwindow:"console",view:"split",editorsize:"60",codemirror:"1",moduleview:"1"};function m(e){const t=(a=((e,t)=>{for(var a in t||(t={}))p.call(t,a)&&u(e,a,t[a]);if(l)for(var a of l(t))s.call(t,a)&&u(e,a,t[a]);return e})({},c),n={module:`/src/${e.path}`},i(a,o(n)));var a,n;const m=function(e){let t="",a="";for(const r in e)t+=`${a}${r}=${e[r]}`,a="&";return""===t?"":`?${t}`}(t),d=`https://codesandbox.io/embed/github/vitoke/rimbu-sandbox/tree/main${m}`,b=`https://codesandbox.io/s/github/vitoke/rimbu-sandbox/tree/main${m}`;return r.createElement(r.Fragment,null,r.createElement("a",{target:"_blank",className:"button button--secondary",href:b,style:{marginBottom:10}},"Open file below in new window with full type-check"),r.createElement("iframe",{src:d,className:"codesandbox-iframe",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}},49499:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>y,default:()=>g,frontMatter:()=>b,metadata:()=>h,toc:()=>k});var r=a(3905),n=a(69318);var i=a(73203),o=Object.defineProperty,l=Object.defineProperties,p=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,m=(e,t,a)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,d=(e,t)=>{for(var a in t||(t={}))u.call(t,a)&&m(e,a,t[a]);if(s)for(var a of s(t))c.call(t,a)&&m(e,a,t[a]);return e};const b={id:"bimultimap",slug:"./bimultimap",title:"BiMultiMap"},y=void 0,h={unversionedId:"collections/bimultimap",id:"collections/bimultimap",title:"BiMultiMap",description:"A BiMultiMap is a bidirectional MultiMap of keys and values, where each key-value association also has an inverse value-key association. There is a many-to-many mapping between keys and values.",source:"@site/docs/collections/bimultimap.mdx",sourceDirName:"collections",slug:"/collections/bimultimap",permalink:"/docs/collections/bimultimap",draft:!1,editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/collections/bimultimap.mdx",tags:[],version:"current",frontMatter:{id:"bimultimap",slug:"./bimultimap",title:"BiMultiMap"},sidebar:"sidebar",previous:{title:"BiMap",permalink:"/docs/collections/bimap"},next:{title:"List",permalink:"/docs/collections/list"}},f={},k=[{value:"When to use",id:"when-to-use",level:2},{value:"Exports",id:"exports",level:2},{value:"Inheritance",id:"inheritance",level:2},{value:"Creation",id:"creation",level:3},{value:"Query",id:"query",level:3},{value:"Motivation",id:"motivation",level:3},{value:"Builder",id:"builder",level:3}],v={toc:k};function g(e){var t,a=e,{components:o}=a,m=((e,t)=>{var a={};for(var r in e)u.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&s)for(var r of s(e))t.indexOf(r)<0&&c.call(e,r)&&(a[r]=e[r]);return a})(a,["components"]);return(0,r.kt)("wrapper",(t=d(d({},v),m),l(t,p({components:o,mdxType:"MDXLayout"}))),(0,r.kt)("p",null,"A BiMultiMap is a bidirectional MultiMap of keys and values, where each key-value association also has an inverse value-key association. There is a many-to-many mapping between keys and values."),(0,r.kt)("h2",d({},{id:"when-to-use"}),"When to use"),(0,r.kt)("p",null,"The BiMultiMap is useful when there is a many-to-many relation between to types of entities, and it is desired to query the relation in both directions."),(0,r.kt)("p",null,"For example, take a relation between persons and their hobbies. The BiMultiMap can efficiently tell you, given a person, what her hobbies are. But it can also efficiently tell you, given a hobby, which persons practice it."),(0,r.kt)("admonition",d({},{type:"info"}),(0,r.kt)("p",{parentName:"admonition"},"Internally the BiMultiMap uses two immutable MultiMaps, making lookup operations in both directions fast. Insertion and memory usage are double that of a MultiMap.")),(0,r.kt)("h2",d({},{id:"exports"}),"Exports"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,r.kt)("em",{parentName:"p"},"abstract")," BiMultiMap TypeScript types:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",d({parentName:"tr"},{align:null}),(0,r.kt)("a",d({parentName:"td"},{href:"/api/rimbu/bimultimap/BiMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMultiMap<K, V>"))),(0,r.kt)("td",d({parentName:"tr"},{align:null}),"a generic BiMultiMap between keys of type K and values of type V")))),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,r.kt)("em",{parentName:"p"},"concrete")," BiMultiMap types:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",d({parentName:"tr"},{align:null}),(0,r.kt)("a",d({parentName:"td"},{href:"/api/rimbu/bimultimap/HashBiMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashBiMultiMap<K, V>"))),(0,r.kt)("td",d({parentName:"tr"},{align:null}),"a BiMultiMap implementation where keys and values are hashed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",d({parentName:"tr"},{align:null}),(0,r.kt)("a",d({parentName:"td"},{href:"/api/rimbu/bimultimap/SortedBiMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap<K, V>"))),(0,r.kt)("td",d({parentName:"tr"},{align:null}),"a BiMultiMap implementation where keys and values are sorted")))),(0,r.kt)("h2",d({},{id:"inheritance"}),"Inheritance"),(0,r.kt)(n.G,{contents:"\ninterface Streamable<[K, V]>;\nabstract BiMultiMap<K, V>;\nclass HashBiMultiMap<K, V>;\nclass SortedBiMultiMap<K, V>;\n\nStreamable <|.. BiMultiMap;\nBiMultiMap <|-- HashBiMultiMap;\nBiMultiMap <|-- SortedBiMultiMap;\n",mdxType:"UmlGraph"}),(0,r.kt)("h3",d({},{id:"creation"}),"Creation"),(0,r.kt)(i.r,{path:"bimultimap/create.ts",mdxType:"SandBox"}),(0,r.kt)("h3",d({},{id:"query"}),"Query"),(0,r.kt)(i.r,{path:"bimultimap/query.ts",mdxType:"SandBox"}),(0,r.kt)("h3",d({},{id:"motivation"}),"Motivation"),(0,r.kt)(i.r,{path:"bimultimap/motivation.ts",mdxType:"SandBox"}),(0,r.kt)("h3",d({},{id:"builder"}),"Builder"),(0,r.kt)(i.r,{path:"bimultimap/build.ts",mdxType:"SandBox"}))}g.isMDXComponent=!0}}]);