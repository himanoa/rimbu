"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[36440],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return d}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function u(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),o=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):u(u({},t),e)),a},m=function(e){var t=o(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),s=o(a),d=n,f=s["".concat(p,".").concat(d)]||s[d]||c[d]||i;return a?r.createElement(f,u(u({ref:t},m),{},{components:a})):r.createElement(f,u({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,u=new Array(i);u[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:n,u[1]=l;for(var o=2;o<i;o++)u[o]=a[o];return r.createElement.apply(null,u)}return r.createElement.apply(null,a)}s.displayName="MDXCreateElement"},95091:function(e,t,a){a.r(t),a.d(t,{assets:function(){return b},contentTitle:function(){return d},default:function(){return k},frontMatter:function(){return s},metadata:function(){return f},toc:function(){return M}});var r=a(3905),n=Object.defineProperty,i=Object.defineProperties,u=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,m=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,c=(e,t)=>{for(var a in t||(t={}))p.call(t,a)&&m(e,a,t[a]);if(l)for(var a of l(t))o.call(t,a)&&m(e,a,t[a]);return e};const s={title:"MultiMapBase (namespace)",slug:"/rimbu/multimap/custom/MultiMapBase/namespace"},d="namespace MultiMapBase",f={unversionedId:"rimbu_multimap/custom/MultiMapBase/index",id:"rimbu_multimap/custom/MultiMapBase/index",title:"MultiMapBase (namespace)",description:"undocumented",source:"@site/api/rimbu_multimap/custom/MultiMapBase/index.mdx",sourceDirName:"rimbu_multimap/custom/MultiMapBase",slug:"/rimbu/multimap/custom/MultiMapBase/namespace",permalink:"/api/rimbu/multimap/custom/MultiMapBase/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"MultiMapBase (namespace)",slug:"/rimbu/multimap/custom/MultiMapBase/namespace"},sidebar:"defaultSidebar",previous:{title:"HashMultiMapSortedValueCreators",permalink:"/api/rimbu/multimap/custom/HashMultiMapSortedValueCreators/interface"},next:{title:"MultiMapBase.Builder<K,V,Tp>",permalink:"/api/rimbu/multimap/custom/MultiMapBase/Builder/interface"}},b={},M=[{value:"Interfaces",id:"interfaces",level:2}],y={toc:M};function k(e){var t,a=e,{components:n}=a,m=((e,t)=>{var a={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&o.call(e,r)&&(a[r]=e[r]);return a})(a,["components"]);return(0,r.kt)("wrapper",(t=c(c({},y),m),i(t,u({components:n,mdxType:"MDXLayout"}))),(0,r.kt)("h1",c({},{id:"namespace-multimapbase"}),(0,r.kt)("inlineCode",{parentName:"h1"},"namespace MultiMapBase")),(0,r.kt)("p",null,"undocumented"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,r.kt)("a",c({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMapBase<K,V,Tp>"))),(0,r.kt)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Builder/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMapBase.Builder<K,V,Tp>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMapBase.Context<UK,UV,Tp>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"The multimap's Context instance that serves as a factory for all related immutable instances and builders.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Factory/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMapBase.Factory<Tp,UK,UV>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multimap/custom/MultiMapBase/NonEmpty/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMapBase.NonEmpty<K,V,Tp>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multimap/custom/MultiMapBase/Types/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMapBase.Types"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}k.isMDXComponent=!0}}]);