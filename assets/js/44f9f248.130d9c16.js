"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[46765],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),o=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=o(e.components);return a.createElement(m.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,m=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=o(n),s=r,c=u["".concat(m,".").concat(s)]||u[s]||k[s]||l;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=s;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[u]="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},43953:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>N,default:()=>f,frontMatter:()=>c,metadata:()=>y,toc:()=>b});var a=n(3905),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))m.call(t,n)&&d(e,n,t[n]);if(p)for(var n of p(t))o.call(t,n)&&d(e,n,t[n]);return e},k=(e,t)=>l(e,i(t)),s=(e,t)=>{var n={};for(var a in e)m.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&p)for(var a of p(e))t.indexOf(a)<0&&o.call(e,a)&&(n[a]=e[a]);return n};const c={title:"AsyncReducer (namespace)",slug:"/rimbu/common/AsyncReducer/namespace"},N="namespace AsyncReducer",y={unversionedId:"rimbu_common/AsyncReducer/index",id:"rimbu_common/AsyncReducer/index",title:"AsyncReducer (namespace)",description:"An AsyncReducer is a stand-alone asynchronous calculation that takes input values of type I, and, when requested, produces an output value of type O.",source:"@site/api/rimbu_common/AsyncReducer/index.mdx",sourceDirName:"rimbu_common/AsyncReducer",slug:"/rimbu/common/AsyncReducer/namespace",permalink:"/api/rimbu/common/AsyncReducer/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"AsyncReducer (namespace)",slug:"/rimbu/common/AsyncReducer/namespace"},sidebar:"defaultSidebar",previous:{title:"AsyncOptLazy",permalink:"/api/rimbu/common/AsyncOptLazy/type"},next:{title:"Base<I,O,S>",permalink:"/api/rimbu/common/AsyncReducer/Base/class"}},h={},b=[{value:"Interfaces",id:"interfaces",level:2},{value:"Classes",id:"classes",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>combineArr</code>",id:"combinearr",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>combineObj</code>",id:"combineobj",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>contains</code>",id:"contains",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>create</code>",id:"create",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>createMono</code>",id:"createmono",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>createOutput</code>",id:"createoutput",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>every</code>",id:"every",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Type parameters",id:"type-parameters-6",level:5},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>from</code>",id:"from",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Type parameters",id:"type-parameters-7",level:5},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>join</code>",id:"join",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-8",level:5},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>some</code>",id:"some",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-9",level:5},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-10",level:5},{value:"<code>toJSMap</code>",id:"tojsmap",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Type parameters",id:"type-parameters-11",level:5},{value:"<code>toJSObject</code>",id:"tojsobject",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-12",level:5},{value:"<code>toJSSet</code>",id:"tojsset",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-13",level:5},{value:"Constants",id:"constants",level:2}],g={toc:b},v="wrapper";function f(e){var t=e,{components:n}=t,r=s(t,["components"]);return(0,a.kt)(v,k(u(u({},g),r),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",u({},{id:"namespace-asyncreducer"}),(0,a.kt)("inlineCode",{parentName:"h1"},"namespace AsyncReducer")),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," is a stand-alone asynchronous calculation that takes input values of type I, and, when requested, produces an output value of type O."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion type:")," ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer<I,O>"))),(0,a.kt)("h2",u({},{id:"interfaces"}),"Interfaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/AsyncReducer/Impl/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer.Impl<I,O,S>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")))),(0,a.kt)("h2",u({},{id:"classes"}),"Classes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/AsyncReducer/Base/class"}),(0,a.kt)("inlineCode",{parentName:"a"},"Base"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A base class that can be used to easily create ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," instances.")))),(0,a.kt)("h2",u({},{id:"functions"}),"Functions"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"combinearr"}),(0,a.kt)("inlineCode",{parentName:"h3"},"combineArr")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," that combines multiple input ",(0,a.kt)("inlineCode",{parentName:"p"},"reducers")," by providing input values to all of them and collecting the outputs in an array.")),(0,a.kt)("h4",u({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function combineArr<T, R extends readonly [unknown, unknown, ...unknown[]]>(...reducers: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"[K in keyof R]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R[K]>;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, unknown>[]): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.kt)("h5",u({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"R"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"reducers")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"[K in keyof R]: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"td"},"<T, R[K]>;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"} & "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"td"},"<T, unknown>[]")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"2 or more reducers to combine")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const red = AsyncReducer.combineArr(AsyncReducer.sum, AsyncReducer.average)\nawait AsyncStream.from(Stream.range({ amount: 9 }))\n.reduce(red)\n// => [36, 4]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"combineobj"}),(0,a.kt)("inlineCode",{parentName:"h3"},"combineObj")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," that combines multiple input ",(0,a.kt)("inlineCode",{parentName:"p"},"reducers")," by providing input values to all of them and collecting the outputs in the shape of the given object.")),(0,a.kt)("h4",u({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function combineObj<T, R extends {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"readonly [key: string]: unknown;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}>(reducerObj: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"readonly [K in keyof R]: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R[K]>;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"} & Record<string, "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, unknown>>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, R>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-1"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input type for all the reducers")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"R"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the result object shape")))),(0,a.kt)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"reducerObj")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"readonly [K in keyof R]: "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"td"},"<T, R[K]>;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"} & Record<string, "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"td"},"<T, unknown>>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"an object of keys, and reducers corresponding to those keys")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const red = AsyncReducer.combineObj({\ntheSum: Reducer.sum,\ntheAverage: Reducer.average\n});\nawait AsyncStream.from(Stream.range({ amount: 9 }))\n.reduce(red));\n// => { theSum: 36, theAverage: 4 }\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"contains"}),(0,a.kt)("inlineCode",{parentName:"h3"},"contains")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," that outputs false as long as the given ",(0,a.kt)("inlineCode",{parentName:"p"},"elem")," has not been encountered in the input values, true otherwise.")),(0,a.kt)("h4",u({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function contains<T>(elem: T, eq?: Eq<T>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, boolean>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-2"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the element type")))),(0,a.kt)("h4",u({},{id:"parameters-2"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"elem")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"T")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the element to search for")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"eq")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"Eq<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) a comparison function that returns true if te two given input values are considered equal")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.from(Stream.range({ amount: 10 })).reduce(AsyncReducer.contains(5)))\n// => true\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"create"}),(0,a.kt)("inlineCode",{parentName:"h3"},"create")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," with the given options:")),(0,a.kt)("h4",u({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function create<I, O = I, S = O>(init: AsyncOptLazy<S>, next: (current: S, next: I, index: number, halt: () => void) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<S>, stateToResult: (state: S) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<O>, onClose?: (state: S, error?: unknown) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<void>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-3"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"I"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input value type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"O"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the output value type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"S"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the internal state type")))),(0,a.kt)("h4",u({},{id:"parameters-3"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"init")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"AsyncOptLazy<S>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the optionally lazy and/or promised initial state value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"next")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(current: S, next: I, index: number, halt: () => void) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<S>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"returns (potentially asynchronously) the next state value based on the given inputs:",(0,a.kt)("br",null)," - current: the current state",(0,a.kt)("br",null)," - next: the current input value",(0,a.kt)("br",null)," - index: the input index value",(0,a.kt)("br",null)," - halt: function that, when called, ensures no more elements are passed to the reducer")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"stateToResult")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(state: S) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<O>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a potentially asynchronous function that converts the current state to an output value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"onClose")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(state: S, error?: unknown) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<void>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) a function that will be called when the reducer will no longer receive values"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"createmono"}),(0,a.kt)("inlineCode",{parentName:"h3"},"createMono")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," of which the input, state, and output types are the same.")),(0,a.kt)("h4",u({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function createMono<T>(init: AsyncOptLazy<T>, next: (current: T, next: T, index: number, halt: () => void) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>, stateToResult?: (state: T) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>, onClose?: (state: T, error?: unknown) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<void>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-4"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters-4"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"init")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"AsyncOptLazy<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the optionally lazy and/or promised initial state value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"next")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(current: T, next: T, index: number, halt: () => void) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"returns (potentially asynchronously) the next state value based on the given inputs:",(0,a.kt)("br",null)," - current: the current state",(0,a.kt)("br",null)," - next: the current input value",(0,a.kt)("br",null)," - index: the input index value",(0,a.kt)("br",null)," - halt: function that, when called, ensures no more elements are passed to the reducer")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"stateToResult")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(state: T) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a potentially asynchronous function that converts the current state to an output value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"onClose")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(state: T, error?: unknown) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<void>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) a function that will be called when the reducer will no longer receive values"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"createoutput"}),(0,a.kt)("inlineCode",{parentName:"h3"},"createOutput")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," of which the state and output types are the same.")),(0,a.kt)("h4",u({},{id:"definition-5"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function createOutput<I, O = I>(init: AsyncOptLazy<O>, next: (current: O, next: I, index: number, halt: () => void) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<O>, stateToResult?: (state: O) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<O>, onClose?: (state: O, error?: unknown) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<void>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-5"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"I"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the input value type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"O"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the output value type")))),(0,a.kt)("h4",u({},{id:"parameters-5"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"init")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"AsyncOptLazy<O>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the optionally lazy and/or promised initial state value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"next")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(current: O, next: I, index: number, halt: () => void) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<O>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"returns (potentially asynchronously) the next state value based on the given inputs:",(0,a.kt)("br",null)," - current: the current state",(0,a.kt)("br",null)," - next: the current input value",(0,a.kt)("br",null)," - index: the input index value",(0,a.kt)("br",null)," - halt: function that, when called, ensures no more elements are passed to the reducer")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"stateToResult")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(state: O) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<O>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a potentially asynchronous function that converts the current state to an output value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"onClose")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(state: O, error?: unknown) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<void>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) a function that will be called when the reducer will no longer receive values"))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"every"}),(0,a.kt)("inlineCode",{parentName:"h3"},"every")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," that ouputs true as long as all input values satisfy the given ",(0,a.kt)("inlineCode",{parentName:"p"},"pred"),", false otherwise.")),(0,a.kt)("h4",u({},{id:"definition-6"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function every<T>(pred: (value: T, index: number) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<boolean>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, boolean>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-6"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the element type")))),(0,a.kt)("h4",u({},{id:"parameters-6"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"pred")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<boolean>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a function taking an input value and its index, and returning true if the value satisfies the predicate")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.from(Stream.range{ amount: 10 })).reduce(AsyncReducer.every(async v => v < 5))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"from"}),(0,a.kt)("inlineCode",{parentName:"h3"},"from")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-7"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function from<I, O>(reducer: Reducer<I, O>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<I, O>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-7"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"I"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"O"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters-7"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"reducer")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"Reducer<I, O>")),(0,a.kt)("td",u({parentName:"tr"},{align:null})))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"join"}),(0,a.kt)("inlineCode",{parentName:"h3"},"join")),(0,a.kt)("p",null,"Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Reducer")," that joins the given input values into a string using the given options.")),(0,a.kt)("h4",u({},{id:"definition-8"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function join<T>({ sep, start, end, valueToString, }?: {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"sep?: string "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"start?: string "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"end?: string "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"valueToString?: ((value: T) => string) "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, string>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-8"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters-8"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{ sep, start, end, valueToString, }")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"{"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"sep?: string "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"start?: string "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"end?: string "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"valueToString?: ((value: T) => string) "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"td"},"}")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"console.log(Stream.of(1, 2, 3).reduce(Reducer.join({ sep: '-' })))\n// => '1-2-3'\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"some"}),(0,a.kt)("inlineCode",{parentName:"h3"},"some")),(0,a.kt)("p",null,"Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Reducer")," that ouputs false as long as no input value satisfies given ",(0,a.kt)("inlineCode",{parentName:"p"},"pred"),", true otherwise.")),(0,a.kt)("h4",u({},{id:"definition-9"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function some<T>(pred: (value: T, index: number) => "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"p"},"<boolean>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, boolean>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-9"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the element type")))),(0,a.kt)("h4",u({},{id:"parameters-9"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"pred")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"(value: T, index: number) => "),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/common/MaybePromise/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"MaybePromise")),(0,a.kt)("inlineCode",{parentName:"td"},"<boolean>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a function taking an input value and its index, and returning true if the value satisfies the predicate")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.from(Stream.range{ amount: 10 })).reduce(AsyncReducer.some(async v => v > 5))\n// => true\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"toarray"}),(0,a.kt)("inlineCode",{parentName:"h3"},"toArray")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," that collects received input values in an array, and returns a copy of that array as an output value when requested.")),(0,a.kt)("h4",u({},{id:"definition-10"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function toArray<T>(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, T[]>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-10"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the element type")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).reduce(AsyncReducer.toArray()))\n// => [1, 2, 3]\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"tojsmap"}),(0,a.kt)("inlineCode",{parentName:"h3"},"toJSMap")),(0,a.kt)("p",null,"Returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," that collects received input tuples into a mutable JS Map, and returns a copy of that map when output is requested.")),(0,a.kt)("h4",u({},{id:"definition-11"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function toJSMap<K, V>(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<[K, V], Map<K, V>>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-11"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the map key type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the map value type")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of([1, 'a'], [2, 'b']).reduce(AsyncReducer.toJSMap()))\n// Map { 1 => 'a', 2 => 'b' }\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"tojsobject"}),(0,a.kt)("inlineCode",{parentName:"h3"},"toJSObject")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," that collects 2-tuples containing keys and values into a plain JS object, and returns a copy of that object when output is requested.")),(0,a.kt)("h4",u({},{id:"definition-12"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function toJSObject<K extends string "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"},"number"),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"},"symbol, V>():"),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<[K, V], Record<K, V>>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-12"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the result object key type")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the result object value type")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(['a', 1], ['b', true]).reduce(AsyncReducer.toJSObject()))\n// { a: 1, b: true }\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"tojsset"}),(0,a.kt)("inlineCode",{parentName:"h3"},"toJSSet")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncReducer")," that collects received input values into a mutable JS Set, and returns a copy of that map when output is requested.")),(0,a.kt)("h4",u({},{id:"definition-13"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function toJSSet<T>(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/AsyncReducer/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"AsyncReducer")),(0,a.kt)("inlineCode",{parentName:"p"},"<T, Set<T>>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-13"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the element type")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"await AsyncStream.of(1, 2, 3).reduce(AsyncReducer.toJSSet()))\n// Set {1, 2, 3}\n")))),(0,a.kt)("h2",u({},{id:"constants"}),"Constants"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"and"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," that takes boolean values and outputs true if all input values are true, and false otherwise.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"average"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A ",(0,a.kt)("inlineCode",{parentName:"td"},"Reducer")," that calculates the average of all given numberic input values.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"count"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," that remembers the amount of input items provided.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"first"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," that remembers the first input value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"firstWhere"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," that remembers the first input value for which the given ",(0,a.kt)("inlineCode",{parentName:"td"},"pred")," function returns true.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"isEmpty"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," that outputs true if no input values are received, false otherwise.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"last"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," that remembers the last input value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"lastWhere"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," that remembers the last input value for which the given ",(0,a.kt)("inlineCode",{parentName:"td"},"pred")," function returns true.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"max"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns a ",(0,a.kt)("inlineCode",{parentName:"td"},"Reducer")," that remembers the maximum value of the numberic inputs.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"maxBy"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns a ",(0,a.kt)("inlineCode",{parentName:"td"},"Reducer")," that remembers the maximum value of the inputs using the given ",(0,a.kt)("inlineCode",{parentName:"td"},"compFun")," to compare input values")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"min"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns a ",(0,a.kt)("inlineCode",{parentName:"td"},"Reducer")," that remembers the minimum value of the numberic inputs.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"minBy"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns a ",(0,a.kt)("inlineCode",{parentName:"td"},"Reducer")," that remembers the minimum value of the inputs using the given ",(0,a.kt)("inlineCode",{parentName:"td"},"compFun")," to compare input values")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"nonEmpty"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," that outputs true if one or more input values are received, false otherwise.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"or"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"Returns an ",(0,a.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," that takes boolean values and outputs true if one or more input values are true, and false otherwise.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"product"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A ",(0,a.kt)("inlineCode",{parentName:"td"},"Reducer")," that calculates the product of all given numeric input values.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"sum"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A ",(0,a.kt)("inlineCode",{parentName:"td"},"Reducer")," that sums all given numeric input values.")))))}f.isMDXComponent=!0}}]);