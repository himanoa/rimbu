"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[60107],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>s});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var m=n.createContext({}),u=function(e){var t=n.useContext(m),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},d=function(e){var t=u(e.components);return n.createElement(m.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,m=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=u(r),b=a,s=p["".concat(m,".").concat(b)]||p[b]||c[b]||o;return r?n.createElement(s,l(l({ref:t},d),{},{components:r})):n.createElement(s,l({ref:t},d))}));function s(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=b;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[p]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},18331:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>S,contentTitle:()=>f,default:()=>T,frontMatter:()=>s,metadata:()=>y,toc:()=>k});var n=r(3905),a=Object.defineProperty,o=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,p=(e,t)=>{for(var r in t||(t={}))m.call(t,r)&&d(e,r,t[r]);if(i)for(var r of i(t))u.call(t,r)&&d(e,r,t[r]);return e},c=(e,t)=>o(e,l(t)),b=(e,t)=>{var r={};for(var n in e)m.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&u.call(e,n)&&(r[n]=e[n]);return r};const s={title:"SortedTableSortedColumn (namespace)",slug:"/rimbu/core/SortedTableSortedColumn/namespace"},f="namespace SortedTableSortedColumn",y={unversionedId:"rimbu_core/SortedTableSortedColumn/index",id:"rimbu_core/SortedTableSortedColumn/index",title:"SortedTableSortedColumn (namespace)",description:"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the Table documentation and the SortedTableSortedColumn API documentation",source:"@site/api/rimbu_core/SortedTableSortedColumn/index.mdx",sourceDirName:"rimbu_core/SortedTableSortedColumn",slug:"/rimbu/core/SortedTableSortedColumn/namespace",permalink:"/api/rimbu/core/SortedTableSortedColumn/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedTableSortedColumn (namespace)",slug:"/rimbu/core/SortedTableSortedColumn/namespace"},sidebar:"defaultSidebar",previous:{title:"SortedTableHashColumn",permalink:"/api/rimbu/core/SortedTableHashColumn/var"},next:{title:"SortedTableSortedColumn.Builder<R,C,V>",permalink:"/api/rimbu/core/SortedTableSortedColumn/Builder/interface"}},S={},k=[{value:"Interfaces",id:"interfaces",level:2}],C={toc:k},h="wrapper";function T(e){var t=e,{components:r}=t,a=b(t,["components"]);return(0,n.kt)(h,c(p(p({},C),a),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",p({},{id:"namespace-sortedtablesortedcolumn"}),(0,n.kt)("inlineCode",{parentName:"h1"},"namespace SortedTableSortedColumn")),(0,n.kt)("p",null,"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,n.kt)("a",p({parentName:"p"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,n.kt)("a",p({parentName:"p"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableSortedColumn/interface"}),"SortedTableSortedColumn API documentation"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,n.kt)("a",p({parentName:"p"},{href:"/api/rimbu/core/SortedTableSortedColumn/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"SortedTableSortedColumn<R,C,V>"))),(0,n.kt)("h2",p({},{id:"interfaces"}),"Interfaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",p({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",p({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",p({parentName:"tr"},{align:null}),(0,n.kt)("a",p({parentName:"td"},{href:"/api/rimbu/core/SortedTableSortedColumn/Builder/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"SortedTableSortedColumn.Builder<R,C,V>"))),(0,n.kt)("td",p({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",p({parentName:"tr"},{align:null}),(0,n.kt)("a",p({parentName:"td"},{href:"/api/rimbu/core/SortedTableSortedColumn/Context/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"SortedTableSortedColumn.Context<UR,UC>"))),(0,n.kt)("td",p({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",p({parentName:"tr"},{align:null}),(0,n.kt)("a",p({parentName:"td"},{href:"/api/rimbu/core/SortedTableSortedColumn/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"SortedTableSortedColumn.NonEmpty<R,C,V>"))),(0,n.kt)("td",p({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,n.kt)("a",p({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,n.kt)("a",p({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableSortedColumn/interface"}),"SortedTableSortedColumn API documentation"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",p({parentName:"tr"},{align:null}),(0,n.kt)("a",p({parentName:"td"},{href:"/api/rimbu/core/SortedTableSortedColumn/Types/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"SortedTableSortedColumn.Types"))),(0,n.kt)("td",p({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}T.isMDXComponent=!0}}]);