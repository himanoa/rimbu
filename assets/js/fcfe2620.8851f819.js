"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[80202],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),u=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=u(r),s=n,f=c["".concat(p,".").concat(s)]||c[s]||d[s]||i;return r?a.createElement(f,o(o({ref:t},m),{},{components:r})):a.createElement(f,o({ref:t},m))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},27159:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>y,contentTitle:()=>b,default:()=>g,frontMatter:()=>f,metadata:()=>M,toc:()=>h});var a=r(3905),n=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,m=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))p.call(t,r)&&m(e,r,t[r]);if(l)for(var r of l(t))u.call(t,r)&&m(e,r,t[r]);return e},d=(e,t)=>i(e,o(t)),s=(e,t)=>{var r={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&l)for(var a of l(e))t.indexOf(a)<0&&u.call(e,a)&&(r[a]=e[a]);return r};const f={title:"SortedBiMultiMap (namespace)",slug:"/rimbu/core/SortedBiMultiMap/namespace"},b="namespace SortedBiMultiMap",M={unversionedId:"rimbu_core/SortedBiMultiMap/index",id:"rimbu_core/SortedBiMultiMap/index",title:"SortedBiMultiMap (namespace)",description:"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are sorted. See the BiMultiMap documentation and the HashBiMultiMap API documentation",source:"@site/api/rimbu_core/SortedBiMultiMap/index.mdx",sourceDirName:"rimbu_core/SortedBiMultiMap",slug:"/rimbu/core/SortedBiMultiMap/namespace",permalink:"/api/rimbu/core/SortedBiMultiMap/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedBiMultiMap (namespace)",slug:"/rimbu/core/SortedBiMultiMap/namespace"},sidebar:"defaultSidebar",previous:{title:"RSet<T>",permalink:"/api/rimbu/core/RSet/interface"},next:{title:"SortedBiMultiMap.Builder<K,V>",permalink:"/api/rimbu/core/SortedBiMultiMap/Builder/interface"}},y={},h=[{value:"Interfaces",id:"interfaces",level:2}],k={toc:h},v="wrapper";function g(e){var t=e,{components:r}=t,n=s(t,["components"]);return(0,a.kt)(v,d(c(c({},k),n),{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",c({},{id:"namespace-sortedbimultimap"}),(0,a.kt)("inlineCode",{parentName:"h1"},"namespace SortedBiMultiMap")),(0,a.kt)("p",null,"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are sorted. See the ",(0,a.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,a.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/bimultimap/SortedBiMultiMap/interface"}),"HashBiMultiMap API documentation")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,a.kt)("a",c({parentName:"p"},{href:"/api/rimbu/core/SortedBiMultiMap/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap<K,V>"))),(0,a.kt)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedBiMultiMap/Builder/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap.Builder<K,V>"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"A mutable ",(0,a.kt)("inlineCode",{parentName:"td"},"SortedBiMultiMap")," builder used to efficiently create new immutable instances. See the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/SortedBiMultiMap/Builder/interface"}),"HashBiMultiMap.Builder API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedBiMultiMap/Context/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap.Context<UK,UV>"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"The SortedBiMultiMap's Context instance that serves as a factory for all related immutable instances and builders.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedBiMultiMap/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap.NonEmpty<K,V>"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are sorted. See the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/SortedBiMultiMap/interface"}),"HashBiMultiMap API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedBiMultiMap/Types/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap.Types"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}g.isMDXComponent=!0}}]);