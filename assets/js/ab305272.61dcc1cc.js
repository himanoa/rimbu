"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[3088],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=m(a),s=r,k=u["".concat(o,".").concat(s)]||u[s]||c[s]||i;return a?n.createElement(k,l(l({ref:t},d),{},{components:a})):n.createElement(k,l({ref:t},d))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=s;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[u]="string"==typeof e?e:r,l[1]=p;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},92610:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>N,contentTitle:()=>y,default:()=>v,frontMatter:()=>k,metadata:()=>f,toc:()=>h});var n=a(3905),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,u=(e,t)=>{for(var a in t||(t={}))o.call(t,a)&&d(e,a,t[a]);if(p)for(var a of p(t))m.call(t,a)&&d(e,a,t[a]);return e},c=(e,t)=>i(e,l(t)),s=(e,t)=>{var a={};for(var n in e)o.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&m.call(e,n)&&(a[n]=e[n]);return a};const k={title:"@rimbu/proximity",slug:"/rimbu/proximity"},y="package @rimbu/proximity",f={unversionedId:"rimbu_proximity/index",id:"rimbu_proximity/index",title:"@rimbu/proximity",description:"The @rimbu/proximity package provides implementations of ProximityMap.",source:"@site/api/rimbu_proximity/index.mdx",sourceDirName:"rimbu_proximity",slug:"/rimbu/proximity",permalink:"/api/rimbu/proximity",draft:!1,tags:[],version:"current",frontMatter:{title:"@rimbu/proximity",slug:"/rimbu/proximity"},sidebar:"defaultSidebar",previous:{title:"OrderedSortedSetCreators",permalink:"/api/rimbu/ordered/set-custom/OrderedSortedSetCreators/interface"},next:{title:"Distance",permalink:"/api/rimbu/proximity/Distance/type"}},N={},h=[{value:"Interfaces",id:"interfaces",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>findNearestKeyMatch</code>",id:"findnearestkeymatch",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"Constants",id:"constants",level:2}],b={toc:h},g="wrapper";function v(e){var t=e,{components:a}=t,r=s(t,["components"]);return(0,n.kt)(g,c(u(u({},b),r),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",u({},{id:"package-rimbuproximity"}),(0,n.kt)("inlineCode",{parentName:"h1"},"package @rimbu/proximity")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"@rimbu/proximity")," package provides implementations of ",(0,n.kt)("inlineCode",{parentName:"p"},"ProximityMap"),"."),(0,n.kt)("p",null," See the ",(0,n.kt)("a",u({parentName:"p"},{href:"/docs/collections/map"}),"Rimbu docs Map page")," for more information.\nThis is a convenience package that exports everything from the following sub-packages:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",u({parentName:"li"},{href:"./common"}),(0,n.kt)("inlineCode",{parentName:"a"},"@rimbu/proximity/common"))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",u({parentName:"li"},{href:"/api/rimbu/proximity/map"}),(0,n.kt)("inlineCode",{parentName:"a"},"@rimbu/proximity/map")))),(0,n.kt)("h2",u({},{id:"interfaces"}),"Interfaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/proximity/ProximityMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"ProximityMap<K,V>"))),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,n.kt)("a",u({parentName:"td"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),"ProximityMap API documentation"))))),(0,n.kt)("h2",u({},{id:"namespaces"}),"Namespaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/proximity/DistanceFunction/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"DistanceFunction"))),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"Returns The distance between its arguments, in a ","[",(0,n.kt)("inlineCode",{parentName:"td"},"0"),"; ",(0,n.kt)("inlineCode",{parentName:"td"},"Number.POSITIVE_INFINITY"),"]"," range")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/proximity/ProximityMap/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"ProximityMap"))),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,n.kt)("a",u({parentName:"td"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),"ProximityMap API documentation"))))),(0,n.kt)("h2",u({},{id:"functions"}),"Functions"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",u({},{id:"findnearestkeymatch"}),(0,n.kt)("inlineCode",{parentName:"h3"},"findNearestKeyMatch")),(0,n.kt)("p",null,"Given an Iterable of ","[key, value]"," entries, applies the distance function to each key, finding the one closest to the input key, also returning its associated value as well as the related distance; returns ",(0,n.kt)("inlineCode",{parentName:"p"},"undefined")," only when there are no successful match - that is, all the keys have +inf distance.\nPerforms a full linear scan unless a distance equal to 0 is encountered, in which case the function returns immediately; otherwise, the algorithm selects the smallest ",(0,n.kt)("em",{parentName:"p"},"non-infinite")," distance: if multiple keys happen to have such distance, the selection order is not guaranteed.")),(0,n.kt)("h4",u({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function findNearestKeyMatch<K, V>(distanceFunction: DistanceFunction<K>, key: K, entries: Iterable<readonly [K, V]>): "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/proximity/NearestKeyMatch/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"NearestKeyMatch")),(0,n.kt)("inlineCode",{parentName:"p"},"<K, V> "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,n.kt)("h5",u({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",u({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",u({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",u({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"distanceFunction")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"DistanceFunction<K>")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"Returns the distance between two keys")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"The key used as a reference to find the closest key")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entries")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"Iterable<readonly [K, V]>")),(0,n.kt)("td",u({parentName:"tr"},{align:null})))))),(0,n.kt)("h2",u({},{id:"constants"}),"Constants"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),"ProximityMap"),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")))))}v.isMDXComponent=!0}}]);