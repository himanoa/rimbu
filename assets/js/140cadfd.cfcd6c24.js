"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[11025],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return k}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),o=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=o(e.components);return n.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},N=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),N=o(a),k=r,h=N["".concat(d,".").concat(k)]||N[k]||s[k]||i;return a?n.createElement(h,l(l({ref:t},m),{},{components:a})):n.createElement(h,l({ref:t},m))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=N;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}N.displayName="MDXCreateElement"},34720:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return k},default:function(){return v},frontMatter:function(){return N},metadata:function(){return h},toc:function(){return c}});var n=a(3905),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,m=(e,t,a)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,s=(e,t)=>{for(var a in t||(t={}))d.call(t,a)&&m(e,a,t[a]);if(p)for(var a of p(t))o.call(t,a)&&m(e,a,t[a]);return e};const N={title:"Traverse (namespace)",slug:"/rimbu/graph/Traverse/namespace"},k="namespace Traverse",h={unversionedId:"rimbu_graph/Traverse/index",id:"rimbu_graph/Traverse/index",title:"Traverse (namespace)",description:"undocumented",source:"@site/api/rimbu_graph/Traverse/index.mdx",sourceDirName:"rimbu_graph/Traverse",slug:"/rimbu/graph/Traverse/namespace",permalink:"/api/rimbu/graph/Traverse/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Traverse (namespace)",slug:"/rimbu/graph/Traverse/namespace"},sidebar:"defaultSidebar",previous:{title:"Graph<N>",permalink:"/api/rimbu/graph/Graph/interface"},next:{title:"LinkType",permalink:"/api/rimbu/graph/Traverse/LinkType/type"}},u={},c=[{value:"Functions",id:"functions",level:2},{value:"<code>traverseBreadthFirstCustom</code>",id:"traversebreadthfirstcustom",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>traverseBreadthFirstHashed</code>",id:"traversebreadthfirsthashed",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>traverseBreadthFirstSorted</code>",id:"traversebreadthfirstsorted",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>traverseDepthFirstCustom</code>",id:"traversedepthfirstcustom",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>traverseDepthFirstHashed</code>",id:"traversedepthfirsthashed",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>traverseDepthFirstSorted</code>",id:"traversedepthfirstsorted",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-5",level:4}],g={toc:c};function v(e){var t,a=e,{components:r}=a,m=((e,t)=>{var a={};for(var n in e)d.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&p)for(var n of p(e))t.indexOf(n)<0&&o.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=s(s({},g),m),i(t,l({components:r,mdxType:"MDXLayout"}))),(0,n.kt)("h1",s({},{id:"namespace-traverse"}),(0,n.kt)("inlineCode",{parentName:"h1"},"namespace Traverse")),(0,n.kt)("p",null,"undocumented"),(0,n.kt)("h2",s({},{id:"functions"}),"Functions"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",s({},{id:"traversebreadthfirstcustom"}),(0,n.kt)("inlineCode",{parentName:"h3"},"traverseBreadthFirstCustom")),(0,n.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,n.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,n.kt)("inlineCode",{parentName:"p"},"startNode"),", and using breadth-first traversal. It can avoid loops if needed in a custom way by supplying the ",(0,n.kt)("inlineCode",{parentName:"p"},"addVisitedNode")," function.")),(0,n.kt)("h4",s({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function traverseBreadthFirstCustom<G extends "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N, addVisitedNode?: (node: N) => boolean): "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,n.kt)("h5",s({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",s({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"graph")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"G")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"startNode")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"addVisitedNode")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(node: N) => boolean")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"a function taking the currenty traversed node, and returning true if the node has been traversed before, or false otherwise")))),(0,n.kt)("div",s({},{className:"admonition admonition-note alert alert--secondary"}),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-heading"}),(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",s({parentName:"h5"},{className:"admonition-icon"}),(0,n.kt)("svg",s({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),(0,n.kt)("path",s({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"example")),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-content"}),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseBreadthFirstCustom(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [1, 3], [2, 3], [3, 4]]\n"))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",s({},{id:"traversebreadthfirsthashed"}),(0,n.kt)("inlineCode",{parentName:"h3"},"traverseBreadthFirstHashed")),(0,n.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,n.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,n.kt)("inlineCode",{parentName:"p"},"startNode"),", and using breadth-first traversal. It avoids loops by internally placing the visited nodes in a HashSet builder.")),(0,n.kt)("h4",s({},{id:"definition-1"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function traverseBreadthFirstHashed<G extends "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, V>, N, V>(graph: G, startNode: N): "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,n.kt)("h5",s({},{id:"type-parameters-1"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",s({},{id:"parameters-1"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"graph")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"G")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"startNode")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,n.kt)("div",s({},{className:"admonition admonition-note alert alert--secondary"}),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-heading"}),(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",s({parentName:"h5"},{className:"admonition-icon"}),(0,n.kt)("svg",s({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),(0,n.kt)("path",s({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"example")),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-content"}),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseBreadthFirstHashed(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [1, 3], [2, 3], [3, 4]]\n"))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",s({},{id:"traversebreadthfirstsorted"}),(0,n.kt)("inlineCode",{parentName:"h3"},"traverseBreadthFirstSorted")),(0,n.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,n.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,n.kt)("inlineCode",{parentName:"p"},"startNode"),", and using breadth-first traversal. It avoids loops by internally placing the visited nodes in a SortedSet builder.")),(0,n.kt)("h4",s({},{id:"definition-2"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function traverseBreadthFirstSorted<G extends "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N): "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,n.kt)("h5",s({},{id:"type-parameters-2"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",s({},{id:"parameters-2"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"graph")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"G")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"startNode")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,n.kt)("div",s({},{className:"admonition admonition-note alert alert--secondary"}),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-heading"}),(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",s({parentName:"h5"},{className:"admonition-icon"}),(0,n.kt)("svg",s({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),(0,n.kt)("path",s({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"example")),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-content"}),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseBreadthFirstSorted(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [1, 3], [2, 3], [3, 4]]\n"))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",s({},{id:"traversedepthfirstcustom"}),(0,n.kt)("inlineCode",{parentName:"h3"},"traverseDepthFirstCustom")),(0,n.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,n.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,n.kt)("inlineCode",{parentName:"p"},"startNode"),", and using depth-first traversal. It can avoid loops if needed in a custom way by supplying the ",(0,n.kt)("inlineCode",{parentName:"p"},"addVisitedNode")," function.")),(0,n.kt)("h4",s({},{id:"definition-3"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function traverseDepthFirstCustom<G extends "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N, addVisitedNode?: (node: N) => boolean): "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,n.kt)("h5",s({},{id:"type-parameters-3"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",s({},{id:"parameters-3"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"graph")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"G")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"startNode")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"addVisitedNode")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(node: N) => boolean")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"a function taking the currenty traversed node, and returning true if the node has been traversed before, or false otherwise")))),(0,n.kt)("div",s({},{className:"admonition admonition-note alert alert--secondary"}),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-heading"}),(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",s({parentName:"h5"},{className:"admonition-icon"}),(0,n.kt)("svg",s({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),(0,n.kt)("path",s({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"example")),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-content"}),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseDepthFirstCustom(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [2, 3], [1, 3], [3, 4]]\n"))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",s({},{id:"traversedepthfirsthashed"}),(0,n.kt)("inlineCode",{parentName:"h3"},"traverseDepthFirstHashed")),(0,n.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,n.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,n.kt)("inlineCode",{parentName:"p"},"startNode"),", and using depth-first traversal. It avoids loops by internally placing the visited nodes in a HashSet builder.")),(0,n.kt)("h4",s({},{id:"definition-4"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function traverseDepthFirstHashed<G extends "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N): "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,n.kt)("h5",s({},{id:"type-parameters-4"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",s({},{id:"parameters-4"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"graph")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"G")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"startNode")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,n.kt)("div",s({},{className:"admonition admonition-note alert alert--secondary"}),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-heading"}),(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",s({parentName:"h5"},{className:"admonition-icon"}),(0,n.kt)("svg",s({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),(0,n.kt)("path",s({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"example")),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-content"}),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseDepthFirstHashed(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [2, 3], [1, 3], [3, 4]]\n"))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",s({},{id:"traversedepthfirstsorted"}),(0,n.kt)("inlineCode",{parentName:"h3"},"traverseDepthFirstSorted")),(0,n.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,n.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,n.kt)("inlineCode",{parentName:"p"},"startNode"),", and using depth-first traversal. It avoids loops by internally placing the visited nodes in a SortedSet builder.")),(0,n.kt)("h4",s({},{id:"definition-5"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare function traverseDepthFirstSorted<G extends "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,n.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N): "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Stream")),(0,n.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,n.kt)("h5",s({},{id:"type-parameters-5"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,n.kt)("td",s({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",s({},{id:"parameters-5"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"graph")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"G")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"startNode")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"N")),(0,n.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,n.kt)("div",s({},{className:"admonition admonition-note alert alert--secondary"}),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-heading"}),(0,n.kt)("h5",{parentName:"div"},(0,n.kt)("span",s({parentName:"h5"},{className:"admonition-icon"}),(0,n.kt)("svg",s({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),(0,n.kt)("path",s({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"example")),(0,n.kt)("div",s({parentName:"div"},{className:"admonition-content"}),(0,n.kt)("pre",{parentName:"div"},(0,n.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseDepthFirstSorted(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [2, 3], [1, 3], [3, 4]]\n"))))))}v.isMDXComponent=!0}}]);