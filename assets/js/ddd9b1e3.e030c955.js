"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[3674],{3905:(e,r,t)=>{t.d(r,{Zo:()=>d,kt:()=>u});var a=t(67294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=a.createContext({}),c=function(e){var r=a.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},d=function(e){var r=c(e.components);return a.createElement(l.Provider,{value:r},e.children)},s="mdxType",h={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},m=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),s=c(t),m=n,u=s["".concat(l,".").concat(m)]||s[m]||h[m]||o;return t?a.createElement(u,i(i({ref:r},d),{},{components:t})):a.createElement(u,i({ref:r},d))}));function u(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var o=t.length,i=new Array(o);i[0]=m;var p={};for(var l in r)hasOwnProperty.call(r,l)&&(p[l]=r[l]);p.originalType=e,p[s]="string"==typeof e?e:n,i[1]=p;for(var c=2;c<o;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},64767:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>y,contentTitle:()=>f,default:()=>N,frontMatter:()=>u,metadata:()=>b,toc:()=>w});var a=t(3905),n=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,d=(e,r,t)=>r in e?n(e,r,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[r]=t,s=(e,r)=>{for(var t in r||(r={}))l.call(r,t)&&d(e,t,r[t]);if(p)for(var t of p(r))c.call(r,t)&&d(e,t,r[t]);return e},h=(e,r)=>o(e,i(r)),m=(e,r)=>{var t={};for(var a in e)l.call(e,a)&&r.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&p)for(var a of p(e))r.indexOf(a)<0&&c.call(e,a)&&(t[a]=e[a]);return t};const u={title:"ArrowGraphHashed (namespace)",slug:"/rimbu/core/ArrowGraphHashed/namespace"},f="namespace ArrowGraphHashed",b={unversionedId:"rimbu_core/ArrowGraphHashed/index",id:"rimbu_core/ArrowGraphHashed/index",title:"ArrowGraphHashed (namespace)",description:"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using hashed collections See the Graph documentation and the ArrowGraphHashed API documentation",source:"@site/api/rimbu_core/ArrowGraphHashed/index.mdx",sourceDirName:"rimbu_core/ArrowGraphHashed",slug:"/rimbu/core/ArrowGraphHashed/namespace",permalink:"/api/rimbu/core/ArrowGraphHashed/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"ArrowGraphHashed (namespace)",slug:"/rimbu/core/ArrowGraphHashed/namespace"},sidebar:"defaultSidebar",previous:{title:"ArrowGraph",permalink:"/api/rimbu/core/ArrowGraph/var"},next:{title:"ArrowGraphHashed.Builder<N>",permalink:"/api/rimbu/core/ArrowGraphHashed/Builder/interface"}},y={},w=[{value:"Interfaces",id:"interfaces",level:2}],g={toc:w},k="wrapper";function N(e){var r=e,{components:t}=r,n=m(r,["components"]);return(0,a.kt)(k,h(s(s({},g),n),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",s({},{id:"namespace-arrowgraphhashed"}),(0,a.kt)("inlineCode",{parentName:"h1"},"namespace ArrowGraphHashed")),(0,a.kt)("p",null,"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using hashed collections See the ",(0,a.kt)("a",s({parentName:"p"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,a.kt)("a",s({parentName:"p"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphHashed/interface"}),"ArrowGraphHashed API documentation")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,a.kt)("a",s({parentName:"p"},{href:"/api/rimbu/core/ArrowGraphHashed/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"ArrowGraphHashed<N>"))),(0,a.kt)("h2",s({},{id:"interfaces"}),"Interfaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),(0,a.kt)("a",s({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphHashed/Builder/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"ArrowGraphHashed.Builder<N>"))),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"A mutable ",(0,a.kt)("inlineCode",{parentName:"td"},"ArrowGraphHashed")," builder used to efficiently create new immutable instances. See the ",(0,a.kt)("a",s({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,a.kt)("a",s({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphHashed/Builder/interface"}),"ArrowGraphHashed.Builder API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),(0,a.kt)("a",s({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphHashed/Context/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"ArrowGraphHashed.Context<UN>"))),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"The ArrowGraphHashed's Context instance that serves as a factory for all related immutable instances and builders.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),(0,a.kt)("a",s({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphHashed/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"ArrowGraphHashed.NonEmpty<N>"))),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using hashed collections See the ",(0,a.kt)("a",s({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,a.kt)("a",s({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphHashed/interface"}),"ArrowGraphHashed API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),(0,a.kt)("a",s({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphHashed/Types/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"ArrowGraphHashed.Types"))),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}N.isMDXComponent=!0}}]);