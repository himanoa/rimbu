"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[11025],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>N});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),o=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=o(e.components);return r.createElement(d.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),k=o(a),N=n,u=k["".concat(d,".").concat(N)]||k[N]||s[N]||i;return a?r.createElement(u,l(l({ref:t},m),{},{components:a})):r.createElement(u,l({ref:t},m))}));function N(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=k;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p.mdxType="string"==typeof e?e:n,l[1]=p;for(var o=2;o<i;o++)l[o]=a[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}k.displayName="MDXCreateElement"},34720:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>N,default:()=>b,frontMatter:()=>k,metadata:()=>u,toc:()=>g});var r=a(3905),n=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,m=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,s=(e,t)=>{for(var a in t||(t={}))d.call(t,a)&&m(e,a,t[a]);if(p)for(var a of p(t))o.call(t,a)&&m(e,a,t[a]);return e};const k={title:"Traverse (namespace)",slug:"/rimbu/graph/Traverse/namespace"},N="namespace Traverse",u={unversionedId:"rimbu_graph/Traverse/index",id:"rimbu_graph/Traverse/index",title:"Traverse (namespace)",description:"undocumented",source:"@site/api/rimbu_graph/Traverse/index.mdx",sourceDirName:"rimbu_graph/Traverse",slug:"/rimbu/graph/Traverse/namespace",permalink:"/api/rimbu/graph/Traverse/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Traverse (namespace)",slug:"/rimbu/graph/Traverse/namespace"},sidebar:"defaultSidebar",previous:{title:"Graph<N>",permalink:"/api/rimbu/graph/Graph/interface"},next:{title:"LinkType",permalink:"/api/rimbu/graph/Traverse/LinkType/type"}},h={},g=[{value:"Functions",id:"functions",level:2},{value:"<code>traverseBreadthFirstCustom</code>",id:"traversebreadthfirstcustom",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>traverseBreadthFirstHashed</code>",id:"traversebreadthfirsthashed",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>traverseBreadthFirstSorted</code>",id:"traversebreadthfirstsorted",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>traverseDepthFirstCustom</code>",id:"traversedepthfirstcustom",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>traverseDepthFirstHashed</code>",id:"traversedepthfirsthashed",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>traverseDepthFirstSorted</code>",id:"traversedepthfirstsorted",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-5",level:4}],c={toc:g};function b(e){var t,a=e,{components:n}=a,m=((e,t)=>{var a={};for(var r in e)d.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&p)for(var r of p(e))t.indexOf(r)<0&&o.call(e,r)&&(a[r]=e[r]);return a})(a,["components"]);return(0,r.kt)("wrapper",(t=s(s({},c),m),i(t,l({components:n,mdxType:"MDXLayout"}))),(0,r.kt)("h1",s({},{id:"namespace-traverse"}),(0,r.kt)("inlineCode",{parentName:"h1"},"namespace Traverse")),(0,r.kt)("p",null,"undocumented"),(0,r.kt)("h2",s({},{id:"functions"}),"Functions"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",s({},{id:"traversebreadthfirstcustom"}),(0,r.kt)("inlineCode",{parentName:"h3"},"traverseBreadthFirstCustom")),(0,r.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"startNode"),", and using breadth-first traversal. It can avoid loops if needed in a custom way by supplying the ",(0,r.kt)("inlineCode",{parentName:"p"},"addVisitedNode")," function.")),(0,r.kt)("h4",s({},{id:"definition"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function traverseBreadthFirstCustom<G extends "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,r.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N, addVisitedNode?: (node: N) => boolean): "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Stream")),(0,r.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,r.kt)("h5",s({},{id:"type-parameters"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))))),(0,r.kt)("h4",s({},{id:"parameters"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"graph")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"G")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"startNode")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"N")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"addVisitedNode")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"(node: N) => boolean")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"a function taking the currenty traversed node, and returning true if the node has been traversed before, or false otherwise")))),(0,r.kt)("admonition",s({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseBreadthFirstCustom(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [1, 3], [2, 3], [3, 4]]\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",s({},{id:"traversebreadthfirsthashed"}),(0,r.kt)("inlineCode",{parentName:"h3"},"traverseBreadthFirstHashed")),(0,r.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"startNode"),", and using breadth-first traversal. It avoids loops by internally placing the visited nodes in a HashSet builder.")),(0,r.kt)("h4",s({},{id:"definition-1"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function traverseBreadthFirstHashed<G extends "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,r.kt)("inlineCode",{parentName:"p"},"<N, V>, N, V>(graph: G, startNode: N): "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Stream")),(0,r.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,r.kt)("h5",s({},{id:"type-parameters-1"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"V"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))))),(0,r.kt)("h4",s({},{id:"parameters-1"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"graph")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"G")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"startNode")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"N")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,r.kt)("admonition",s({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseBreadthFirstHashed(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [1, 3], [2, 3], [3, 4]]\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",s({},{id:"traversebreadthfirstsorted"}),(0,r.kt)("inlineCode",{parentName:"h3"},"traverseBreadthFirstSorted")),(0,r.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"startNode"),", and using breadth-first traversal. It avoids loops by internally placing the visited nodes in a SortedSet builder.")),(0,r.kt)("h4",s({},{id:"definition-2"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function traverseBreadthFirstSorted<G extends "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,r.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N): "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Stream")),(0,r.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,r.kt)("h5",s({},{id:"type-parameters-2"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))))),(0,r.kt)("h4",s({},{id:"parameters-2"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"graph")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"G")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"startNode")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"N")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,r.kt)("admonition",s({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseBreadthFirstSorted(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [1, 3], [2, 3], [3, 4]]\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",s({},{id:"traversedepthfirstcustom"}),(0,r.kt)("inlineCode",{parentName:"h3"},"traverseDepthFirstCustom")),(0,r.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"startNode"),", and using depth-first traversal. It can avoid loops if needed in a custom way by supplying the ",(0,r.kt)("inlineCode",{parentName:"p"},"addVisitedNode")," function.")),(0,r.kt)("h4",s({},{id:"definition-3"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function traverseDepthFirstCustom<G extends "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,r.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N, addVisitedNode?: (node: N) => boolean): "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Stream")),(0,r.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,r.kt)("h5",s({},{id:"type-parameters-3"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))))),(0,r.kt)("h4",s({},{id:"parameters-3"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"graph")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"G")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"startNode")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"N")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"addVisitedNode")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"(node: N) => boolean")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"a function taking the currenty traversed node, and returning true if the node has been traversed before, or false otherwise")))),(0,r.kt)("admonition",s({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseDepthFirstCustom(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [2, 3], [1, 3], [3, 4]]\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",s({},{id:"traversedepthfirsthashed"}),(0,r.kt)("inlineCode",{parentName:"h3"},"traverseDepthFirstHashed")),(0,r.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"startNode"),", and using depth-first traversal. It avoids loops by internally placing the visited nodes in a HashSet builder.")),(0,r.kt)("h4",s({},{id:"definition-4"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function traverseDepthFirstHashed<G extends "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,r.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N): "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Stream")),(0,r.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,r.kt)("h5",s({},{id:"type-parameters-4"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))))),(0,r.kt)("h4",s({},{id:"parameters-4"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"graph")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"G")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"startNode")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"N")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,r.kt)("admonition",s({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseDepthFirstHashed(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [2, 3], [1, 3], [3, 4]]\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",s({},{id:"traversedepthfirstsorted"}),(0,r.kt)("inlineCode",{parentName:"h3"},"traverseDepthFirstSorted")),(0,r.kt)("p",null,"Returns a stream of connections that can be reached in the given ",(0,r.kt)("inlineCode",{parentName:"p"},"graph")," starting at the given ",(0,r.kt)("inlineCode",{parentName:"p"},"startNode"),", and using depth-first traversal. It avoids loops by internally placing the visited nodes in a SortedSet builder.")),(0,r.kt)("h4",s({},{id:"definition-5"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function traverseDepthFirstSorted<G extends "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/graph/custom/VariantGraphBase/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraphBase")),(0,r.kt)("inlineCode",{parentName:"p"},"<N, any>, N>(graph: G, startNode: N): "),(0,r.kt)("a",s({parentName:"p"},{href:"/api/rimbu/stream/Stream/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Stream")),(0,r.kt)("inlineCode",{parentName:"p"},"<LinkType<G, N>>;"))),(0,r.kt)("h5",s({},{id:"type-parameters-5"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"G"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),"N"),(0,r.kt)("td",s({parentName:"tr"},{align:null}))))),(0,r.kt)("h4",s({},{id:"parameters-5"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"graph")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"G")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the graph to traverse")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"startNode")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"N")),(0,r.kt)("td",s({parentName:"tr"},{align:null}),"the start node within the graph")))),(0,r.kt)("admonition",s({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",s({parentName:"pre"},{className:"language-ts"}),"const g = EdgeGraphHashed.of([1, 2], [2, 3], [1, 3], [3, 4])\nconst stream = traverseDepthFirstSorted(g, 1)\nconsole.log(stream.toArray())\n// => [[1, 2], [2, 3], [1, 3], [3, 4]]\n")))))}b.isMDXComponent=!0}}]);