"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[23606],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),m=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=m(e.components);return a.createElement(d.Provider,{value:t},e.children)},k="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),k=m(n),s=r,c=k["".concat(d,".").concat(s)]||k[s]||u[s]||i;return n?a.createElement(c,l(l({ref:t},p),{},{components:n})):a.createElement(c,l({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[k]="string"==typeof e?e:r,l[1]=o;for(var m=2;m<i;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},84280:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>f,contentTitle:()=>N,default:()=>b,frontMatter:()=>c,metadata:()=>h,toc:()=>v});var a=n(3905),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,p=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,k=(e,t)=>{for(var n in t||(t={}))d.call(t,n)&&p(e,n,t[n]);if(o)for(var n of o(t))m.call(t,n)&&p(e,n,t[n]);return e},u=(e,t)=>i(e,l(t)),s=(e,t)=>{var n={};for(var a in e)d.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&o)for(var a of o(e))t.indexOf(a)<0&&m.call(e,a)&&(n[a]=e[a]);return n};const c={title:"SortedSet.NonEmpty<T>",slug:"/rimbu/core/SortedSet/NonEmpty/interface"},N="interface SortedSet.NonEmpty<T>",h={unversionedId:"rimbu_core/SortedSet/NonEmpty.interface",id:"rimbu_core/SortedSet/NonEmpty.interface",title:"SortedSet.NonEmpty<T>",description:"A non-empty type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the Set documentation and the SortedSet API documentation",source:"@site/api/rimbu_core/SortedSet/NonEmpty.interface.mdx",sourceDirName:"rimbu_core/SortedSet",slug:"/rimbu/core/SortedSet/NonEmpty/interface",permalink:"/api/rimbu/core/SortedSet/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedSet.NonEmpty<T>",slug:"/rimbu/core/SortedSet/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"SortedSet.Context<UT>",permalink:"/api/rimbu/core/SortedSet/Context/interface"},next:{title:"SortedSet.Types",permalink:"/api/rimbu/core/SortedSet/Types/interface"}},f={},v=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>drop</code>",id:"drop",level:3},{value:"Definition",id:"definition",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>getAtIndex</code>",id:"getatindex",level:3},{value:"Definitions",id:"definitions",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>max</code>",id:"max",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>min</code>",id:"min",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>slice</code>",id:"slice",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"<code>sliceIndex</code>",id:"sliceindex",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>streamRange</code>",id:"streamrange",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>streamSliceIndex</code>",id:"streamsliceindex",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Parameters",id:"parameters-6",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>take</code>",id:"take",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-1",level:4},{value:"Parameters",id:"parameters-7",level:4},{value:"Overrides",id:"overrides-9",level:4}],g={toc:v},S="wrapper";function b(e){var t=e,{components:n}=t,r=s(t,["components"]);return(0,a.kt)(S,u(k(k({},g),r),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",k({},{id:"interface-sortedsetnonemptyt"}),(0,a.kt)("inlineCode",{parentName:"h1"},"interface SortedSet.NonEmpty<T>")),(0,a.kt)("p",null,"A non-empty type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,a.kt)("a",k({parentName:"p"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,a.kt)("a",k({parentName:"p"},{href:"https://rimbu.org/api/rimbu/ordered/set/SortedSet/interface"}),"SortedSet API documentation")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Extends:")," ",(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/Streamable/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Streamable.NonEmpty<T>")),", ",(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedSet<T>"))),(0,a.kt)("h2",k({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the value type")))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},"The ",(0,a.kt)("inlineCode",{parentName:"li"},"SortedSet")," keeps the inserted values in sorted order according to the context's ",(0,a.kt)("inlineCode",{parentName:"li"},"comp")," ",(0,a.kt)("inlineCode",{parentName:"li"},"Comp")," instance."))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const s1 = SortedSet.empty<string>()\nconst s2 = SortedSet.of('a', 'b', 'c')\n"))),(0,a.kt)("h2",k({},{id:"methods"}),"Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"drop"}),(0,a.kt)("inlineCode",{parentName:"h3"},"drop")),(0,a.kt)("p",null,"Returns a SortedSet containing all but the the first ",(0,a.kt)("inlineCode",{parentName:"p"},"amount")," of value of this SortedSet.")),(0,a.kt)("h4",k({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"drop(amount: number): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedSet")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"amount")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the amount of elements to keep")))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"a negative ",(0,a.kt)("inlineCode",{parentName:"p"},"amount")," drops the last values instead of the first, e.g. -2 is the last 2 elements")),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.drop(2).toArray())\n// => ['c', 'd']\nconsole.log(m.drop(-2).toArray())\n// => ['a', 'b']\n"))),(0,a.kt)("h4",k({},{id:"overrides"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#drop"}),"SortedSet.drop"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"getatindex"}),(0,a.kt)("inlineCode",{parentName:"h3"},"getAtIndex")),(0,a.kt)("p",null,"Returns the value at the given index of the value sort order of the SortedSet, or a fallback value (default: undefined) if the index is out of bounds.")),(0,a.kt)("h4",k({},{id:"definitions"}),"Definitions"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getAtIndex(index: number): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined;"))),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"getAtIndex<O>(index: number, otherwise: "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,a.kt)("inlineCode",{parentName:"p"},"<O>): T "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," O;"))),(0,a.kt)("h4",k({},{id:"parameters-1"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"index")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the index in the key sort order")))),(0,a.kt)("admonition",k({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"negative index values will retrieve the values from the end of the sort order, e.g. -1 is the last value")),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.getAtIndex(1))\n// => 'b'\nconsole.log(m.getAtIndex(-1))\n// => 'd'\nconsole.log(m.getAtIndex(10))\n// => undefined\nconsole.log(m.getAtIndex(10, 'q'))\n// => 'q'\n"))),(0,a.kt)("h4",k({},{id:"overrides-1"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#getAtIndex"}),"SortedSet.getAtIndex"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"max"}),(0,a.kt)("inlineCode",{parentName:"h3"},"max")),(0,a.kt)("p",null,"Returns the maximum value of the SortedSet.")),(0,a.kt)("h4",k({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"max(): T;"))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c');\nconsole.log(m.max())\n// => 'd'\n"))),(0,a.kt)("h4",k({},{id:"overrides-2"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#max"}),"SortedSet.max"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"min"}),(0,a.kt)("inlineCode",{parentName:"h3"},"min")),(0,a.kt)("p",null,"Returns the minimum value of the SortedSet.")),(0,a.kt)("h4",k({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"min(): T;"))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c');\nconsole.log(m.min())\n// => 'a'\n"))),(0,a.kt)("h4",k({},{id:"overrides-3"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#min"}),"SortedSet.min"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"slice"}),(0,a.kt)("inlineCode",{parentName:"h3"},"slice")),(0,a.kt)("p",null,"Returns a SortedSet containing only those values that are within the given ",(0,a.kt)("inlineCode",{parentName:"p"},"keyRange"),".")),(0,a.kt)("h4",k({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"slice(range: Range<T>): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedSet")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-2"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"range")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"Range<T>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"a ",(0,a.kt)("inlineCode",{parentName:"td"},"Range")," defining the values to include")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.slice({ start: 'b', end: 'c' }).toArray())\n// => ['b', 'c']\n"))),(0,a.kt)("h4",k({},{id:"overrides-4"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#slice"}),"SortedSet.slice"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"sliceindex"}),(0,a.kt)("inlineCode",{parentName:"h3"},"sliceIndex")),(0,a.kt)("p",null,"Returns a SortedSet containing only those values that are within the given ",(0,a.kt)("inlineCode",{parentName:"p"},"range")," index range of the value sort order.")),(0,a.kt)("h4",k({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"sliceIndex(range: IndexRange): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedSet")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-3"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"range")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"IndexRange")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"an ",(0,a.kt)("inlineCode",{parentName:"td"},"IndexRange")," defining the sort order indices to include.")))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c').asNormal();\nconsole.log(m.sliceIndex({ start: 1, amount: 2 }).toArray())\n// => ['b', 'c']\n"))),(0,a.kt)("h4",k({},{id:"overrides-5"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#sliceIndex"}),"SortedSet.sliceIndex"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"stream"}),(0,a.kt)("inlineCode",{parentName:"h3"},"stream")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",k({},{id:"definition-5"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"stream(reversed?: boolean): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/Stream/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Stream.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-4"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"reversed")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",k({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",k({},{id:"overrides-6"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/Streamable/NonEmpty/interface#stream"}),"NonEmpty.stream"),", ",(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#stream"}),"SortedSet.stream"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"streamrange"}),(0,a.kt)("inlineCode",{parentName:"h3"},"streamRange")),(0,a.kt)("p",null,"Returns a Stream of sorted values of this collection within the given ",(0,a.kt)("inlineCode",{parentName:"p"},"keyRange"),".")),(0,a.kt)("h4",k({},{id:"definition-6"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"streamRange(range: Range<T>, reversed?: boolean): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/Stream/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Stream")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-5"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"range")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"Range<T>")),(0,a.kt)("td",k({parentName:"tr"},{align:null}))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"reversed")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",k({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c');\nconsole.log(m.streamRange({ start: 'b', end: 'c' }).toArray())\n// => ['b', 'c']\n"))),(0,a.kt)("h4",k({},{id:"overrides-7"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#streamRange"}),"SortedSet.streamRange"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"streamsliceindex"}),(0,a.kt)("inlineCode",{parentName:"h3"},"streamSliceIndex")),(0,a.kt)("p",null,"Returns a Stream of sorted values of this collection within the given ",(0,a.kt)("inlineCode",{parentName:"p"},"range")," index range.")),(0,a.kt)("h4",k({},{id:"definition-7"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"streamSliceIndex(range: IndexRange, reversed?: boolean): "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/Stream/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Stream")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"parameters-6"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"range")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"IndexRange")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),"the range of values to include in the stream")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"reversed")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"boolean")),(0,a.kt)("td",k({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",k({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",k({parentName:"pre"},{className:"language-ts"}),"const m = SortedSet.of('b', 'd', 'a', 'c');\nconsole.log(m.streamSliceIndex({ start: 1, amount: 2 }).toArray())\n// => ['b', 'c']\n"))),(0,a.kt)("h4",k({},{id:"overrides-8"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#streamSliceIndex"}),"SortedSet.streamSliceIndex"))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",k({},{id:"take"}),(0,a.kt)("inlineCode",{parentName:"h3"},"take")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",k({},{id:"definition-8"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"take<N extends number>(amount: N): 0 extends N ? "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedSet")),(0,a.kt)("inlineCode",{parentName:"p"},"<T> : "),(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedSet.NonEmpty")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",k({},{id:"type-parameters-1"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),"N"),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"number")),(0,a.kt)("td",k({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",k({},{id:"parameters-7"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",k({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"amount")),(0,a.kt)("td",k({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"N")),(0,a.kt)("td",k({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",k({},{id:"overrides-9"}),"Overrides"),(0,a.kt)("p",null,(0,a.kt)("a",k({parentName:"p"},{href:"/api/rimbu/core/SortedSet/interface#take"}),"SortedSet.take"))))}b.isMDXComponent=!0}}]);