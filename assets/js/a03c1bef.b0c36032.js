"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[48397],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),y=u(n),d=a,m=y["".concat(c,".").concat(d)]||y[d]||f[d]||i;return n?r.createElement(m,o(o({ref:t},l),{},{components:n})):r.createElement(m,o({ref:t},l))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},51823:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return d},default:function(){return O},frontMatter:function(){return y},metadata:function(){return m},toc:function(){return b}});var r=n(3905),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,l=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,f=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&l(e,n,t[n]);if(p)for(var n of p(t))u.call(t,n)&&l(e,n,t[n]);return e};const y={title:"Entry",slug:"/rimbu/deep/Patch/Entry/type"},d="type Entry<T,R>",m={unversionedId:"rimbu_deep/Patch/Entry.type",id:"rimbu_deep/Patch/Entry.type",title:"Entry",description:"The entry type for a (nested) patch. Can be either a patch object or a function accepting the nested patch function and returning a patch object.",source:"@site/api/rimbu_deep/Patch/Entry.type.mdx",sourceDirName:"rimbu_deep/Patch",slug:"/rimbu/deep/Patch/Entry/type",permalink:"/api/rimbu/deep/Patch/Entry/type",draft:!1,tags:[],version:"current",frontMatter:{title:"Entry",slug:"/rimbu/deep/Patch/Entry/type"},sidebar:"defaultSidebar",previous:{title:"Patch (namespace)",permalink:"/api/rimbu/deep/Patch/namespace"},next:{title:"Nested",permalink:"/api/rimbu/deep/Patch/Nested/type"}},s={},b=[{value:"Definition",id:"definition",level:2}],h={toc:b};function O(e){var t,n=e,{components:a}=n,l=((e,t)=>{var n={};for(var r in e)c.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&p)for(var r of p(e))t.indexOf(r)<0&&u.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=f(f({},h),l),i(t,o({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("h1",f({},{id:"type-entrytr"}),(0,r.kt)("inlineCode",{parentName:"h1"},"type Entry<T,R>")),(0,r.kt)("p",null,"The entry type for a (nested) patch. Can be either a patch object or a function accepting the nested patch function and returning a patch object."),(0,r.kt)("h2",f({},{id:"definition"}),"Definition"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"type Entry<T, R> = "),(0,r.kt)("a",f({parentName:"p"},{href:"/api/rimbu/deep/Patch/Obj/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"Patch.Obj")),(0,r.kt)("inlineCode",{parentName:"p"},"<T, R> "),(0,r.kt)("code",null,"|"),(0,r.kt)("inlineCode",{parentName:"p"},"((patchNested:"),(0,r.kt)("a",f({parentName:"p"},{href:"/api/rimbu/deep/Patch/Nested/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"Patch.Nested")),(0,r.kt)("inlineCode",{parentName:"p"},") => "),(0,r.kt)("a",f({parentName:"p"},{href:"/api/rimbu/deep/Patch/Obj/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"Patch.Obj")),(0,r.kt)("inlineCode",{parentName:"p"},"<T, R>);")))}O.isMDXComponent=!0}}]);