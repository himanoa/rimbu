"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[44294],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=m(n),s=r,k=u["".concat(p,".").concat(s)]||u[s]||d[s]||o;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=s;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var m=2;m<o;m++)l[m]=n[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},96828:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>b,default:()=>h,frontMatter:()=>k,metadata:()=>f,toc:()=>y});var a=n(3905),r=Object.defineProperty,o=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&c(e,n,t[n]);if(i)for(var n of i(t))m.call(t,n)&&c(e,n,t[n]);return e},d=(e,t)=>o(e,l(t)),s=(e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&i)for(var a of i(e))t.indexOf(a)<0&&m.call(e,a)&&(n[a]=e[a]);return n};const k={title:"Comp<K>",slug:"/rimbu/common/Comp/interface"},b="interface Comp<K>",f={unversionedId:"rimbu_common/Comp.interface",id:"rimbu_common/Comp.interface",title:"Comp<K>",description:"An object providing methods to compare two values of type K.",source:"@site/api/rimbu_common/Comp.interface.mdx",sourceDirName:"rimbu_common",slug:"/rimbu/common/Comp/interface",permalink:"/api/rimbu/common/Comp/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Comp<K>",slug:"/rimbu/common/Comp/interface"},sidebar:"defaultSidebar",previous:{title:"Comp (namespace)",permalink:"/api/rimbu/common/Comp/namespace"},next:{title:"Eq (namespace)",permalink:"/api/rimbu/common/Eq/namespace"}},v={},y=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>compare</code>",id:"compare",level:3},{value:"Definition",id:"definition",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>isComparable</code>",id:"iscomparable",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Parameters",id:"parameters-1",level:4}],N={toc:y},g="wrapper";function h(e){var t=e,{components:n}=t,r=s(t,["components"]);return(0,a.kt)(g,d(u(u({},N),r),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",u({},{id:"interface-compk"}),(0,a.kt)("inlineCode",{parentName:"h1"},"interface Comp<K>")),(0,a.kt)("p",null,"An object providing methods to compare two values of type ",(0,a.kt)("inlineCode",{parentName:"p"},"K"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion namespace:")," ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/common/Comp/namespace"}),"Comp")),(0,a.kt)("h2",u({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"K"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the value type")))),(0,a.kt)("h2",u({},{id:"methods"}),"Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"compare"}),(0,a.kt)("inlineCode",{parentName:"h3"},"compare")),(0,a.kt)("p",null,"Returns 0 if given ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"value2")," are equal, a positive value is ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is greater than ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),", and a negative value otherwise.")),(0,a.kt)("h4",u({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"compare(value1: K, value2: K): number;"))),(0,a.kt)("h4",u({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"value1")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"K")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the first value to compare")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"value2")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"K")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the seconds value to compare")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const c = Comp.numberComp()\nconsole.log(c.compare(5, 5))\n// => 0\nconsole.log(c.compare(3, 5))\n// => -2\nconsole.log(c.compare(5, 3))\n// => 2\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"iscomparable"}),(0,a.kt)("inlineCode",{parentName:"h3"},"isComparable")),(0,a.kt)("p",null,"Returns true if this instance can compare given ",(0,a.kt)("inlineCode",{parentName:"p"},"obj"),".")),(0,a.kt)("h4",u({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"isComparable(obj: any): obj is K;"))),(0,a.kt)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"obj")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"any")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the object to check")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const c = Comp.numberComp()\nconsole.log(c.isComparable(5))\n// => true\nconsole.log(c.isComparable('a'))\n// => false\n")))))}h.isMDXComponent=!0}}]);