"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[58249],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),u=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(l.Provider,{value:t},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,p=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(r),y=a,m=s["".concat(l,".").concat(y)]||s[y]||f[y]||p;return r?n.createElement(m,o(o({ref:t},c),{},{components:r})):n.createElement(m,o({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var p=r.length,o=new Array(p);o[0]=y;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[s]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<p;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}y.displayName="MDXCreateElement"},48139:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>O,contentTitle:()=>b,default:()=>P,frontMatter:()=>m,metadata:()=>d,toc:()=>h});var n=r(3905),a=Object.defineProperty,p=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,s=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&c(e,r,t[r]);if(i)for(var r of i(t))u.call(t,r)&&c(e,r,t[r]);return e},f=(e,t)=>p(e,o(t)),y=(e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&u.call(e,n)&&(r[n]=e[n]);return r};const m={title:"Tup",slug:"/rimbu/core/Deep/Path/Internal/Tup/type"},b="type Tup<T,Write,Maybe>",d={unversionedId:"rimbu_core/Deep/Path/Internal/Tup.type",id:"rimbu_core/Deep/Path/Internal/Tup.type",title:"Tup",description:"Determines the allowed paths for a tuple. Since tuples have fixed types, they do not need to be optional, in contrast to arrays.",source:"@site/api/rimbu_core/Deep/Path/Internal/Tup.type.mdx",sourceDirName:"rimbu_core/Deep/Path/Internal",slug:"/rimbu/core/Deep/Path/Internal/Tup/type",permalink:"/api/rimbu/core/Deep/Path/Internal/Tup/type",draft:!1,tags:[],version:"current",frontMatter:{title:"Tup",slug:"/rimbu/core/Deep/Path/Internal/Tup/type"},sidebar:"defaultSidebar",previous:{title:"Separator",permalink:"/api/rimbu/core/Deep/Path/Internal/Separator/type"},next:{title:"Result (namespace)",permalink:"/api/rimbu/core/Deep/Path/Result/namespace"}},O={},h=[{value:"Definition",id:"definition",level:2}],v={toc:h},T="wrapper";function P(e){var t=e,{components:r}=t,a=y(t,["components"]);return(0,n.kt)(T,f(s(s({},v),a),{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",s({},{id:"type-tuptwritemaybe"}),(0,n.kt)("inlineCode",{parentName:"h1"},"type Tup<T,Write,Maybe>")),(0,n.kt)("p",null,"Determines the allowed paths for a tuple. Since tuples have fixed types, they do not need to be optional, in contrast to arrays."),(0,n.kt)("h2",s({},{id:"definition"}),"Definition"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"type Tup<T, Write extends boolean, Maybe extends boolean> = {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"[K in "),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/core/Tuple/KeysOf/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Tuple.KeysOf")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>]: `[${K}]${"),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/core/Deep/Path/Internal/Generic/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Path.Internal.Generic")),(0,n.kt)("inlineCode",{parentName:"p"},"<T[K], Write, Maybe>}`;`<br/>&nbsp;&nbsp;&nbsp;&nbsp;`}["),(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/core/Tuple/KeysOf/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Tuple.KeysOf")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>];")))}P.isMDXComponent=!0}}]);