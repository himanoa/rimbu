"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[83493],{3905:function(t,e,a){a.d(e,{Zo:function(){return m},kt:function(){return s}});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function p(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var u=n.createContext({}),o=function(t){var e=n.useContext(u),a=e;return t&&(a="function"==typeof t?t(e):p(p({},e),t)),a},m=function(t){var e=o(t.components);return n.createElement(u.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},f=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,u=t.parentName,m=l(t,["components","mdxType","originalType","parentName"]),f=o(a),s=r,d=f["".concat(u,".").concat(s)]||f[s]||c[s]||i;return a?n.createElement(d,p(p({ref:e},m),{},{components:a})):n.createElement(d,p({ref:e},m))}));function s(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,p=new Array(i);p[0]=f;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=t,l.mdxType="string"==typeof t?t:r,p[1]=l;for(var o=2;o<i;o++)p[o]=a[o];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},26124:function(t,e,a){a.r(e),a.d(e,{assets:function(){return M},contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return f},metadata:function(){return d},toc:function(){return y}});var n=a(3905),r=Object.defineProperty,i=Object.defineProperties,p=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,m=(t,e,a)=>e in t?r(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a,c=(t,e)=>{for(var a in e||(e={}))u.call(e,a)&&m(t,a,e[a]);if(l)for(var a of l(e))o.call(e,a)&&m(t,a,e[a]);return t};const f={title:"VariantMultiMap (namespace)",slug:"/rimbu/multimap/VariantMultiMap/namespace"},s="namespace VariantMultiMap",d={unversionedId:"rimbu_multimap/VariantMultiMap/index",id:"rimbu_multimap/VariantMultiMap/index",title:"VariantMultiMap (namespace)",description:"A type-variant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the MultiMap documentation and the VariantMultiMap API documentation",source:"@site/api/rimbu_multimap/VariantMultiMap/index.mdx",sourceDirName:"rimbu_multimap/VariantMultiMap",slug:"/rimbu/multimap/VariantMultiMap/namespace",permalink:"/api/rimbu/multimap/VariantMultiMap/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantMultiMap (namespace)",slug:"/rimbu/multimap/VariantMultiMap/namespace"},sidebar:"defaultSidebar",previous:{title:"SortedMultiMapSortedValue<K,V>",permalink:"/api/rimbu/multimap/SortedMultiMapSortedValue/interface"},next:{title:"VariantMultiMap.NonEmpty<K,V>",permalink:"/api/rimbu/multimap/VariantMultiMap/NonEmpty/interface"}},M={},y=[{value:"Interfaces",id:"interfaces",level:2}],b={toc:y};function h(t){var e,a=t,{components:r}=a,m=((t,e)=>{var a={};for(var n in t)u.call(t,n)&&e.indexOf(n)<0&&(a[n]=t[n]);if(null!=t&&l)for(var n of l(t))e.indexOf(n)<0&&o.call(t,n)&&(a[n]=t[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(e=c(c({},b),m),i(e,p({components:r,mdxType:"MDXLayout"}))),(0,n.kt)("h1",c({},{id:"namespace-variantmultimap"}),(0,n.kt)("inlineCode",{parentName:"h1"},"namespace VariantMultiMap")),(0,n.kt)("p",null,"A type-variant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multimap/VariantMultiMap/interface"}),"VariantMultiMap API documentation")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,n.kt)("a",c({parentName:"p"},{href:"/api/rimbu/multimap/VariantMultiMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantMultiMap<K,V>"))),(0,n.kt)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multimap/VariantMultiMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantMultiMap.NonEmpty<K,V>"))),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"A non-empty type-variant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,n.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,n.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/VariantMultiMap/interface"}),"VariantMultiMap API documentation"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("a",c({parentName:"td"},{href:"/api/rimbu/multimap/VariantMultiMap/Types/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"VariantMultiMap.Types"))),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}h.isMDXComponent=!0}}]);