"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[30057],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),f=l(r),m=o,d=f["".concat(c,".").concat(m)]||f[m]||s[m]||a;return r?n.createElement(d,p(p({ref:t},u),{},{components:r})):n.createElement(d,p({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=f;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,p[1]=i;for(var l=2;l<a;l++)p[l]=r[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},30503:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>y,contentTitle:()=>m,default:()=>O,frontMatter:()=>f,metadata:()=>d,toc:()=>b});var n=r(3905),o=Object.defineProperty,a=Object.defineProperties,p=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,u=(e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,s=(e,t)=>{for(var r in t||(t={}))c.call(t,r)&&u(e,r,t[r]);if(i)for(var r of i(t))l.call(t,r)&&u(e,r,t[r]);return e};const f={title:"Selector (namespace)",slug:"/rimbu/deep/Deep/Selector/namespace"},m="namespace Selector",d={unversionedId:"rimbu_deep/Deep/Selector/index",id:"rimbu_deep/Deep/Selector/index",title:"Selector (namespace)",description:"Type defining the allowed selectors on an object of type T. Selectors can be: - a path string into type T. - a function receiving a Protected version of type T, and returning an arbitrary value. - a tuple of Selectors for type T - an object where the property values are Selectors for type T.",source:"@site/api/rimbu_deep/Deep/Selector/index.mdx",sourceDirName:"rimbu_deep/Deep/Selector",slug:"/rimbu/deep/Deep/Selector/namespace",permalink:"/api/rimbu/deep/Deep/Selector/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Selector (namespace)",slug:"/rimbu/deep/Deep/Selector/namespace"},sidebar:"defaultSidebar",previous:{title:"Protected",permalink:"/api/rimbu/deep/Deep/Protected/type"},next:{title:"Result",permalink:"/api/rimbu/deep/Deep/Selector/Result/type"}},y={},b=[],v={toc:b};function O(e){var t,r=e,{components:o}=r,u=((e,t)=>{var r={};for(var n in e)c.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&l.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=s(s({},v),u),a(t,p({components:o,mdxType:"MDXLayout"}))),(0,n.kt)("h1",s({},{id:"namespace-selector"}),(0,n.kt)("inlineCode",{parentName:"h1"},"namespace Selector")),(0,n.kt)("p",null,"Type defining the allowed selectors on an object of type ",(0,n.kt)("inlineCode",{parentName:"p"},"T"),". Selectors can be: - a path string into type ",(0,n.kt)("inlineCode",{parentName:"p"},"T"),". - a function receiving a ",(0,n.kt)("inlineCode",{parentName:"p"},"Protected")," version of type ",(0,n.kt)("inlineCode",{parentName:"p"},"T"),", and returning an arbitrary value. - a tuple of ",(0,n.kt)("inlineCode",{parentName:"p"},"Selectors")," for type ",(0,n.kt)("inlineCode",{parentName:"p"},"T")," - an object where the property values are ",(0,n.kt)("inlineCode",{parentName:"p"},"Selectors")," for type ",(0,n.kt)("inlineCode",{parentName:"p"},"T"),"."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion type:")," ",(0,n.kt)("a",s({parentName:"p"},{href:"/api/rimbu/deep/Deep/Selector/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector<T>"))))}O.isMDXComponent=!0}}]);