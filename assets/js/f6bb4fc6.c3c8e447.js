"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[5189],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return h}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var d=n.createContext({}),p=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(r),h=a,m=u["".concat(d,".").concat(h)]||u[h]||c[h]||i;return r?n.createElement(m,o(o({ref:t},s),{},{components:r})):n.createElement(m,o({ref:t},s))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3664:function(e,t,r){r.d(t,{r:function(){return i}});var n=r(7294),a={previewwindow:"console",view:"split",editorsize:"60",codemirror:"1",moduleview:"1"};function i(e){var t=function(e){var t="",r="";for(var n in e)t+=""+r+n+"="+e[n],r="&";return""===t?"":"?"+t}(Object.assign({},a,{module:"/src/"+e.path})),r="https://codesandbox.io/embed/github/vitoke/rimbu-sandbox/tree/main"+t,i="https://codesandbox.io/s/github/vitoke/rimbu-sandbox/tree/main"+t;return n.createElement(n.Fragment,null,n.createElement("a",{target:"_blank",className:"button button--secondary",href:i,style:{marginBottom:10}},"Open file below in new window with full type-check"),n.createElement("iframe",{src:r,className:"codesandbox-iframe",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}},494:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return d},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return h}});var n=r(3117),a=r(102),i=(r(7294),r(3905)),o=r(3664),l=["components"],d={id:"edge-graph",slug:"./edge-graph",title:"Edge Graph"},p="EdgeGraph<N>",s={unversionedId:"collections/graph/edge-graph",id:"collections/graph/edge-graph",isDocsHomePage:!1,title:"Edge Graph",description:"An EdgeGraph is an undirected Graph where the edges have no values. This structure is useful for situations in which elements of the same type can have relations to each other. The relation is either there or not there. The relation is bidirectional, so A -> B also implies that B -> A.",source:"@site/docs/collections/graph/edge-graph.mdx",sourceDirName:"collections/graph",slug:"/collections/graph/edge-graph",permalink:"/docs/collections/graph/edge-graph",editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/collections/graph/edge-graph.mdx",tags:[],version:"current",frontMatter:{id:"edge-graph",slug:"./edge-graph",title:"Edge Graph"},sidebar:"sidebar",previous:{title:"Arrow Valued Graph",permalink:"/docs/collections/graph/arrow-valued-graph"},next:{title:"Edge Valued Graph",permalink:"/docs/collections/graph/edge-valued-graph"}},c=[{value:"Usage",id:"usage",children:[{value:"Creation",id:"creation",children:[],level:3},{value:"Query",id:"query",children:[],level:3},{value:"Motivation",id:"motivation",children:[],level:3},{value:"Builder",id:"builder",children:[],level:3}],level:2}],u={toc:c};function h(e){var t=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"edgegraphn"},(0,i.kt)("inlineCode",{parentName:"h1"},"EdgeGraph<N>")),(0,i.kt)("p",null,"An ",(0,i.kt)("inlineCode",{parentName:"p"},"EdgeGraph")," is an undirected ",(0,i.kt)("inlineCode",{parentName:"p"},"Graph")," where the edges have no values. This structure is useful for situations in which elements of the same type can have relations to each other. The relation is either there or not there. The relation is bidirectional, so ",(0,i.kt)("inlineCode",{parentName:"p"},"A -> B")," also implies that ",(0,i.kt)("inlineCode",{parentName:"p"},"B -> A"),"."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Like all ",(0,i.kt)("inlineCode",{parentName:"p"},"Graph")," implementations, these graphs can contain cycles and isolated nodes are allowed."))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following immutable ArrowGraph TypeScript types:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"EdgeGraph<N>")),(0,i.kt)("td",{parentName:"tr",align:null},"a generic undirected graph with nodes of type N")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"EdgeGraphHashed<N>")),(0,i.kt)("td",{parentName:"tr",align:null},"an undirected graph with hashed nodes of type N")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"EdgeGraphSorted<N>")),(0,i.kt)("td",{parentName:"tr",align:null},"an undirected graph with sorted nodes of type N")))),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"creation"},"Creation"),(0,i.kt)(o.r,{path:"graph/edge/non-valued/create.ts",mdxType:"SandBox"}),(0,i.kt)("h3",{id:"query"},"Query"),(0,i.kt)(o.r,{path:"graph/edge/non-valued/query.ts",mdxType:"SandBox"}),(0,i.kt)("h3",{id:"motivation"},"Motivation"),(0,i.kt)(o.r,{path:"graph/edge/non-valued/motivation.ts",mdxType:"SandBox"}),(0,i.kt)("h3",{id:"builder"},"Builder"),(0,i.kt)(o.r,{path:"graph/edge/non-valued/builder.ts",mdxType:"SandBox"}))}h.isMDXComponent=!0}}]);