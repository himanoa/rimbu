"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[64809],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=u(n),f=i,m=p["".concat(c,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(m,o(o({ref:t},s),{},{components:n})):r.createElement(m,o({ref:t},s))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},53403:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>h,default:()=>O,frontMatter:()=>m,metadata:()=>b,toc:()=>v});var r=n(3905),i=Object.defineProperty,a=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,s=(e,t,n)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,p=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&s(e,n,t[n]);if(l)for(var n of l(t))u.call(t,n)&&s(e,n,t[n]);return e},d=(e,t)=>a(e,o(t)),f=(e,t)=>{var n={};for(var r in e)c.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&u.call(e,r)&&(n[r]=e[r]);return n};const m={title:"Mutex",slug:"/rimbu/channel/Mutex/interface"},h="interface Mutex",b={unversionedId:"rimbu_channel/Mutex.interface",id:"rimbu_channel/Mutex.interface",title:"Mutex",description:"A Mutex is used to restrict access to a shared resource in a concurrent environment. The Mutex can be used to acquire a lock for the resource, preventing others using the Mutext from accessing the resource. When finished using the resource, the lock can be released, allowing other waiting processes to acquire a lock.",source:"@site/api/rimbu_channel/Mutex.interface.mdx",sourceDirName:"rimbu_channel",slug:"/rimbu/channel/Mutex/interface",permalink:"/api/rimbu/channel/Mutex/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Mutex",slug:"/rimbu/channel/Mutex/interface"},sidebar:"defaultSidebar",previous:{title:"Mutex.Constructors",permalink:"/api/rimbu/channel/Mutex/Constructors/interface"},next:{title:"RemoteChannel (namespace)",permalink:"/api/rimbu/channel/RemoteChannel/namespace"}},k={},v=[{value:"Methods",id:"methods",level:2},{value:"<code>acquire</code>",id:"acquire",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>canAcquire</code>",id:"canacquire",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>release</code>",id:"release",level:3},{value:"Definition",id:"definition-2",level:4}],y={toc:v},g="wrapper";function O(e){var t=e,{components:n}=t,i=f(t,["components"]);return(0,r.kt)(g,d(p(p({},y),i),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",p({},{id:"interface-mutex"}),(0,r.kt)("inlineCode",{parentName:"h1"},"interface Mutex")),(0,r.kt)("p",null,"A Mutex is used to restrict access to a shared resource in a concurrent environment. The Mutex can be used to acquire a lock for the resource, preventing others using the Mutext from accessing the resource. When finished using the resource, the lock can be released, allowing other waiting processes to acquire a lock."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Companion namespace:")," ",(0,r.kt)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Mutex/namespace"}),"Mutex")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Implemented by:")," ",(0,r.kt)("a",p({parentName:"p"},{href:"/api/rimbu/channel/Semaphore/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Semaphore"))),(0,r.kt)("h2",p({},{id:"methods"}),"Methods"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",p({},{id:"acquire"}),(0,r.kt)("inlineCode",{parentName:"h3"},"acquire")),(0,r.kt)("p",null,"Acquire a lock. Blocks if the resource is already locked. Resolves when the resource is available.")),(0,r.kt)("h4",p({},{id:"definition"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"acquire(): Promise<void>;")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",p({},{id:"canacquire"}),(0,r.kt)("inlineCode",{parentName:"h3"},"canAcquire")),(0,r.kt)("p",null,"Returns true if the resource can be acquired immediately, false otherwise.")),(0,r.kt)("h4",p({},{id:"definition-1"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"canAcquire(): boolean;")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",p({},{id:"release"}),(0,r.kt)("inlineCode",{parentName:"h3"},"release")),(0,r.kt)("p",null,"Release a lock after it is acquired. Allows other functions to obtain a lock.")),(0,r.kt)("h4",p({},{id:"definition-2"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"release(): void;")))))}O.isMDXComponent=!0}}]);