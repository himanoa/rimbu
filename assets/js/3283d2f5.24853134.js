"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[82317],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},h=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),m=s(a),u=r,k=m["".concat(p,".").concat(u)]||m[u]||d[u]||i;return a?n.createElement(k,l(l({ref:t},h),{},{components:a})):n.createElement(k,l({ref:t},h))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},20812:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>c,default:()=>H,frontMatter:()=>k,metadata:()=>N,toc:()=>b});var n=a(3905),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,s=Object.prototype.propertyIsEnumerable,h=(e,t,a)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,m=(e,t)=>{for(var a in t||(t={}))p.call(t,a)&&h(e,a,t[a]);if(o)for(var a of o(t))s.call(t,a)&&h(e,a,t[a]);return e},d=(e,t)=>i(e,l(t)),u=(e,t)=>{var a={};for(var n in e)p.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&o)for(var n of o(e))t.indexOf(n)<0&&s.call(e,n)&&(a[n]=e[n]);return a};const k={title:"Hasher (namespace)",slug:"/rimbu/core/Hasher/namespace"},c="namespace Hasher",N={unversionedId:"rimbu_core/Hasher/index",id:"rimbu_core/Hasher/index",title:"Hasher (namespace)",description:"Interface used to hash objects for hashed collections.",source:"@site/api/rimbu_core/Hasher/index.mdx",sourceDirName:"rimbu_core/Hasher",slug:"/rimbu/core/Hasher/namespace",permalink:"/api/rimbu/core/Hasher/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Hasher (namespace)",slug:"/rimbu/core/Hasher/namespace"},sidebar:"defaultSidebar",previous:{title:"HashMultiSet<T>",permalink:"/api/rimbu/core/HashMultiSet/interface"},next:{title:"Hasher<UK>",permalink:"/api/rimbu/core/Hasher/interface"}},f={},b=[{value:"Functions",id:"functions",level:2},{value:"<code>anyDeepHasher</code>",id:"anydeephasher",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>anyFlatHasher</code>",id:"anyflathasher",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>anyJsonStringHasher</code>",id:"anyjsonstringhasher",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>anyShallowHasher</code>",id:"anyshallowhasher",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>anyToStringHasher</code>",id:"anytostringhasher",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>arrayHasher</code>",id:"arrayhasher",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>bigintHasher</code>",id:"biginthasher",level:3},{value:"Definition",id:"definition-6",level:4},{value:"<code>booleanHasher</code>",id:"booleanhasher",level:3},{value:"Definition",id:"definition-7",level:4},{value:"<code>createValueOfHasher</code>",id:"createvalueofhasher",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>dateHasher</code>",id:"datehasher",level:3},{value:"Definition",id:"definition-9",level:4},{value:"<code>defaultHasher</code>",id:"defaulthasher",level:3},{value:"Definition",id:"definition-10",level:4},{value:"<code>numberHasher</code>",id:"numberhasher",level:3},{value:"Definition",id:"definition-11",level:4},{value:"<code>objectDeepHasher</code>",id:"objectdeephasher",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"<code>objectHasher</code>",id:"objecthasher",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>objectShallowHasher</code>",id:"objectshallowhasher",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"<code>streamSourceHasher</code>",id:"streamsourcehasher",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>stringCaseInsensitiveHasher</code>",id:"stringcaseinsensitivehasher",level:3},{value:"Definition",id:"definition-16",level:4},{value:"<code>stringHasher</code>",id:"stringhasher",level:3},{value:"Definition",id:"definition-17",level:4},{value:"<code>tupleSymmetric</code>",id:"tuplesymmetric",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Type parameters",id:"type-parameters-6",level:5},{value:"Parameters",id:"parameters-5",level:4}],y={toc:b},g="wrapper";function H(e){var t=e,{components:a}=t,r=u(t,["components"]);return(0,n.kt)(g,d(m(m({},y),r),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",m({},{id:"namespace-hasher"}),(0,n.kt)("inlineCode",{parentName:"h1"},"namespace Hasher")),(0,n.kt)("p",null,"Interface used to hash objects for hashed collections."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher<UK>"))),(0,n.kt)("h2",m({},{id:"functions"}),"Functions"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"anydeephasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"anyDeepHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes any value, and traverses into an object or array to hash its elements.")),(0,n.kt)("h4",m({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function anyDeepHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<any>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyDeepHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\nconsole.log(h.hash([{ a: 1, b: 2 }]) === h.hash([{ b: 2, a: 1 }]))\n// => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"anyflathasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"anyFlatHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes any value, but never traverses into an object or array to hash its elements. In those cases it will use toString.")),(0,n.kt)("h4",m({},{id:"definition-1"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function anyFlatHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<any>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyFlatHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"anyjsonstringhasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"anyJsonStringHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes any value by hashing the string resulting from applying JSON.stringify to the value.")),(0,n.kt)("h4",m({},{id:"definition-2"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function anyJsonStringHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<any>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyJsonStringHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"anyshallowhasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"anyShallowHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes any value, but only traverses into an object or array to hash its elements one level deep. After one level, it will use toString.")),(0,n.kt)("h4",m({},{id:"definition-3"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function anyShallowHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<any>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyShallowHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\nconsole.log(h.hash([{ a: 1, b: 2 }]) === h.hash([{ b: 2, a: 1 }]))\n// => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"anytostringhasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"anyToStringHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes the string representation of any value")),(0,n.kt)("h4",m({},{id:"definition-4"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function anyToStringHasher(maxStepBits?: number): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<any>;"))),(0,n.kt)("h4",m({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"maxStepBits")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"number")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the maximum amount of samples to take from the string")))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.anyToStringHasher()\nh.hash([1, 3, 'a'])\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"arrayhasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"arrayHasher")),(0,n.kt)("p",null,"Returns a Hasher that hashes arrays of elements by sampling the array and using the given ",(0,n.kt)("inlineCode",{parentName:"p"},"itemHasher")," to hash the sampled elements.")),(0,n.kt)("h4",m({},{id:"definition-5"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function arrayHasher<T = any>(options?: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"itemHasher?: "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"maxStepBits?: number;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly T[]>;"))),(0,n.kt)("h5",m({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the array element type")))),(0,n.kt)("h4",m({},{id:"parameters-1"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"options")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"itemHasher?: "),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"td"},"<T>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"maxStepBits?: number;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"(optional) an object containing the following items:",(0,n.kt)("br",null)," - itemHasher - (optional) a Hasher instance used to hash elements in the array",(0,n.kt)("br",null)," - maxStepBits - (optional) the amount of bits to determine the maximum amount of array elements to process")))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.arrayHasher()\nconsole.log(h.hash([1, 2, 3] === h.hash([1, 3, 2])))\n// => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"biginthasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"bigintHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes bigints.")),(0,n.kt)("h4",m({},{id:"definition-6"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function bigintHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<bigint>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.bigintHasher()\nconsole.log(h.hash(BigInt(5)) === h.hash(BigInt(10)))\n// => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"booleanhasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"booleanHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes booleans.")),(0,n.kt)("h4",m({},{id:"definition-7"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function booleanHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<boolean>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.booleanHasher()\nconsole.log(h.hash(true) === h.hash(false))\n// => false\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"createvalueofhasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"createValueOfHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes the ",(0,n.kt)("inlineCode",{parentName:"p"},".valueOf")," value of the given object using the given ",(0,n.kt)("inlineCode",{parentName:"p"},"valueHasher")," for instances of given ",(0,n.kt)("inlineCode",{parentName:"p"},"cls")," class.")),(0,n.kt)("h4",m({},{id:"definition-8"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function createValueOfHasher<T extends {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"valueOf(): V;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}, V>(cls: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"new (): T;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}, valueHasher?: "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<V>): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.kt)("h5",m({},{id:"type-parameters-1"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the input object type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the .valueOf property type")))),(0,n.kt)("h4",m({},{id:"parameters-2"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"cls")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"new (): T;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the class containing the contructur to check for validity of a given object")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"valueHasher")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"td"},"<V>")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the Hasher instance to use for the ",(0,n.kt)("inlineCode",{parentName:"td"},".valueOf")," values")))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.createValueOfHasher(Date)\nconsole.log(h.isValid(new Boolean(true)))\n// => false\nconst d1 = new Date()\nconst d2 = new Date(d1)\nconsole.log(h.hash(d1) === h.hash(d2))\n// => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"datehasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"dateHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes Dates.")),(0,n.kt)("h4",m({},{id:"definition-9"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function dateHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<Date>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.dateHasher()\nconst d1 = new Date()\nconst d2 = new Date(d1)\nconsole.log(h.hash(d1) === h.hash(d2))\n// => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"defaulthasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"defaultHasher")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-10"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function defaultHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<any>;")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"numberhasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"numberHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes numbers, including 'special' values like NaN and infinities.")),(0,n.kt)("h4",m({},{id:"definition-11"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function numberHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<number>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.numberHasher()\nconsole.log(h.hash(Number.POSITIVE_INFINITY) === h.hash(Number.NEGATIVE_INFINITY))\n// => false\nconsole.log(h.hash(Number.NaN) === h.hash(Number.NaN))\n// => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"objectdeephasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"objectDeepHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes objects of key type K and value type V. If a value if an object or array, it will recursively hash its values.  ")),(0,n.kt)("h4",m({},{id:"definition-12"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function objectDeepHasher<K extends string "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"},"number"),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"},"symbol, V = any>():"),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<Record<K, V>>;"))),(0,n.kt)("h5",m({},{id:"type-parameters-2"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the key type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,n.kt)("admonition",m({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"be careful with circular structures, they can cause an infinite loop")),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.objectDeepHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"objecthasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"objectHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes objects of key type K and value type V.")),(0,n.kt)("h4",m({},{id:"definition-13"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function objectHasher<K extends string "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"},"number"),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," symbol, V = any>(options?: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"keyHasher: "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<K>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"valueHasher: "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<V>;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<Record<K, V>>;"))),(0,n.kt)("h5",m({},{id:"type-parameters-3"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the key type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,n.kt)("h4",m({},{id:"parameters-3"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"options")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"keyHasher: "),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"td"},"<K>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"valueHasher: "),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"td"},"<V>;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"(optional) an object containing:",(0,n.kt)("br",null)," - keyHasher - (optional) a Hasher instance that is used to hash object keys",(0,n.kt)("br",null)," - valueHasher - (optional) a Hasher instance that is used to hash object values")))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.objectHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"objectshallowhasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"objectShallowHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes objects of key type K and value type V. If a value if an object or array, it will convert those values to a string.")),(0,n.kt)("h4",m({},{id:"definition-14"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function objectShallowHasher<K extends string "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"},"number"),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"},"symbol, V = any>():"),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<Record<K, V>>;"))),(0,n.kt)("h5",m({},{id:"type-parameters-4"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the key type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.objectShallowHasher()\nconsole.log(h.hash({ a: 1, b: 2 }) === h.hash({ b: 2, a: 1 }))\n// => true\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"streamsourcehasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"streamSourceHasher")),(0,n.kt)("p",null,"Returns a Hasher instance that hashes any StreamSource limited to a certain amount of elements to prevent haning on infinite streams.")),(0,n.kt)("h4",m({},{id:"definition-15"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function streamSourceHasher<T = any>(options?: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"itemHasher?: "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"maxStepBits?: number;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<"),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/stream/StreamSource/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"StreamSource")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>>;"))),(0,n.kt)("h5",m({},{id:"type-parameters-5"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the StreamSource element type")))),(0,n.kt)("h4",m({},{id:"parameters-4"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"options")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"itemHasher?: "),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"td"},"<T>;"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"maxStepBits?: number;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"(optional) an object containing the following items:",(0,n.kt)("br",null)," - itemHasher - (optional) a Hasher instance used to hash elements in the array",(0,n.kt)("br",null)," - maxStepBits - (optional) the amount of bits to determine the maximum amount of array elements to process")))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.streamSourceHasher()\nh.hash(Stream.random())\n// infinite stream but will not hang due to the max step limit\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"stringcaseinsensitivehasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"stringCaseInsensitiveHasher")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-16"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function stringCaseInsensitiveHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<string>;")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"stringhasher"}),(0,n.kt)("inlineCode",{parentName:"h3"},"stringHasher")),(0,n.kt)("p",null,"Returns a Hasher instance for string values.")),(0,n.kt)("h4",m({},{id:"definition-17"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function stringHasher(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<string>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.stringHasher()\nh.hash('abc')\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"tuplesymmetric"}),(0,n.kt)("inlineCode",{parentName:"h3"},"tupleSymmetric")),(0,n.kt)("p",null,"Returns a Hasher that will return equal hash values for values in a tuple regardless of their order, and uses the given ",(0,n.kt)("inlineCode",{parentName:"p"},"hasher")," function to hash the tuple elements.")),(0,n.kt)("h4",m({},{id:"definition-18"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function tupleSymmetric<T>(hasher?: "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"p"},"<readonly [T, T]>;"))),(0,n.kt)("h5",m({},{id:"type-parameters-6"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",m({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",m({},{id:"parameters-5"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"hasher")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/Hasher/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Hasher")),(0,n.kt)("inlineCode",{parentName:"td"},"<T>")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the Hasher instance to use for tuple elements")))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const h = Hasher.tupleSymmetric()\nconsole.log(h.hash(['abc', 'def']) === h.hash(['def', 'abc']))\n")))))}H.isMDXComponent=!0}}]);