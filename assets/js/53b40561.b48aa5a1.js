"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[8832],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(n),y=a,f=u["".concat(c,".").concat(y)]||u[y]||m[y]||o;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=y;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},41958:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>v,contentTitle:()=>b,default:()=>S,frontMatter:()=>f,metadata:()=>d,toc:()=>h});var r=n(3905),a=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,s=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&s(e,n,t[n]);if(p)for(var n of p(t))l.call(t,n)&&s(e,n,t[n]);return e},m=(e,t)=>o(e,i(t)),y=(e,t)=>{var n={};for(var r in e)c.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&p)for(var r of p(e))t.indexOf(r)<0&&l.call(e,r)&&(n[r]=e[r]);return n};const f={title:"VariantSet.NonEmpty<T>",slug:"/rimbu/collection-types/set/VariantSet/NonEmpty/interface"},b="interface VariantSet.NonEmpty<T>",d={unversionedId:"rimbu_collection-types/set/VariantSet/NonEmpty.interface",id:"rimbu_collection-types/set/VariantSet/NonEmpty.interface",title:"VariantSet.NonEmpty<T>",description:"A non-empty type-variant immutable Set of value type T. In the Set, there are no duplicate values. See the Set documentation and the VariantSet API documentation",source:"@site/api/rimbu_collection-types/set/VariantSet/NonEmpty.interface.mdx",sourceDirName:"rimbu_collection-types/set/VariantSet",slug:"/rimbu/collection-types/set/VariantSet/NonEmpty/interface",permalink:"/api/rimbu/collection-types/set/VariantSet/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantSet.NonEmpty<T>",slug:"/rimbu/collection-types/set/VariantSet/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"VariantSet (namespace)",permalink:"/api/rimbu/collection-types/set/VariantSet/namespace"},next:{title:"VariantSet.Types",permalink:"/api/rimbu/collection-types/set/VariantSet/Types/interface"}},v={},h=[{value:"Type parameters",id:"type-parameters",level:2}],O={toc:h},g="wrapper";function S(e){var t=e,{components:n}=t,a=y(t,["components"]);return(0,r.kt)(g,m(u(u({},O),a),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",u({},{id:"interface-variantsetnonemptyt"}),(0,r.kt)("inlineCode",{parentName:"h1"},"interface VariantSet.NonEmpty<T>")),(0,r.kt)("p",null,"A non-empty type-variant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"p"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"p"},{href:"https://rimbu.org/api/rimbu/collection-types/set/VariantSet/interface"}),"VariantSet API documentation")),(0,r.kt)("h2",u({},{id:"type-parameters"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"the value type")))),(0,r.kt)("admonition",u({},{title:"note",type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"Type-variance means that both the value type can be widened in a type-safe way without casting.  @note As a consequence of being variant, the type does not contain methods that (can) add new elements to the collection.")))}S.isMDXComponent=!0}}]);