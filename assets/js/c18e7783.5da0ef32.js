"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[39209],{3905:(t,e,a)=>{a.d(e,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function i(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function p(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var o=n.createContext({}),m=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):i(i({},e),t)),a},d=function(t){var e=m(t.components);return n.createElement(o.Provider,{value:e},t.children)},u="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},k=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,o=t.parentName,d=p(t,["components","mdxType","originalType","parentName"]),u=m(a),k=r,c=u["".concat(o,".").concat(k)]||u[k]||s[k]||l;return a?n.createElement(c,i(i({ref:e},d),{},{components:a})):n.createElement(c,i({ref:e},d))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,i=new Array(l);i[0]=k;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p[u]="string"==typeof t?t:r,i[1]=p;for(var m=2;m<l;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},17156:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>b,contentTitle:()=>y,default:()=>C,frontMatter:()=>c,metadata:()=>N,toc:()=>f});var n=a(3905),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,d=(t,e,a)=>e in t?r(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a,u=(t,e)=>{for(var a in e||(e={}))o.call(e,a)&&d(t,a,e[a]);if(p)for(var a of p(e))m.call(e,a)&&d(t,a,e[a]);return t},s=(t,e)=>l(t,i(e)),k=(t,e)=>{var a={};for(var n in t)o.call(t,n)&&e.indexOf(n)<0&&(a[n]=t[n]);if(null!=t&&p)for(var n of p(t))e.indexOf(n)<0&&m.call(t,n)&&(a[n]=t[n]);return a};const c={title:"Spy (namespace)",slug:"/rimbu/spy/Spy/namespace"},y="namespace Spy",N={unversionedId:"rimbu_spy/Spy/index",id:"rimbu_spy/Spy/index",title:"Spy (namespace)",description:"Contains functions that can be used to Spy, Stub, and partially Mock functions, objects and classes.",source:"@site/api/rimbu_spy/Spy/index.mdx",sourceDirName:"rimbu_spy/Spy",slug:"/rimbu/spy/Spy/namespace",permalink:"/api/rimbu/spy/Spy/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Spy (namespace)",slug:"/rimbu/spy/Spy/namespace"},sidebar:"defaultSidebar",previous:{title:"PromiseValue",permalink:"/api/rimbu/spy/PromiseValue/type"},next:{title:"Cls",permalink:"/api/rimbu/spy/Spy/Cls/type"}},b={},f=[{value:"Interfaces",id:"interfaces",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>cls</code>",id:"cls",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>fn</code>",id:"fn",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>obj</code>",id:"obj",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"Constants",id:"constants",level:2}],h={toc:f},g="wrapper";function C(t){var e=t,{components:a}=e,r=k(e,["components"]);return(0,n.kt)(g,s(u(u({},h),r),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",u({},{id:"namespace-spy"}),(0,n.kt)("inlineCode",{parentName:"h1"},"namespace Spy")),(0,n.kt)("p",null,"Contains functions that can be used to Spy, Stub, and partially Mock functions, objects and classes."),(0,n.kt)("h2",u({},{id:"interfaces"}),"Interfaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/spy/Spy/ClsMeta/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.ClsMeta<C,A>"))),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"The metadata object type for a spied class.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/spy/Spy/ClsObjMeta/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.ClsObjMeta<T,A>"))),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/spy/Spy/Fn/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.Fn<F>"))),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"The spied function type containing extra information about the function calls.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/spy/Spy/FnMeta/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.FnMeta<F>"))),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"The extra information added to spied functions.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/spy/Spy/ObjMeta/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.ObjMeta<T>"))),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"The additional information available for spied objects.")))),(0,n.kt)("h2",u({},{id:"functions"}),"Functions"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",u({},{id:"cls"}),(0,n.kt)("inlineCode",{parentName:"h3"},"cls")),(0,n.kt)("p",null,"Returns a tuple containing a spied class and an object containing extra information about the created class instances.")),(0,n.kt)("h4",u({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function cls<I, A extends any[] = I extends "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/spy/Construct/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Construct")),(0,n.kt)("inlineCode",{parentName:"p"},"? ConstructorParameters<I> : []>(originalClass?:"),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/spy/Construct/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Construct")),(0,n.kt)("inlineCode",{parentName:"p"},"<A, I>, originalStubs?: Partial<I>, originalConstructorStub?: "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/spy/Func/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Func")),(0,n.kt)("inlineCode",{parentName:"p"},"<A, I>): "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/spy/Spy/Cls/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Cls")),(0,n.kt)("inlineCode",{parentName:"p"},"<I, A>;"))),(0,n.kt)("h5",u({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),"I"),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"the class instance type")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),"A"),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"the constructor parameter types")))),(0,n.kt)("h4",u({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"originalClass")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/spy/Construct/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Construct")),(0,n.kt)("inlineCode",{parentName:"td"},"<A, I>")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"(optional) the class to spy on")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"originalStubs")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"Partial<I>")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"(optional) the default stubs to use for each created instance")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"originalConstructorStub")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/spy/Func/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Func")),(0,n.kt)("inlineCode",{parentName:"td"},"<A, I>")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"(optional) a function to call instead of the class constructor"))))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",u({},{id:"fn"}),(0,n.kt)("inlineCode",{parentName:"h3"},"fn")),(0,n.kt)("p",null,"Returns a spied function instance that tracks the function calls and optionally uses some original or stub implementation.")),(0,n.kt)("h4",u({},{id:"definition-1"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function fn<F extends "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/spy/Func/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Func")),(0,n.kt)("inlineCode",{parentName:"p"},">(originalFn?: F, originalStub?: "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,n.kt)("inlineCode",{parentName:"p"},"<F>, onCall?: (args: Parameters<F>) => void): "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/spy/Spy/Fn/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.Fn")),(0,n.kt)("inlineCode",{parentName:"p"},"<F>;"))),(0,n.kt)("h5",u({},{id:"type-parameters-1"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),"F"),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"the type of function to spy on")))),(0,n.kt)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"originalFn")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"F")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"(optional) the original function to spy on, if stubbed still useful to supply to get the correct types")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"originalStub")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,n.kt)("inlineCode",{parentName:"td"},"<F>")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"(optional) the default stub implementation to use when the function is called")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"onCall")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(args: Parameters<F>) => void")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"(optional) a callback function that receives the parameters used on each function call")))),(0,n.kt)("admonition",u({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"function f(x: number, y: number) {\nreturn x + y;\n}\nconst spy = Spy.fn(f, (x) => -x);\nspy(4, 5);\n// => -4\nspy.nrCalls;\n// => 1\nspy.calls;\n// => [[4, 5]]\n")))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",u({},{id:"obj"}),(0,n.kt)("inlineCode",{parentName:"h3"},"obj")),(0,n.kt)("p",null,"Returns a tuple containing the spied object, and the metadata object giving more information about the stubbed object.")),(0,n.kt)("h4",u({},{id:"definition-2"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"function obj<T extends {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"readonly [key: string "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"},"number"),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," symbol]: any;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}>(originalObj?: T, stubs?: "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/spy/Spy/ObjStub/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.ObjStub")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>): "),(0,n.kt)("a",u({parentName:"p"},{href:"/api/rimbu/spy/Spy/Obj/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.Obj")),(0,n.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,n.kt)("h5",u({},{id:"type-parameters-2"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"the object type to spy on")))),(0,n.kt)("h4",u({},{id:"parameters-2"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"originalObj")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"T")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"(optional) the original object to spy on")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"stubs")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),(0,n.kt)("a",u({parentName:"td"},{href:"/api/rimbu/spy/Spy/ObjStub/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Spy.ObjStub")),(0,n.kt)("inlineCode",{parentName:"td"},"<T>")),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"(optional) a partial implementation of the object type containing default stubs"))))),(0,n.kt)("h2",u({},{id:"constants"}),"Constants"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",u({parentName:"tr"},{align:null}),"META"),(0,n.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")))))}C.isMDXComponent=!0}}]);