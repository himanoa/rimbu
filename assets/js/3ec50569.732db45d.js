"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[5286],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(n),m=r,f=c["".concat(p,".").concat(m)]||c[m]||s[m]||i;return n?a.createElement(f,l(l({ref:t},d),{},{components:n})):a.createElement(f,l({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5467:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>k,contentTitle:()=>m,default:()=>h,frontMatter:()=>c,metadata:()=>f,toc:()=>y});var a=n(3905),r=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,s=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&d(e,n,t[n]);if(o)for(var n of o(t))u.call(t,n)&&d(e,n,t[n]);return e};const c={title:"Spy.FnMeta<F>",slug:"/rimbu/spy/Spy/FnMeta/interface"},m="interface Spy.FnMeta<F>",f={unversionedId:"rimbu_spy/Spy/FnMeta.interface",id:"rimbu_spy/Spy/FnMeta.interface",title:"Spy.FnMeta<F>",description:"The extra information added to spied functions.",source:"@site/api/rimbu_spy/Spy/FnMeta.interface.mdx",sourceDirName:"rimbu_spy/Spy",slug:"/rimbu/spy/Spy/FnMeta/interface",permalink:"/api/rimbu/spy/Spy/FnMeta/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Spy.FnMeta<F>",slug:"/rimbu/spy/Spy/FnMeta/interface"},sidebar:"defaultSidebar",previous:{title:"Spy.Fn<F>",permalink:"/api/rimbu/spy/Spy/Fn/interface"},next:{title:"FnStub",permalink:"/api/rimbu/spy/Spy/FnStub/type"}},k={},y=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>calls</code>",id:"calls",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>isCalled</code>",id:"iscalled",level:3},{value:"Definition",id:"definition-1",level:4},{value:"<code>nrCalls</code>",id:"nrcalls",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>clearCalls</code>",id:"clearcalls",level:3},{value:"Definition",id:"definition-3",level:4},{value:"<code>resetStub</code>",id:"resetstub",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>setStub</code>",id:"setstub",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters",level:4}],b={toc:y};function h(e){var t,n=e,{components:r}=n,d=((e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&o)for(var a of o(e))t.indexOf(a)<0&&u.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=s(s({},b),d),i(t,l({components:r,mdxType:"MDXLayout"}))),(0,a.kt)("h1",s({},{id:"interface-spyfnmetaf"}),(0,a.kt)("inlineCode",{parentName:"h1"},"interface Spy.FnMeta<F>")),(0,a.kt)("p",null,"The extra information added to spied functions."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Implemented by:")," ",(0,a.kt)("a",s({parentName:"p"},{href:"/api/rimbu/spy/Spy/Fn/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Spy.Fn<F>"))),(0,a.kt)("h2",s({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Constraints"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),"F"),(0,a.kt)("td",s({parentName:"tr"},{align:null}),(0,a.kt)("a",s({parentName:"td"},{href:"/api/rimbu/spy/Func/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Func"))),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"the spied function type")))),(0,a.kt)("h2",s({},{id:"properties"}),"Properties"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",s({},{id:"calls"}),(0,a.kt)("inlineCode",{parentName:"h3"},"calls")),(0,a.kt)("p",null,"Returns an array containing, for each received spy call, the given parameters.")),(0,a.kt)("h4",s({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get calls(): Parameters<F>[];")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",s({},{id:"iscalled"}),(0,a.kt)("inlineCode",{parentName:"h3"},"isCalled")),(0,a.kt)("p",null,"Returns true if the spy function has received at least one call.")),(0,a.kt)("h4",s({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get isCalled(): boolean;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",s({},{id:"nrcalls"}),(0,a.kt)("inlineCode",{parentName:"h3"},"nrCalls")),(0,a.kt)("p",null,"Returns the number of calls this spy function has received.")),(0,a.kt)("h4",s({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"get nrCalls(): number;")))),(0,a.kt)("h2",s({},{id:"methods"}),"Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",s({},{id:"clearcalls"}),(0,a.kt)("inlineCode",{parentName:"h3"},"clearCalls")),(0,a.kt)("p",null,"Clears the spy functions' ",(0,a.kt)("inlineCode",{parentName:"p"},"calls")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"nrCalls")," history.")),(0,a.kt)("h4",s({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"clearCalls(): void;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",s({},{id:"resetstub"}),(0,a.kt)("inlineCode",{parentName:"h3"},"resetStub")),(0,a.kt)("p",null,"Resets the implementation used for the next spy function call to the original one used at construction time.")),(0,a.kt)("h4",s({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"resetStub(): void;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",s({},{id:"setstub"}),(0,a.kt)("inlineCode",{parentName:"h3"},"setStub")),(0,a.kt)("p",null,"Sets a stub implementation for this spy function, which will be used instead of the current function implementation upon the next received call.")),(0,a.kt)("h4",s({},{id:"definition-5"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"setStub(stub: "),(0,a.kt)("a",s({parentName:"p"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,a.kt)("inlineCode",{parentName:"p"},"<F> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"p"}," undefined): void;"))),(0,a.kt)("h4",s({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",s({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",s({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"stub")),(0,a.kt)("td",s({parentName:"tr"},{align:null}),(0,a.kt)("a",s({parentName:"td"},{href:"/api/rimbu/spy/Spy/FnStub/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Spy.FnStub")),(0,a.kt)("inlineCode",{parentName:"td"},"<F> "),(0,a.kt)("code",null,"|"),(0,a.kt)("inlineCode",{parentName:"td"}," undefined")),(0,a.kt)("td",s({parentName:"tr"},{align:null}),"the stub implementation to use"))))))}h.isMDXComponent=!0}}]);