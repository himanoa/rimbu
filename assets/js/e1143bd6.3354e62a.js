(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[3680],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return s},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(a),d=r,h=c["".concat(p,".").concat(d)]||c[d]||m[d]||i;return a?n.createElement(h,l(l({ref:t},s),{},{components:a})):n.createElement(h,l({ref:t},s))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1592:function(e,t,a){"use strict";a.d(t,{G:function(){return i}});var n=a(7294);function r(e){return e.replace(/</g,"%3C").replace(/>/g,"%3E")}function i(e){var t=r("https://g.gravizo.com/svg?\n  @startuml;\n  skinparam monochrome true;\n  skinparam backgroundColor none;\n  skinparam classBackgroundColor darkslategrey;\n  skinparam classBorderColor gray;\n  skinparam classFontColor lightgray;\n  skinparam classStereotypeFontColor darkgray;\n  skinparam arrowColor lightgray;\n  skinparam linetype ortho;\n  "+e.contents+"\n  @enduml;");return n.createElement("img",{src:t,className:"diagram"})}},3664:function(e,t,a){"use strict";a.d(t,{r:function(){return i}});var n=a(7294),r={previewwindow:"console",view:"split",editorsize:"60",codemirror:"1",moduleview:"1"};function i(e){var t=function(e){var t="",a="";for(var n in e)t+=""+a+n+"="+e[n],a="&";return""===t?"":"?"+t}(Object.assign({},r,{module:"/src/"+e.path})),a="https://codesandbox.io/embed/github/vitoke/rimbu-sandbox/tree/main"+t,i="https://codesandbox.io/s/github/vitoke/rimbu-sandbox/tree/main"+t;return n.createElement(n.Fragment,null,n.createElement("a",{target:"_blank",className:"button button--secondary",href:i,style:{marginBottom:10}},"Open file below in new window with full type-check"),n.createElement("iframe",{src:a,className:"codesandbox-iframe",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}},9285:function(e,t,a){"use strict";a.r(t),a.d(t,{contentTitle:function(){return s},default:function(){return h},frontMatter:function(){return u},metadata:function(){return m},toc:function(){return c}});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),l=a(1592),o=a(3664),p=["components"],u={id:"multimap",slug:"./multimap",title:"MultiMap"},s="MultiMap",m={unversionedId:"collections/multimap",id:"collections/multimap",isDocsHomePage:!1,title:"MultiMap",description:"A Rimbu MultiMap is a Map in which each key has one or more values. For each key, it's associated values are unique, that is, the values for each key are kept in a Set.",source:"@site/docs/collections/multimap.mdx",sourceDirName:"collections",slug:"/collections/multimap",permalink:"/docs/collections/multimap",editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/collections/multimap.mdx",tags:[],version:"current",frontMatter:{id:"multimap",slug:"./multimap",title:"MultiMap"},sidebar:"sidebar",previous:{title:"Map",permalink:"/docs/collections/map"},next:{title:"MultiSet",permalink:"/docs/collections/multiset"}},c=[{value:"When to use",id:"when-to-use",children:[]},{value:"Exports",id:"exports",children:[]},{value:"Inheritance",id:"inheritance",children:[]},{value:"Usage",id:"usage",children:[{value:"Creation",id:"creation",children:[]},{value:"Query",id:"query",children:[]},{value:"Builder",id:"builder",children:[]}]}],d={toc:c};function h(e){var t=e.components,a=(0,r.Z)(e,p);return(0,i.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"multimap"},"MultiMap"),(0,i.kt)("p",null,"A Rimbu MultiMap is a Map in which each key has one or more values. For each key, it's associated values are unique, that is, the values for each key are kept in a ",(0,i.kt)("inlineCode",{parentName:"p"},"Set"),"."),(0,i.kt)("h2",{id:"when-to-use"},"When to use"),(0,i.kt)("p",null,"A MultiMap is useful when there is a one to many relation between two types of entities. For example, one planet can have many moons, so if we have a MultiMap from Planet to Moon, we can easily find all the moons that belong to a particular planet. However, if we also easily want to know to which planet a moon belongs, it would be better to use a ",(0,i.kt)("a",{parentName:"p",href:"bimultimap/"},(0,i.kt)("inlineCode",{parentName:"a"},"BiMultiMap"))),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The predefined immutable MultiMap implementations do not maintain the insertion order of the values per key. However, it is possible to create a custom context with an ",(0,i.kt)("inlineCode",{parentName:"p"},"OrderedMap")," implementation to achieve this behavior."))),(0,i.kt)("h2",{id:"exports"},"Exports"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,i.kt)("em",{parentName:"p"},"abstract")," MultiMap TypeScript types:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"VariantMultiMap<K, V>")),(0,i.kt)("td",{parentName:"tr",align:null},"a type-variant multimap between values of type K and values of type V")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"MultiMap<K, V>")),(0,i.kt)("td",{parentName:"tr",align:null},"a generic multimap between values of type K and values of type V")))),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,i.kt)("em",{parentName:"p"},"concrete")," MultiMap types:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"HashMultiMapHashValue<K, V>")),(0,i.kt)("td",{parentName:"tr",align:null},"a multimap between hashed values of type K and hashed values of type V")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"HashMultiMapSortedValue<K, V>")),(0,i.kt)("td",{parentName:"tr",align:null},"a multimap between hashed values of type K and sorted values of type V")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"SortedMultiMapHashValue<K, V>")),(0,i.kt)("td",{parentName:"tr",align:null},"a multimap between sorted values of type K and hashed values of type V")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"SortedMultiMapSortedValue<K, V>")),(0,i.kt)("td",{parentName:"tr",align:null},"a multimap between sorted values of type K and sorted values of type V")))),(0,i.kt)("h2",{id:"inheritance"},"Inheritance"),(0,i.kt)(l.G,{contents:"\ninterface Streamable<[K, V]>;\n\ninterface VariantMultiMap<K, V>;\nabstract MultiMap<K, V>;\nclass HashMultiMapHashValue<k, V>;\nclass HashMultiMapSortedValue<k, V>;\nclass SortedMultiMapHashValue<k, V>;\nclass SortedMultiMapSortedValue<k, V>;\n\nStreamable <|.. VariantMultiMap;\nVariantMultiMap <|-- MultiMap;\nMultiMap <|-- HashMultiMapHashValue;\nMultiMap <|-- HashMultiMapSortedValue;\nMultiMap <|-- SortedMultiMapHashValue;\nMultiMap <|-- SortedMultiMapSortedValue;\n",mdxType:"UmlGraph"}),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"creation"},"Creation"),(0,i.kt)(o.r,{path:"multimap/create.ts",mdxType:"SandBox"}),(0,i.kt)("h3",{id:"query"},"Query"),(0,i.kt)(o.r,{path:"multimap/query.ts",mdxType:"SandBox"}),(0,i.kt)("h3",{id:"builder"},"Builder"),(0,i.kt)(o.r,{path:"multimap/build.ts",mdxType:"SandBox"}))}h.isMDXComponent=!0}}]);