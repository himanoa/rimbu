"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[77395],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>v});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var d=n.createContext({}),p=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(d.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=p(a),k=i,v=m["".concat(d,".").concat(k)]||m[k]||s[k]||l;return a?n.createElement(v,r(r({ref:t},u),{},{components:a})):n.createElement(v,r({ref:t},u))}));function v(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=k;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=a[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},85671:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>y,contentTitle:()=>c,default:()=>b,frontMatter:()=>v,metadata:()=>h,toc:()=>f});var n=a(3905),i=Object.defineProperty,l=Object.defineProperties,r=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,u=(e,t,a)=>t in e?i(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,m=(e,t)=>{for(var a in t||(t={}))d.call(t,a)&&u(e,a,t[a]);if(o)for(var a of o(t))p.call(t,a)&&u(e,a,t[a]);return e},s=(e,t)=>l(e,r(t)),k=(e,t)=>{var a={};for(var n in e)d.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&o)for(var n of o(e))t.indexOf(n)<0&&p.call(e,n)&&(a[n]=e[n]);return a};const v={title:"MultiMapEmpty<K,V,Tp>",slug:"/rimbu/multimap/custom/MultiMapEmpty/class"},c="class MultiMapEmpty<K,V,Tp>",h={unversionedId:"rimbu_multimap/custom/MultiMapEmpty.class",id:"rimbu_multimap/custom/MultiMapEmpty.class",title:"MultiMapEmpty<K,V,Tp>",description:"undocumented",source:"@site/api/rimbu_multimap/custom/MultiMapEmpty.class.mdx",sourceDirName:"rimbu_multimap/custom",slug:"/rimbu/multimap/custom/MultiMapEmpty/class",permalink:"/api/rimbu/multimap/custom/MultiMapEmpty/class",draft:!1,tags:[],version:"current",frontMatter:{title:"MultiMapEmpty<K,V,Tp>",slug:"/rimbu/multimap/custom/MultiMapEmpty/class"},sidebar:"defaultSidebar",previous:{title:"MultiMapCreators",permalink:"/api/rimbu/multimap/custom/MultiMapCreators/interface"},next:{title:"MultiMapNonEmpty<K,V,Tp,TpG>",permalink:"/api/rimbu/multimap/custom/MultiMapNonEmpty/class"}},y={},f=[{value:"Type parameters",id:"type-parameters",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>context</code>",id:"context",level:3},{value:"Definition",id:"definition",level:4},{value:"Overrides",id:"overrides",level:4},{value:"<code>isEmpty</code>",id:"isempty",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Overrides",id:"overrides-1",level:4},{value:"<code>keyMap</code>",id:"keymap",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Overrides",id:"overrides-2",level:4},{value:"<code>keySize</code>",id:"keysize",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Overrides",id:"overrides-3",level:4},{value:"<code>size</code>",id:"size",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Overrides",id:"overrides-4",level:4},{value:"Methods",id:"methods",level:2},{value:"<code>add</code>",id:"add",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters",level:4},{value:"Overrides",id:"overrides-5",level:4},{value:"<code>addEntries</code>",id:"addentries",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"Overrides",id:"overrides-6",level:4},{value:"<code>assumeNonEmpty</code>",id:"assumenonempty",level:3},{value:"Definition",id:"definition-7",level:4},{value:"Overrides",id:"overrides-7",level:4},{value:"<code>filter</code>",id:"filter",level:3},{value:"Definition",id:"definition-8",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"Overrides",id:"overrides-8",level:4},{value:"<code>forEach</code>",id:"foreach",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Parameters",id:"parameters-3",level:4},{value:"Overrides",id:"overrides-9",level:4},{value:"<code>getValues</code>",id:"getvalues",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Overrides",id:"overrides-10",level:4},{value:"<code>hasEntry</code>",id:"hasentry",level:3},{value:"Definition",id:"definition-11",level:4},{value:"Overrides",id:"overrides-11",level:4},{value:"<code>hasKey</code>",id:"haskey",level:3},{value:"Definition",id:"definition-12",level:4},{value:"Overrides",id:"overrides-12",level:4},{value:"<code>modifyAt</code>",id:"modifyat",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Parameters",id:"parameters-4",level:4},{value:"Overrides",id:"overrides-13",level:4},{value:"<code>nonEmpty</code>",id:"nonempty",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Overrides",id:"overrides-14",level:4},{value:"<code>removeEntries</code>",id:"removeentries",level:3},{value:"Definition",id:"definition-15",level:4},{value:"Overrides",id:"overrides-15",level:4},{value:"<code>removeEntry</code>",id:"removeentry",level:3},{value:"Definition",id:"definition-16",level:4},{value:"Overrides",id:"overrides-16",level:4},{value:"<code>removeKey</code>",id:"removekey",level:3},{value:"Definition",id:"definition-17",level:4},{value:"Overrides",id:"overrides-17",level:4},{value:"<code>removeKeyAndGet</code>",id:"removekeyandget",level:3},{value:"Definition",id:"definition-18",level:4},{value:"Overrides",id:"overrides-18",level:4},{value:"<code>removeKeys</code>",id:"removekeys",level:3},{value:"Definition",id:"definition-19",level:4},{value:"Overrides",id:"overrides-19",level:4},{value:"<code>setValues</code>",id:"setvalues",level:3},{value:"Definition",id:"definition-20",level:4},{value:"Parameters",id:"parameters-5",level:4},{value:"Overrides",id:"overrides-20",level:4},{value:"<code>stream</code>",id:"stream",level:3},{value:"Definition",id:"definition-21",level:4},{value:"Overrides",id:"overrides-21",level:4},{value:"<code>streamKeys</code>",id:"streamkeys",level:3},{value:"Definition",id:"definition-22",level:4},{value:"Overrides",id:"overrides-22",level:4},{value:"<code>streamValues</code>",id:"streamvalues",level:3},{value:"Definition",id:"definition-23",level:4},{value:"Overrides",id:"overrides-23",level:4},{value:"<code>toArray</code>",id:"toarray",level:3},{value:"Definition",id:"definition-24",level:4},{value:"Overrides",id:"overrides-24",level:4},{value:"<code>toBuilder</code>",id:"tobuilder",level:3},{value:"Definition",id:"definition-25",level:4},{value:"Overrides",id:"overrides-25",level:4},{value:"<code>toJSON</code>",id:"tojson",level:3},{value:"Definition",id:"definition-26",level:4},{value:"Overrides",id:"overrides-26",level:4},{value:"<code>toString</code>",id:"tostring",level:3},{value:"Definition",id:"definition-27",level:4},{value:"Overrides",id:"overrides-27",level:4}],N={toc:f},M="wrapper";function b(e){var t=e,{components:a}=t,i=k(t,["components"]);return(0,n.kt)(M,s(m(m({},N),i),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",m({},{id:"class-multimapemptykvtp"}),(0,n.kt)("inlineCode",{parentName:"h1"},"class MultiMapEmpty<K,V,Tp>")),(0,n.kt)("p",null,"undocumented"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Implements:")," ",(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"MultiMapBase<K,V,Tp>"))),(0,n.kt)("h2",m({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Constraints"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"K"),(0,n.kt)("td",m({parentName:"tr"},{align:null})),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"V"),(0,n.kt)("td",m({parentName:"tr"},{align:null})),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),"Tp"),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/multimap/custom/ContextImplTypes/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"ContextImplTypes"))),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"undocumented")))),(0,n.kt)("h2",m({},{id:"properties"}),"Properties"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"context"}),(0,n.kt)("inlineCode",{parentName:"h3"},"context")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly context: WithKeyValue<Tp, K, V>['context'];"))),(0,n.kt)("h4",m({},{id:"overrides"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/interface#context"}),"MultiMapBase.context"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"isempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"isEmpty")),(0,n.kt)("p",null,"Returns true if the collection is empty.")),(0,n.kt)("h4",m({},{id:"definition-1"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly isEmpty: boolean;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.empty<number>().isEmpty      // => true\nHashMultiMapHashValue.of([1, 1], [2, 2]).isEmpty   // => false\n"))),(0,n.kt)("h4",m({},{id:"overrides-1"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#isEmpty"}),"VariantMultiMapBase.isEmpty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"keymap"}),(0,n.kt)("inlineCode",{parentName:"h3"},"keyMap")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-2"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"get keyMap(): WithKeyValue<Tp, K, V>['keyMap'];"))),(0,n.kt)("h4",m({},{id:"overrides-2"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#keyMap"}),"VariantMultiMapBase.keyMap"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"keysize"}),(0,n.kt)("inlineCode",{parentName:"h3"},"keySize")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-3"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"get keySize(): 0;"))),(0,n.kt)("h4",m({},{id:"overrides-3"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#keySize"}),"VariantMultiMapBase.keySize"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"size"}),(0,n.kt)("inlineCode",{parentName:"h3"},"size")),(0,n.kt)("p",null,"Returns the number of unique key-value combinations in this collection.")),(0,n.kt)("h4",m({},{id:"definition-4"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly size: number;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 1], [2, 2]).size       // => 2\nHashMultiMapHashValue.of([1, 1], [1, 2]).size       // => 2\n"))),(0,n.kt)("h4",m({},{id:"overrides-4"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#size"}),"VariantMultiMapBase.size"))),(0,n.kt)("h2",m({},{id:"methods"}),"Methods"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"add"}),(0,n.kt)("inlineCode",{parentName:"h3"},"add")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-5"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"add(key: K, value: V): WithKeyValue<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("h4",m({},{id:"parameters"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",m({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"value")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"V")),(0,n.kt)("td",m({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",m({},{id:"overrides-5"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/interface#add"}),"MultiMapBase.add"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"addentries"}),(0,n.kt)("inlineCode",{parentName:"h3"},"addEntries")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-6"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"addEntries(entries: StreamSource<readonly [K, V]>): any;"))),(0,n.kt)("h4",m({},{id:"parameters-1"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"entries")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource<readonly [K, V]>")),(0,n.kt)("td",m({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",m({},{id:"overrides-6"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/interface#addEntries"}),"MultiMapBase.addEntries"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"assumenonempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"assumeNonEmpty")),(0,n.kt)("p",null,"Returns the collection as a .NonEmpty type")),(0,n.kt)("h4",m({},{id:"definition-7"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"assumeNonEmpty(): WithKeyValue<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("admonition",m({},{title:"throws",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"RimbuError.EmptyCollectionAssumedNonEmptyError if the collection is empty")),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.empty<number, number>().assumeNonEmpty()   // => throws\nconst m: HashMultiMapHashValue<number, number> = HashMultiMapHashValue.of([1, 1], [2, 2])\nconst m2: HashMultiMapHashValue.NonEmpty<number, number> = m     // => compiler error\nconst m3: HashMultiMapHashValue.NonEmpty<number, number> = m.assumeNonEmpty()\n"))),(0,n.kt)("admonition",m({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"returns reference to this collection")),(0,n.kt)("h4",m({},{id:"overrides-7"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#assumeNonEmpty"}),"VariantMultiMapBase.assumeNonEmpty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"filter"}),(0,n.kt)("inlineCode",{parentName:"h3"},"filter")),(0,n.kt)("p",null,"Returns a collection containing only those entries that satisfy given ",(0,n.kt)("inlineCode",{parentName:"p"},"pred")," predicate.")),(0,n.kt)("h4",m({},{id:"definition-8"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"filter(pred: (entry: [K, V], index: number, halt: () => void) => boolean): WithKeyValue<Tp, K, V>['normal'];"))),(0,n.kt)("h4",m({},{id:"parameters-2"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"pred")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(entry: [K, V], index: number, halt: () => void) => boolean")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"a predicate function receiving:",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"entry"),": the next entry",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"index"),": the entry index",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, when called, ensures no next entries are passed")))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c'])\n.filter(entry => entry[0] === 2 || entry[1] === 'c')\n.toArray()\n// => [[2, 'b'], [1, 'c']]\n"))),(0,n.kt)("h4",m({},{id:"overrides-8"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#filter"}),"VariantMultiMapBase.filter"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"foreach"}),(0,n.kt)("inlineCode",{parentName:"h3"},"forEach")),(0,n.kt)("p",null,"Performs given function ",(0,n.kt)("inlineCode",{parentName:"p"},"f")," for each entry of the collection, using given ",(0,n.kt)("inlineCode",{parentName:"p"},"state")," as initial traversal state.")),(0,n.kt)("h4",m({},{id:"definition-9"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"forEach(f: (entry: [K, V], index: number, halt: () => void) => void, state?: "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"TraverseState")),(0,n.kt)("inlineCode",{parentName:"p"},"): void;"))),(0,n.kt)("h4",m({},{id:"parameters-3"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"f")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"(entry: [K, V], index: number, halt: () => void) => void")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"the function to perform for each element, receiving:",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"entry"),": the next tuple of a key and value",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"index"),": the index of the element",(0,n.kt)("br",null)," - ",(0,n.kt)("inlineCode",{parentName:"td"},"halt"),": a function that, if called, ensures that no new elements are passed")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"state")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/common/TraverseState/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"TraverseState"))),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"(optional) the traverse state")))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c']).forEach((entry, i, halt) => {\nconsole.log([entry[1], entry[0]]);\nif (i >= 1) halt();\n})\n// => logs ['a', 1]  ['c', 1]  (or other order)\n"))),(0,n.kt)("admonition",m({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"O(N)")),(0,n.kt)("h4",m({},{id:"overrides-9"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#forEach"}),"VariantMultiMapBase.forEach"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"getvalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"getValues")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-10"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"getValues(): WithKeyValue<Tp, K, V>['keyMapValues'];"))),(0,n.kt)("h4",m({},{id:"overrides-10"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#getValues"}),"VariantMultiMapBase.getValues"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"hasentry"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasEntry")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-11"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hasEntry(): false;"))),(0,n.kt)("h4",m({},{id:"overrides-11"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#hasEntry"}),"VariantMultiMapBase.hasEntry"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"haskey"}),(0,n.kt)("inlineCode",{parentName:"h3"},"hasKey")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-12"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"hasKey(): false;"))),(0,n.kt)("h4",m({},{id:"overrides-12"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#hasKey"}),"VariantMultiMapBase.hasKey"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"modifyat"}),(0,n.kt)("inlineCode",{parentName:"h3"},"modifyAt")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-13"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"modifyAt(atKey: K, options: {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"ifNew?: "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/common/OptLazy/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,n.kt)("inlineCode",{parentName:"p"},"<StreamSource<V>>;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"}): WithKeyValue<Tp, K, V>['normal'];"))),(0,n.kt)("h4",m({},{id:"parameters-4"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"atKey")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",m({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"options")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"{"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"ifNew?: "),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/common/OptLazy/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,n.kt)("inlineCode",{parentName:"td"},"<StreamSource<V>>;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"td"},"}")),(0,n.kt)("td",m({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",m({},{id:"overrides-13"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/interface#modifyAt"}),"MultiMapBase.modifyAt"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"nonempty"}),(0,n.kt)("inlineCode",{parentName:"h3"},"nonEmpty")),(0,n.kt)("p",null,"Returns true if there is at least one entry in the collection, and instructs the compiler to treat the collection as a .NonEmpty type.")),(0,n.kt)("h4",m({},{id:"definition-14"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"nonEmpty(): this is WithKeyValue<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const m: HashMultiMapHashValue<number, number> = HashMap.of([1, 1], [2, 2])\nm.stream().first(0)     // compiler allows fallback value since the Stream may be empty\nif (m.nonEmpty()) {\nm.stream().first(0)   // compiler error: fallback value not allowed since Stream is not empty\n}\n"))),(0,n.kt)("h4",m({},{id:"overrides-14"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#nonEmpty"}),"VariantMultiMapBase.nonEmpty"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"removeentries"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeEntries")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-15"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeEntries(): WithKeyValue<Tp, K, V>['normal'];"))),(0,n.kt)("h4",m({},{id:"overrides-15"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeEntries"}),"VariantMultiMapBase.removeEntries"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"removeentry"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeEntry")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-16"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeEntry(): WithKeyValue<Tp, K, V>['normal'];"))),(0,n.kt)("h4",m({},{id:"overrides-16"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeEntry"}),"VariantMultiMapBase.removeEntry"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"removekey"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeKey")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-17"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeKey(): WithKeyValue<Tp, K, V>['normal'];"))),(0,n.kt)("h4",m({},{id:"overrides-17"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeKey"}),"VariantMultiMapBase.removeKey"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"removekeyandget"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeKeyAndGet")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-18"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeKeyAndGet(): undefined;"))),(0,n.kt)("h4",m({},{id:"overrides-18"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeKeyAndGet"}),"VariantMultiMapBase.removeKeyAndGet"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"removekeys"}),(0,n.kt)("inlineCode",{parentName:"h3"},"removeKeys")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-19"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"removeKeys(): WithKeyValue<Tp, K, V>['normal'];"))),(0,n.kt)("h4",m({},{id:"overrides-19"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#removeKeys"}),"VariantMultiMapBase.removeKeys"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"setvalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"setValues")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-20"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"setValues(key: K, values: StreamSource<V>): WithKeyValue<Tp, K, V>['nonEmpty'];"))),(0,n.kt)("h4",m({},{id:"parameters-5"}),"Parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"key")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"K")),(0,n.kt)("td",m({parentName:"tr"},{align:null}))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"values")),(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("inlineCode",{parentName:"td"},"StreamSource<V>")),(0,n.kt)("td",m({parentName:"tr"},{align:null}))))),(0,n.kt)("h4",m({},{id:"overrides-20"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/interface#setValues"}),"MultiMapBase.setValues"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"stream"}),(0,n.kt)("inlineCode",{parentName:"h3"},"stream")),(0,n.kt)("p",null,"Returns a Stream containing all entries of this collection as tuples of key and value.")),(0,n.kt)("h4",m({},{id:"definition-21"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"stream(): Stream<[K, V]>;"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 1], [2, 2]).stream().toArray()  // => [[1, 1], [2, 2]]\n"))),(0,n.kt)("h4",m({},{id:"overrides-21"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#stream"}),"VariantMultiMapBase.stream"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"streamkeys"}),(0,n.kt)("inlineCode",{parentName:"h3"},"streamKeys")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-22"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"streamKeys(): Stream<K>;"))),(0,n.kt)("h4",m({},{id:"overrides-22"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#streamKeys"}),"VariantMultiMapBase.streamKeys"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"streamvalues"}),(0,n.kt)("inlineCode",{parentName:"h3"},"streamValues")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-23"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"streamValues(): Stream<V>;"))),(0,n.kt)("h4",m({},{id:"overrides-23"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#streamValues"}),"VariantMultiMapBase.streamValues"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"toarray"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toArray")),(0,n.kt)("p",null,"Returns an array containing all entries in this collection.")),(0,n.kt)("h4",m({},{id:"definition-24"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toArray(): [K, V][];"))),(0,n.kt)("admonition",m({},{title:"example",type:"note"}),(0,n.kt)("pre",{parentName:"admonition"},(0,n.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"HashMultiMapHashValue.of([1, 'a'], [2, 'b'], [1, 'c']).toArray()   // => [[1, 'a'], [1, 'c'], [2, 'b']]\n"))),(0,n.kt)("admonition",m({},{title:"note",type:"note"}),(0,n.kt)("p",{parentName:"admonition"},"O(log(N))  @note it is safe to mutate the returned array, however, the array elements are not copied, thus should be treated as read-only")),(0,n.kt)("h4",m({},{id:"overrides-24"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#toArray"}),"VariantMultiMapBase.toArray"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"tobuilder"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toBuilder")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-25"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toBuilder(): WithKeyValue<Tp, K, V>['builder'];"))),(0,n.kt)("h4",m({},{id:"overrides-25"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/MultiMapBase/interface#toBuilder"}),"MultiMapBase.toBuilder"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"tojson"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toJSON")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-26"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toJSON(): "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/common/ToJSON/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"ToJSON")),(0,n.kt)("inlineCode",{parentName:"p"},"<[K, V[]][]>;"))),(0,n.kt)("h4",m({},{id:"overrides-26"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#toJSON"}),"VariantMultiMapBase.toJSON"))),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",m({},{id:"tostring"}),(0,n.kt)("inlineCode",{parentName:"h3"},"toString")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",m({},{id:"definition-27"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"toString(): string;"))),(0,n.kt)("h4",m({},{id:"overrides-27"}),"Overrides"),(0,n.kt)("p",null,(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/custom/VariantMultiMapBase/interface#toString"}),"VariantMultiMapBase.toString"))))}b.isMDXComponent=!0}}]);