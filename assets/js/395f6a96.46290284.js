"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[21346],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>s});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),o=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return r.createElement(m.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,m=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),u=o(a),c=n,s=u["".concat(m,".").concat(c)]||u[c]||h[c]||i;return a?r.createElement(s,l(l({ref:t},d),{},{components:a})):r.createElement(s,l({ref:t},d))}));function s(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=c;var p={};for(var m in t)hasOwnProperty.call(t,m)&&(p[m]=t[m]);p.originalType=e,p[u]="string"==typeof e?e:n,l[1]=p;for(var o=2;o<i;o++)l[o]=a[o];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},67537:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>k,default:()=>M,frontMatter:()=>s,metadata:()=>N,toc:()=>g});var r=a(3905),n=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,u=(e,t)=>{for(var a in t||(t={}))m.call(t,a)&&d(e,a,t[a]);if(p)for(var a of p(t))o.call(t,a)&&d(e,a,t[a]);return e},h=(e,t)=>i(e,l(t)),c=(e,t)=>{var a={};for(var r in e)m.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&p)for(var r of p(e))t.indexOf(r)<0&&o.call(e,r)&&(a[r]=e[r]);return a};const s={title:"@rimbu/core",slug:"/rimbu/core"},k="package @rimbu/core",N={unversionedId:"rimbu_core/index",id:"rimbu_core/index",title:"@rimbu/core",description:"The @rimbu/core package is a convenience package that exports most items from the following packages:",source:"@site/api/rimbu_core/index.mdx",sourceDirName:"rimbu_core",slug:"/rimbu/core",permalink:"/api/rimbu/core",draft:!1,tags:[],version:"current",frontMatter:{title:"@rimbu/core",slug:"/rimbu/core"},sidebar:"defaultSidebar",previous:{title:"Update",permalink:"/api/rimbu/common/Update/type"},next:{title:"ArrayNonEmpty",permalink:"/api/rimbu/core/ArrayNonEmpty/type"}},b={},g=[{value:"Interfaces",id:"interfaces",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"Classes",id:"classes",level:2},{value:"Functions",id:"functions",level:2},{value:"<code>Err</code>",id:"err",level:3},{value:"Definition",id:"definition",level:4},{value:"<code>OptLazy</code>",id:"optlazy",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"Parameters",id:"parameters",level:4},{value:"<code>OptLazyOr</code>",id:"optlazyor",level:3},{value:"Definition",id:"definition-2",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>TraverseState</code>",id:"traversestate",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>Update</code>",id:"update",level:3},{value:"Definition",id:"definition-4",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"Parameters",id:"parameters-3",level:4}],f={toc:g},y="wrapper";function M(e){var t=e,{components:a}=t,n=c(t,["components"]);return(0,r.kt)(y,h(u(u({},f),n),{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",u({},{id:"package-rimbucore"}),(0,r.kt)("inlineCode",{parentName:"h1"},"package @rimbu/core")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package is a convenience package that exports most items from the following packages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./bimap"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/bimap"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./bimultimap"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/bimultimap"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./collection-types"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/collection-types"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./common"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/common"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./deep"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/deep"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./graph"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/graph"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./hashed"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/hashed"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./list"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/list"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./multimap"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/multimap"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./multiset"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/multiset"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./ordered"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/ordered"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./proximity"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/proximity"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./sorted"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/sorted"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./stream"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/stream"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./table"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/table")))),(0,r.kt)("h2",u({},{id:"interfaces"}),"Interfaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraph<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable arrow (directed) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraph/interface"}),"ArrowGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphHashed/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraphHashed<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using hashed collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphHashed/interface"}),"ArrowGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphSorted/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraphSorted<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using sorted collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphSorted/interface"}),"ArrowGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraph<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraph/interface"}),"ArrowValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraphHashed/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraphHashed<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The nodes are internally maintained using HashMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraphHashed/interface"}),"ArrowValuedGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraphSorted/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraphSorted<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The nodes are internally maintained using SortedMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraphSorted/interface"}),"ArrowValuedGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimap"}),"BiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimap/BiMap/interface"}),"BiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/BiMultiMap/interface"}),"BiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Comp/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Comp<K>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An object providing methods to compare two values of type ",(0,r.kt)("inlineCode",{parentName:"td"},"K"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraph<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable edge (undirected) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraph/interface"}),"EdgeGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraphHashed/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraphHashed<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The connections are internally maintained using hashed collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraphHashed/interface"}),"EdgeGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraphSorted/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraphSorted<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The connections are internally maintained using sorted collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraphSorted/interface"}),"EdgeGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraph<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraph/interface"}),"EdgeValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraphHashed/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraphHashed<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The nodes are internally maintained using HashMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraphHashed/interface"}),"EdgeValuedGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraphSorted/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraphSorted<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The nodes are internally maintained using SortedMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraphSorted/interface"}),"EdgeValuedGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/GenSource/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"GenSource<E>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Graph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Graph<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/Graph/interface"}),"Graph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashBiMultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashBiMultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are hashed. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/HashBiMultiMap/interface"}),"HashBiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Hasher/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Hasher<UK>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"Interface used to hash objects for hashed collections.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapHashValue/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapHashValue/interface"}),"HashMultiMapHashValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapSortedValue/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapSortedValue<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapSortedValue/interface"}),"HashMultiMapSortedValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/HashMultiSet/interface"}),"HashMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/List/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"List<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A random accessible immutable sequence of values of type T. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/list"}),"List documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/list/List/interface"}),"List API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/MultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/MultiMap/interface"}),"MultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/MultiSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/interface"}),"MultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedBiMultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are sorted. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/SortedBiMultiMap/interface"}),"HashBiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapHashValue/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapHashValue<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapHashValue/interface"}),"SortedMultiMapHashValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapSortedValue/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapSortedValue/interface"}),"SortedMultiMapSortedValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMultiSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/SortedMultiSet/interface"}),"SortedMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Table/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Table<R,C,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/Table/interface"}),"Table API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ToJSON/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ToJSON<V,D>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"Utility type to convert some object to a JSON serializable format.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/TraverseState/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"TraverseState"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An object used to track the state of a traversal, e.g. a ",(0,r.kt)("inlineCode",{parentName:"td"},"forEach"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ValuedGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ValuedGraph<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ValuedGraph/interface"}),"ValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraph<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-variant immutable graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/VariantGraph/interface"}),"VariantGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantMultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/VariantMultiMap/interface"}),"VariantMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantMultiSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/VariantMultiSet/interface"}),"VariantMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantTable/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantTable<R,C,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/VariantTable/interface"}),"VariantTable API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantValuedGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantValuedGraph<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-variant immutable valued graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/VariantValuedGraph/interface"}),"VariantValuedGraph API documentation"))))),(0,r.kt)("h2",u({},{id:"namespaces"}),"Namespaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable arrow (directed) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraph/interface"}),"ArrowGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphHashed/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraphHashed"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using hashed collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphHashed/interface"}),"ArrowGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphSorted/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraphSorted"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using sorted collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphSorted/interface"}),"ArrowGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraph/interface"}),"ArrowValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraphHashed/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraphHashed"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The nodes are internally maintained using HashMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraphHashed/interface"}),"ArrowValuedGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraphSorted/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraphSorted"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The nodes are internally maintained using SortedMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraphSorted/interface"}),"ArrowValuedGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncOptLazy/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncOptLazy"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A potentially lazy and/or asynchronous value of type T.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncReducer/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncReducer"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An ",(0,r.kt)("inlineCode",{parentName:"td"},"AsyncReducer")," is a stand-alone asynchronous calculation that takes input values of type I, and, when requested, produces an output value of type O.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimap"}),"BiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimap/BiMap/interface"}),"BiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMultiMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/BiMultiMap/interface"}),"BiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/CollectFun/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"CollectFun"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A function used in ",(0,r.kt)("inlineCode",{parentName:"td"},"collect")," methods to collect values from a collection. This is basically a single-pass map and filter.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Comp/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Comp"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An object providing methods to compare two values of type ",(0,r.kt)("inlineCode",{parentName:"td"},"K"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Deep/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Deep"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable edge (undirected) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraph/interface"}),"EdgeGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraphHashed/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraphHashed"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The connections are internally maintained using hashed collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraphHashed/interface"}),"EdgeGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraphSorted/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraphSorted"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The connections are internally maintained using sorted collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraphSorted/interface"}),"EdgeGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraph/interface"}),"EdgeValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraphHashed/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraphHashed"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The nodes are internally maintained using HashMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraphHashed/interface"}),"EdgeValuedGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraphSorted/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraphSorted"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The nodes are internally maintained using SortedMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraphSorted/interface"}),"EdgeValuedGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Eq/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Eq"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A function returning true if given ",(0,r.kt)("inlineCode",{parentName:"td"},"v1")," and ",(0,r.kt)("inlineCode",{parentName:"td"},"v2")," should be considered equal.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ErrBase/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ErrBase"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Graph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Graph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/Graph/interface"}),"Graph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashBiMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashBiMultiMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are hashed. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/HashBiMultiMap/interface"}),"HashBiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Hasher/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Hasher"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"Interface used to hash objects for hashed collections.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapHashValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapHashValue/interface"}),"HashMultiMapHashValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapSortedValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapSortedValue"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapSortedValue/interface"}),"HashMultiMapSortedValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/HashMultiSet/interface"}),"HashMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/IndexRange/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"IndexRange"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A flexible range specification for numeric indices. If a start or end is defined, a tuple can be used where the second item is a boolean indicating whether that end is inclusive or exclusive.")))),(0,r.kt)("p",null," An IndexRange can have one of the following forms:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"{ amount: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: number, amount: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: number, end: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: number, end: ","[number, boolean]"," }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[number, boolean]"," }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[number, boolean]",", amount: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[number, boolean]",", end: number }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[number, boolean]",", end: ","[number, boolean]"," }"),(0,r.kt)("li",{parentName:"ul"},"{ end: number }"),(0,r.kt)("li",{parentName:"ul"},"{ end: ","[number, boolean]"," }\n|\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/List/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"List"))," | A random accessible immutable sequence of values of type T. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/list"}),"List documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/list/List/interface"}),"List API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/MultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMap"))," | A type-invariant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/multimap/MultiMap/interface"}),"MultiMap API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/MultiSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiSet"))," | A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/interface"}),"MultiSet API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/Range/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Range"))," | A range definition for any type of (orderable) value. If a start or end is defined, a tuple can be used where the second item is a boolean indicating whether that end is inclusive (true) or exclusive (false).\nA Range of type T can have one of the following forms:\n"),(0,r.kt)("li",{parentName:"ul"},"{ end: T }"),(0,r.kt)("li",{parentName:"ul"},"{ end: ","[T, boolean]"," }"),(0,r.kt)("li",{parentName:"ul"},"{ start: T }"),(0,r.kt)("li",{parentName:"ul"},"{ start: T, end: T }"),(0,r.kt)("li",{parentName:"ul"},"{ start: T, end: ","[T, boolean]"," }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[T, boolean]"," }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[T, boolean]",", end: T }"),(0,r.kt)("li",{parentName:"ul"},"{ start: ","[T, boolean]",", end: ","[T, boolean]"," }\n|\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/Reducer/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Reducer"))," | A ",(0,r.kt)("inlineCode",{parentName:"li"},"Reducer")," is a stand-alone calculation that takes input values of type I, and, when requested, produces an output value of type O. |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/SortedBiMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap"))," | A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are sorted. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/bimultimap/SortedBiMultiMap/interface"}),"HashBiMultiMap API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/SortedMultiMapHashValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapHashValue"))," | A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapHashValue/interface"}),"SortedMultiMapHashValue API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/SortedMultiMapSortedValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue"))," | A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapSortedValue/interface"}),"SortedMultiMapSortedValue API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/SortedMultiSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiSet"))," | A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/multiset/SortedMultiSet/interface"}),"SortedMultiSet API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/Table/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Table"))," | A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/table/Table/interface"}),"Table API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/Traverse/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Traverse"))," | undocumented |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/Tuple/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Tuple"))," | A readonly array of fixed length and types. |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/ValuedGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ValuedGraph"))," | An type-invariant immutable valued graph. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/graph/ValuedGraph/interface"}),"ValuedGraph API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/VariantGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraph"))," | An type-variant immutable graph. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/graph/VariantGraph/interface"}),"VariantGraph API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/VariantMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiMap"))," | A type-variant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/multimap/VariantMultiMap/interface"}),"VariantMultiMap API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/VariantMultiSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiSet"))," | A type-variant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/multiset/VariantMultiSet/interface"}),"VariantMultiSet API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/VariantTable/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantTable"))," | A type-variant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/table/VariantTable/interface"}),"VariantTable API documentation")," |\n| ",(0,r.kt)("a",u({parentName:"li"},{href:"/api/rimbu/core/VariantValuedGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantValuedGraph"))," | An type-variant immutable valued graph. See the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"li"},{href:"https://rimbu.org/api/rimbu/graph/VariantValuedGraph/interface"}),"VariantValuedGraph API documentation")," |")),(0,r.kt)("h2",u({},{id:"classes"}),"Classes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BlockBuilderBase/class"}),(0,r.kt)("inlineCode",{parentName:"a"},"BlockBuilderBase"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/CollisionBuilderBase/class"}),(0,r.kt)("inlineCode",{parentName:"a"},"CollisionBuilderBase"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")))),(0,r.kt)("h2",u({},{id:"functions"}),"Functions"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",u({},{id:"err"}),(0,r.kt)("inlineCode",{parentName:"h3"},"Err")),(0,r.kt)("p",null,"Throws an ",(0,r.kt)("inlineCode",{parentName:"p"},"Err.ForcedError")," error when called.")),(0,r.kt)("h4",u({},{id:"definition"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function Err(): never;"))),(0,r.kt)("admonition",u({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const emptyMap = HashMap.empty<number, string>()\nemptyMap.get(5, Err);\n// throws: Err.CustomError(message: 'Err: forced to throw error')\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",u({},{id:"optlazy"}),(0,r.kt)("inlineCode",{parentName:"h3"},"OptLazy")),(0,r.kt)("p",null,"Returns the value contained in an ",(0,r.kt)("inlineCode",{parentName:"p"},"OptLazy")," instance of type T.")),(0,r.kt)("h4",u({},{id:"definition-1"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function OptLazy<T>(optLazy: "),(0,r.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/OptLazy/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,r.kt)("inlineCode",{parentName:"p"},"<T>): T;"))),(0,r.kt)("h5",u({},{id:"type-parameters"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,r.kt)("td",u({parentName:"tr"},{align:null}))))),(0,r.kt)("h4",u({},{id:"parameters"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"optLazy")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OptLazy/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"OptLazy")),(0,r.kt)("inlineCode",{parentName:"td"},"<T>")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"the ",(0,r.kt)("inlineCode",{parentName:"td"},"OptLazy")," value of type T")))),(0,r.kt)("admonition",u({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"OptLazy(1)              // => 1\nOptLazy(() => 1)        // => 1\nOptLazy(() => () => 1)  // => () => 1\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",u({},{id:"optlazyor"}),(0,r.kt)("inlineCode",{parentName:"h3"},"OptLazyOr")),(0,r.kt)("p",null,"Returns the value contained in an ",(0,r.kt)("inlineCode",{parentName:"p"},"OptLazyOr")," instance of type T, or the given ",(0,r.kt)("inlineCode",{parentName:"p"},"otherValue")," if the lazy function returns it.")),(0,r.kt)("h4",u({},{id:"definition-2"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function OptLazyOr<T, O>(optLazyOr: "),(0,r.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/OptLazyOr/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,r.kt)("inlineCode",{parentName:"p"},"<T, O>, otherValue: O): T "),(0,r.kt)("code",null,"|"),(0,r.kt)("inlineCode",{parentName:"p"}," O;"))),(0,r.kt)("h5",u({},{id:"type-parameters-1"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,r.kt)("td",u({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"O"),(0,r.kt)("td",u({parentName:"tr"},{align:null}))))),(0,r.kt)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"optLazyOr")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OptLazyOr/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"OptLazyOr")),(0,r.kt)("inlineCode",{parentName:"td"},"<T, O>")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"a value or a function returning a value or otherwise the received value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"otherValue")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"O")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"the value to return if the optLazyOr does not return its own value")))),(0,r.kt)("admonition",u({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"OptLazyOr(1, 'a')               // => 1\nOptLazyOr(() => 1, 'a')         // => 1\nOptLazyOr((none) => none, 'a')  // => 'a'\n")))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",u({},{id:"traversestate"}),(0,r.kt)("inlineCode",{parentName:"h3"},"TraverseState")),(0,r.kt)("p",null,"Returns a new ",(0,r.kt)("inlineCode",{parentName:"p"},"TraverseState")," instance, using optionally given ",(0,r.kt)("inlineCode",{parentName:"p"},"startIndex")," as a start index value.")),(0,r.kt)("h4",u({},{id:"definition-3"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function TraverseState(startIndex?: number): "),(0,r.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/TraverseState/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"TraverseState")),(0,r.kt)("inlineCode",{parentName:"p"},";"))),(0,r.kt)("h4",u({},{id:"parameters-2"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"startIndex")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"number")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"(default: 0) the start index to use"))))),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",u({},{id:"update"}),(0,r.kt)("inlineCode",{parentName:"h3"},"Update")),(0,r.kt)("p",null,"Returns the result of given ",(0,r.kt)("inlineCode",{parentName:"p"},"update")," parameter, where it can either directly give a new value, or it is a function receiving the given ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),", and returns a new value.")),(0,r.kt)("h4",u({},{id:"definition-4"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export declare function Update<T>(value: T, update: "),(0,r.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Update/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"Update")),(0,r.kt)("inlineCode",{parentName:"p"},"<T>): T;"))),(0,r.kt)("h5",u({},{id:"type-parameters-2"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,r.kt)("td",u({parentName:"tr"},{align:null}))))),(0,r.kt)("h4",u({},{id:"parameters-3"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"value")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"T")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"the current value")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"update")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Update/type"}),(0,r.kt)("inlineCode",{parentName:"a"},"Update")),(0,r.kt)("inlineCode",{parentName:"td"},"<T>")),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"an ",(0,r.kt)("inlineCode",{parentName:"td"},"Update")," value, either a new value or a function receiving the old value and returning a new one.")))),(0,r.kt)("admonition",u({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"Update(1, 2)          // => 2\nUpdate(1, () => 10)   // => 10\nUpdate(1, v => v + 1) // => 2\n")))))}M.isMDXComponent=!0}}]);