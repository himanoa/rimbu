"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[54622],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>c});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),m=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=m(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=m(n),k=l,c=u["".concat(p,".").concat(k)]||u[k]||s[k]||r;return n?a.createElement(c,i(i({ref:t},d),{},{components:n})):a.createElement(c,i({ref:t},d))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:l,i[1]=o;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},69876:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>q,contentTitle:()=>N,default:()=>g,frontMatter:()=>c,metadata:()=>y,toc:()=>f});var a=n(3905),l=Object.defineProperty,r=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,d=(e,t,n)=>t in e?l(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&d(e,n,t[n]);if(o)for(var n of o(t))m.call(t,n)&&d(e,n,t[n]);return e},s=(e,t)=>r(e,i(t)),k=(e,t)=>{var n={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&o)for(var a of o(e))t.indexOf(a)<0&&m.call(e,a)&&(n[a]=e[a]);return n};const c={title:"Eq (namespace)",slug:"/rimbu/core/Eq/namespace"},N="namespace Eq",y={unversionedId:"rimbu_core/Eq/index",id:"rimbu_core/Eq/index",title:"Eq (namespace)",description:"A function returning true if given v1 and v2 should be considered equal.",source:"@site/api/rimbu_core/Eq/index.mdx",sourceDirName:"rimbu_core/Eq",slug:"/rimbu/core/Eq/namespace",permalink:"/api/rimbu/core/Eq/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Eq (namespace)",slug:"/rimbu/core/Eq/namespace"},sidebar:"defaultSidebar",previous:{title:"EdgeValuedGraphSorted<N,V>",permalink:"/api/rimbu/core/EdgeValuedGraphSorted/interface"},next:{title:"objectIs",permalink:"/api/rimbu/core/Eq/objectIs/var"}},q={},f=[{value:"Functions",id:"functions",level:2},{value:"<code>anyDeepEq</code>",id:"anydeepeq",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:5},{value:"<code>anyFlatEq</code>",id:"anyflateq",level:3},{value:"Definition",id:"definition-1",level:4},{value:"Type parameters",id:"type-parameters-1",level:5},{value:"<code>anyJsonEq</code>",id:"anyjsoneq",level:3},{value:"Definition",id:"definition-2",level:4},{value:"<code>anyShallowEq</code>",id:"anyshalloweq",level:3},{value:"Definition",id:"definition-3",level:4},{value:"Type parameters",id:"type-parameters-2",level:5},{value:"<code>anyToStringEq</code>",id:"anytostringeq",level:3},{value:"Definition",id:"definition-4",level:4},{value:"<code>convertAnyToString</code>",id:"convertanytostring",level:3},{value:"Definition",id:"definition-5",level:4},{value:"Parameters",id:"parameters",level:4},{value:"<code>createStringCollatorEq</code>",id:"createstringcollatoreq",level:3},{value:"Definition",id:"definition-6",level:4},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>dateEq</code>",id:"dateeq",level:3},{value:"Definition",id:"definition-7",level:4},{value:"<code>defaultEq</code>",id:"defaulteq",level:3},{value:"Definition",id:"definition-8",level:4},{value:"<code>iterableEq</code>",id:"iterableeq",level:3},{value:"Definition",id:"definition-9",level:4},{value:"Type parameters",id:"type-parameters-3",level:5},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>objectEq</code>",id:"objecteq",level:3},{value:"Definition",id:"definition-10",level:4},{value:"Type parameters",id:"type-parameters-4",level:5},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>stringCaseInsentitiveEq</code>",id:"stringcaseinsentitiveeq",level:3},{value:"Definition",id:"definition-11",level:4},{value:"<code>stringCharCodeEq</code>",id:"stringcharcodeeq",level:3},{value:"Definition",id:"definition-12",level:4},{value:"<code>tupleSymmetric</code>",id:"tuplesymmetric",level:3},{value:"Definition",id:"definition-13",level:4},{value:"Type parameters",id:"type-parameters-5",level:5},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>valueOfEq</code>",id:"valueofeq",level:3},{value:"Definition",id:"definition-14",level:4},{value:"Type parameters",id:"type-parameters-6",level:5},{value:"Constants",id:"constants",level:2}],h={toc:f},b="wrapper";function g(e){var t=e,{components:n}=t,l=k(t,["components"]);return(0,a.kt)(b,s(u(u({},h),l),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",u({},{id:"namespace-eq"}),(0,a.kt)("inlineCode",{parentName:"h1"},"namespace Eq")),(0,a.kt)("p",null,"A function returning true if given ",(0,a.kt)("inlineCode",{parentName:"p"},"v1")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"v2")," should be considered equal."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion type:")," ",(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq<T>"))),(0,a.kt)("h2",u({},{id:"functions"}),"Functions"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"anydeepeq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"anyDeepEq")),(0,a.kt)("p",null,"Returns an Eq instance that checks equality of any values. For composed values (objects and iterables) it will recursively compare the contained values.  ")),(0,a.kt)("h4",u({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function anyDeepEq<T = any>(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h5",u({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the value type")))),(0,a.kt)("admonition",u({},{title:"note",type:"note"}),(0,a.kt)("p",{parentName:"admonition"},"may have poor performance for deeply nested types and large arrays, and objects with circular structures may cause infinite loops")),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = anyFlatEq()\nconsole.log(eq(1, 'a'))\n// => false\nconsole.log(eq({ a: 1, b: 2 }, { b: 2, a: 1 }))\n// => true\nconsole.log(eq([{ a: 1, b: 2 }], [{ b: 2, a: 1 }]))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"anyflateq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"anyFlatEq")),(0,a.kt)("p",null,"Returns an Eq instance that checks equality of any values. For composed values (objects and iterables) it will compare with Object.is.")),(0,a.kt)("h4",u({},{id:"definition-1"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function anyFlatEq<T = any>(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-1"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the value type")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = anyFlatEq()\nconsole.log(eq(1, 'a'))\n// => false\nconsole.log(eq({ a: 1, b: 2 }, { b: 2, a: 1 }))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"anyjsoneq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"anyJsonEq")),(0,a.kt)("p",null,"Returns an Eq instance that considers values equal their JSON.stringify values are equal.")),(0,a.kt)("h4",u({},{id:"definition-2"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function anyJsonEq(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<any>;"))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.anyJsonEq()\nconsole.log(eq({ a: 1, b: 2 }, { a: 1, b: 2 }))\n// => true\nconsole.log(eq({ a: 1, b: 2 }, { b: 2, a: 1 }))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"anyshalloweq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"anyShallowEq")),(0,a.kt)("p",null,"Returns an Eq instance that checks equality of any values. For composed values (objects and iterables) it will enter 1 level, and if again compound values are found, they are compared with Object.is.")),(0,a.kt)("h4",u({},{id:"definition-3"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function anyShallowEq<T = any>(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-2"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the value type")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = anyFlatEq()\nconsole.log(eq(1, 'a'))\n// => false\nconsole.log(eq({ a: 1, b: 2 }, { b: 2, a: 1 }))\n// => true\nconsole.log(eq([{ a: 1, b: 2 }], [{ b: 2, a: 1 }]))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"anytostringeq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"anyToStringEq")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-4"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function anyToStringEq(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<any>;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"convertanytostring"}),(0,a.kt)("inlineCode",{parentName:"h3"},"convertAnyToString")),(0,a.kt)("p",null,"undocumented")),(0,a.kt)("h4",u({},{id:"definition-5"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function convertAnyToString(value: any): string;"))),(0,a.kt)("h4",u({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"value")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"any")),(0,a.kt)("td",u({parentName:"tr"},{align:null})))))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"createstringcollatoreq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"createStringCollatorEq")),(0,a.kt)("p",null,"Returns an Eq instance that considers strings equal taking the given or default locale into account.")),(0,a.kt)("h4",u({},{id:"definition-6"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function createStringCollatorEq(...args: ConstructorParameters<typeof Intl.Collator>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<string>;"))),(0,a.kt)("h4",u({},{id:"parameters-1"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"args")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"ConstructorParameters<typeof Intl.Collator>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.createStringCollatorEq()\nconsole.log(eq('a', 'a'))\n// => true\nconsole.log(eq('abc', 'aBc'))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"dateeq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"dateEq")),(0,a.kt)("p",null,"Returns an Eq instance that compares Date objects according to their ",(0,a.kt)("inlineCode",{parentName:"p"},"valueOf")," value.")),(0,a.kt)("h4",u({},{id:"definition-7"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function dateEq(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<Date>;"))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.dateEq()\nconsole.log(eq(new Date(2020, 1, 1), new Date(2020, 1, 1))\n// => true\nconsole.log(eq(new Date(2020, 1, 1), new Date(2020, 2, 1))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"defaulteq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"defaultEq")),(0,a.kt)("p",null,"Returns the default Eq instance, which is the Eq.anyDeepEq() instance.")),(0,a.kt)("h4",u({},{id:"definition-8"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function defaultEq(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<any>;")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"iterableeq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"iterableEq")),(0,a.kt)("p",null,"Returns an Eq instance that compares Iterables by comparing their elements with the given ",(0,a.kt)("inlineCode",{parentName:"p"},"itemEq")," Eq instance.")),(0,a.kt)("h4",u({},{id:"definition-9"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function iterableEq<T>(itemEq?: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<Iterable<T>>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-3"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the Iterable element type")))),(0,a.kt)("h4",u({},{id:"parameters-2"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"itemEq")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) the Eq instance to use to compare the Iterable's elements")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.iterableEq();\nconsole.log(eq([1, 2, 3], [1, 2, 3])\n// => true\nconsole.log(eq([1, 2, 3], [1, 3, 2])\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"objecteq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"objectEq")),(0,a.kt)("p",null,"Returns an Eq instance that checks equality of objects containing property values of type V by iteratively applying given ",(0,a.kt)("inlineCode",{parentName:"p"},"valueEq")," to each of the object's property values.")),(0,a.kt)("h4",u({},{id:"definition-10"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function objectEq<V = any>(valueEq?: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<V>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<Record<any, V>>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-4"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters-3"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"valueEq")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"td"},"<V>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) the Eq instance to use to compare property values")))),(0,a.kt)("admonition",u({},{title:"typeparam",type:"note"}),(0,a.kt)("ul",{parentName:"admonition"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"the object property value type"))))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.objectEq()\nconsole.log(eq({ a: 1, b: { c: 2 }}, { b: { c: 2 }, a: 1 }))\n// => true\nconsole.log(eq({ a: 1, b: { c: 2 }}, { a: 1, b: { c: 3 }}))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"stringcaseinsentitiveeq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"stringCaseInsentitiveEq")),(0,a.kt)("p",null,"Returns an Eq instance that considers strings equal regardless of their case.")),(0,a.kt)("h4",u({},{id:"definition-11"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function stringCaseInsentitiveEq(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<string>;"))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.stringCaseInsentitiveEq()\nconsole.log(eq('aB', 'Ab'))\n// => true\nconsole.log(eq('aBc', 'abB'))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"stringcharcodeeq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"stringCharCodeEq")),(0,a.kt)("p",null,"Returns an Eq instance that considers strings equal when all their charcodes are equal.")),(0,a.kt)("h4",u({},{id:"definition-12"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function stringCharCodeEq(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<string>;"))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.stringCharCodeEq()\nconsole.log(eq('a', 'a'))\n// => true\nconsole.log(eq('abc', 'aBc'))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"tuplesymmetric"}),(0,a.kt)("inlineCode",{parentName:"h3"},"tupleSymmetric")),(0,a.kt)("p",null,"Returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"Eq")," instance for tuples that considers two tuples ","[A, B]"," and ","[C, D]"," equal if ","[A, B]"," equals ","[C, D]",", or if ","[A, B]"," equals ","[D, C]")),(0,a.kt)("h4",u({},{id:"definition-13"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function tupleSymmetric<T>(eq?: "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<readonly [T, T]>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-5"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}))))),(0,a.kt)("h4",u({},{id:"parameters-4"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"eq")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"td"},"<T>")),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"(optional) an alternative ",(0,a.kt)("inlineCode",{parentName:"td"},"Eq")," instance to use for the values in the tuple")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.tupleSymmetric()\nconsole.log(eq([1, 2], [1, 2]))\n// => true\nconsole.log(eq([1, 2], [2, 1]))\n// => true\nconsole.log(eq([1, 3], [2, 1]))\n// => false\n")))),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",u({},{id:"valueofeq"}),(0,a.kt)("inlineCode",{parentName:"h3"},"valueOfEq")),(0,a.kt)("p",null,"Returns an Eq instance for objects that have a ",(0,a.kt)("inlineCode",{parentName:"p"},"valueOf")," method. It returns true if the ",(0,a.kt)("inlineCode",{parentName:"p"},".valueOf")," values of both given objects are equal.")),(0,a.kt)("h4",u({},{id:"definition-14"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"function valueOfEq<T extends {"),(0,a.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"valueOf(): V;"),(0,a.kt)("br",null),"\xa0","\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"}, V>(): "),(0,a.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/Eq/type"}),(0,a.kt)("inlineCode",{parentName:"a"},"Eq")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h5",u({},{id:"type-parameters-6"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the object type containing a valueOf function of type V")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"V"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"the valueOf result type")))),(0,a.kt)("admonition",u({},{title:"example",type:"note"}),(0,a.kt)("pre",{parentName:"admonition"},(0,a.kt)("code",u({parentName:"pre"},{className:"language-ts"}),"const eq = Eq.valueOfEq()\nconsole.log(eq(new Number(5), new Number(5)))\n// => true\nconsole.log(eq(new Number(5), new Number(3)))\n// => false\n")))),(0,a.kt)("h2",u({},{id:"constants"}),"Constants"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"objectIs"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"An Eq instance that uses ",(0,a.kt)("inlineCode",{parentName:"td"},"Object.is")," to determine if two objects are equal.")))))}g.isMDXComponent=!0}}]);