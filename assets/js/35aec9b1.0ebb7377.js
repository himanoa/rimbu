"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[51529],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),m=r,b=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return a?n.createElement(b,i(i({ref:t},c),{},{components:a})):n.createElement(b,i({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},73203:(e,t,a)=>{a.d(t,{r:()=>d});var n=a(67294),r=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(e,t,a)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a;const u={previewwindow:"console",view:"split",editorsize:"60",codemirror:"1",moduleview:"1"};function d(e){const t=(a=((e,t)=>{for(var a in t||(t={}))s.call(t,a)&&c(e,a,t[a]);if(l)for(var a of l(t))p.call(t,a)&&c(e,a,t[a]);return e})({},u),r={module:`/src/${e.path}`},o(a,i(r)));var a,r;const d=function(e){let t="",a="";for(const n in e)t+=`${a}${n}=${e[n]}`,a="&";return""===t?"":`?${t}`}(t),m=`https://codesandbox.io/embed/github/vitoke/rimbu-sandbox/tree/main${d}`,b=`https://codesandbox.io/s/github/vitoke/rimbu-sandbox/tree/main${d}`;return n.createElement(n.Fragment,null,n.createElement("a",{target:"_blank",className:"button button--secondary",href:b,style:{marginBottom:10}},"Open file below in new window with full type-check"),n.createElement("iframe",{src:m,className:"codesandbox-iframe",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}},34681:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>b,default:()=>g,frontMatter:()=>m,metadata:()=>y,toc:()=>h});var n=a(3905),r=a(73203),o=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,s=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,a)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,d=(e,t)=>{for(var a in t||(t={}))p.call(t,a)&&u(e,a,t[a]);if(s)for(var a of s(t))c.call(t,a)&&u(e,a,t[a]);return e};const m={id:"bimap",slug:"./bimap",title:"BiMap"},b="BiMap",y={unversionedId:"collections/bimap",id:"collections/bimap",title:"BiMap",description:"A BiMap is a bidirectional Map of keys and values, where each key has exactly one value, and each value has exactly one key. Furthermore, both keys and values are unique and there is a one-to-one mapping between keys and values.",source:"@site/docs/collections/bimap.mdx",sourceDirName:"collections",slug:"/collections/bimap",permalink:"/docs/collections/bimap",draft:!1,editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/collections/bimap.mdx",tags:[],version:"current",frontMatter:{id:"bimap",slug:"./bimap",title:"BiMap"},sidebar:"sidebar",previous:{title:"Edge Valued Graph",permalink:"/docs/collections/graph/edge-valued-graph"},next:{title:"BiMultiMap",permalink:"/docs/collections/bimultimap"}},f={},h=[{value:"When to use",id:"when-to-use",level:2},{value:"Exports",id:"exports",level:2},{value:"Usage",id:"usage",level:2},{value:"Creation",id:"creation",level:3},{value:"Query",id:"query",level:3},{value:"Motivation",id:"motivation",level:3},{value:"Builder",id:"builder",level:3}],v={toc:h};function g(e){var t,a=e,{components:o}=a,u=((e,t)=>{var a={};for(var n in e)p.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&s)for(var n of s(e))t.indexOf(n)<0&&c.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=d(d({},v),u),i(t,l({components:o,mdxType:"MDXLayout"}))),(0,n.kt)("h1",d({},{id:"bimap"}),"BiMap"),(0,n.kt)("p",null,"A BiMap is a bidirectional Map of keys and values, where each key has exactly one value, and each value has exactly one key. Furthermore, both keys and values are unique and there is a one-to-one mapping between keys and values."),(0,n.kt)("h2",d({},{id:"when-to-use"}),"When to use"),(0,n.kt)("p",null,"This ",(0,n.kt)("inlineCode",{parentName:"p"},"BiMap")," can be useful when you have a domain in which there needs to be a strict one-to-one mapping between two types of entities. For example, say we have a BiMap between persons and seats in a room. A person can have only one seat, and a seat can have only one person. Using a BiMap, this restriction is guaranteed. If we assign seat 1 to person A, and then assign seat 5 to person A, seat 1 will automatically be vacant. In a similar way, if we assign seat 1 to person A, and then seat 1 to person B, person A no longer has a seat."),(0,n.kt)("admonition",d({},{type:"info"}),(0,n.kt)("p",{parentName:"admonition"},"The BiMap internally uses two 'normal' immutable Maps to maintain this guarantee, and therefore also provides fast look-up times both for keys and values. Insertion time and memory usage are double that of a normal Map.")),(0,n.kt)("h2",d({},{id:"exports"}),"Exports"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,n.kt)("em",{parentName:"p"},"concrete")," BiMap TypeScript types:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",d({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",d({parentName:"tr"},{align:null}),(0,n.kt)("a",d({parentName:"td"},{href:"/api/rimbu/bimap/BiMap/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"BiMap<K, V>"))),(0,n.kt)("td",d({parentName:"tr"},{align:null}),"a generic ",(0,n.kt)("inlineCode",{parentName:"td"},"BiMap")," between keys of type K and values of type V")))),(0,n.kt)("h2",d({},{id:"usage"}),"Usage"),(0,n.kt)("h3",d({},{id:"creation"}),"Creation"),(0,n.kt)(r.r,{path:"bimap/create.ts",mdxType:"SandBox"}),(0,n.kt)("h3",d({},{id:"query"}),"Query"),(0,n.kt)(r.r,{path:"bimap/query.ts",mdxType:"SandBox"}),(0,n.kt)("h3",d({},{id:"motivation"}),"Motivation"),(0,n.kt)(r.r,{path:"bimap/motivation.ts",mdxType:"SandBox"}),(0,n.kt)("h3",d({},{id:"builder"}),"Builder"),(0,n.kt)(r.r,{path:"bimap/build.ts",mdxType:"SandBox"}))}g.isMDXComponent=!0}}]);