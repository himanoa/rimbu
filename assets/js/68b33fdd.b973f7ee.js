"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[70712],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,f=u["".concat(l,".").concat(d)]||u[d]||s[d]||i;return a?r.createElement(f,p(p({ref:t},m),{},{components:a})):r.createElement(f,p({ref:t},m))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,p=new Array(i);p[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,p[1]=o;for(var c=2;c<i;c++)p[c]=a[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9677:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>b,default:()=>v,frontMatter:()=>f,metadata:()=>y,toc:()=>k});var r=a(3905),n=Object.defineProperty,i=Object.defineProperties,p=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,m=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,u=(e,t)=>{for(var a in t||(t={}))l.call(t,a)&&m(e,a,t[a]);if(o)for(var a of o(t))c.call(t,a)&&m(e,a,t[a]);return e},s=(e,t)=>i(e,p(t)),d=(e,t)=>{var a={};for(var r in e)l.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&o)for(var r of o(e))t.indexOf(r)<0&&c.call(e,r)&&(a[r]=e[r]);return a};const f={title:"BiMap (namespace)",slug:"/rimbu/core/BiMap/namespace"},b="namespace BiMap",y={unversionedId:"rimbu_core/BiMap/index",id:"rimbu_core/BiMap/index",title:"BiMap (namespace)",description:"A type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the BiMap documentation and the BiMap API documentation",source:"@site/api/rimbu_core/BiMap/index.mdx",sourceDirName:"rimbu_core/BiMap",slug:"/rimbu/core/BiMap/namespace",permalink:"/api/rimbu/core/BiMap/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"BiMap (namespace)",slug:"/rimbu/core/BiMap/namespace"},sidebar:"defaultSidebar",previous:{title:"AsyncTransformer",permalink:"/api/rimbu/core/AsyncTransformer/type"},next:{title:"BiMap.Builder<K,V>",permalink:"/api/rimbu/core/BiMap/Builder/interface"}},h={},k=[{value:"Interfaces",id:"interfaces",level:2}],g={toc:k},M="wrapper";function v(e){var t=e,{components:a}=t,n=d(t,["components"]);return(0,r.kt)(M,s(u(u({},g),n),{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",u({},{id:"namespace-bimap"}),(0,r.kt)("inlineCode",{parentName:"h1"},"namespace BiMap")),(0,r.kt)("p",null,"A type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the ",(0,r.kt)("a",u({parentName:"p"},{href:"https://rimbu.org/docs/collections/bimap"}),"BiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"p"},{href:"https://rimbu.org/api/rimbu/bimap/BiMap/interface"}),"BiMap API documentation")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,r.kt)("a",u({parentName:"p"},{href:"/api/rimbu/core/BiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMap<K,V>"))),(0,r.kt)("h2",u({},{id:"interfaces"}),"Interfaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMap/Builder/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMap.Builder<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A mutable ",(0,r.kt)("inlineCode",{parentName:"td"},"BiMap")," builder used to efficiently create new immutable instances. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimap"}),"BiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimap/BiMap/Builder/interface"}),"BiMap.Builder API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMap/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMap.Context<UK,UV,Tp>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"The BiMap's Context instance that serves as a factory for all related immutable instances and builders.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMap/NonEmpty/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMap.NonEmpty<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimap"}),"BiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimap/BiMap/interface"}),"BiMap API documentation")," *")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMap/Types/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMap.Types"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}v.isMDXComponent=!0}}]);