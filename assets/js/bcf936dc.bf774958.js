(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[9266],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return d},kt:function(){return p}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(a),p=r,b=u["".concat(s,".").concat(p)]||u[p]||m[p]||o;return a?n.createElement(b,l(l({ref:t},d),{},{components:a})):n.createElement(b,l({ref:t},d))}));function p(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1592:function(e,t,a){"use strict";a.d(t,{G:function(){return o}});var n=a(7294);function r(e){return e.replace(/</g,"%3C").replace(/>/g,"%3E")}function o(e){var t=r("https://g.gravizo.com/svg?\n  @startuml;\n  skinparam monochrome true;\n  skinparam backgroundColor none;\n  skinparam classBackgroundColor darkslategrey;\n  skinparam classBorderColor gray;\n  skinparam classFontColor lightgray;\n  skinparam classStereotypeFontColor darkgray;\n  skinparam arrowColor lightgray;\n  skinparam linetype ortho;\n  "+e.contents+"\n  @enduml;");return n.createElement("img",{src:t,className:"diagram"})}},3664:function(e,t,a){"use strict";a.d(t,{r:function(){return o}});var n=a(7294),r={previewwindow:"console",view:"split",editorsize:"60",codemirror:"1",moduleview:"1"};function o(e){var t=function(e){var t="",a="";for(var n in e)t+=""+a+n+"="+e[n],a="&";return""===t?"":"?"+t}(Object.assign({},r,{module:"/src/"+e.path})),a="https://codesandbox.io/embed/github/vitoke/rimbu-sandbox/tree/main"+t,o="https://codesandbox.io/s/github/vitoke/rimbu-sandbox/tree/main"+t;return n.createElement(n.Fragment,null,n.createElement("a",{target:"_blank",className:"button button--secondary",href:o,style:{marginBottom:10}},"Open file below in new window with full type-check"),n.createElement("iframe",{src:a,className:"codesandbox-iframe",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}},5062:function(e,t,a){"use strict";a.r(t),a.d(t,{contentTitle:function(){return d},default:function(){return b},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return u}});var n=a(2122),r=a(9756),o=(a(7294),a(3905)),l=a(1592),i=a(3664),s=["components"],c={id:"table",slug:"./table",title:"Table"},d="Table",m={unversionedId:"collections/table",id:"collections/table",isDocsHomePage:!1,title:"Table",description:"A Table is an immutable 2-dimensional Map, containing row keys and column keys, where a combination of a row and column key can contain one value.",source:"@site/docs/collections/table.mdx",sourceDirName:"collections",slug:"/collections/table",permalink:"/docs/collections/table",editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/collections/table.mdx",tags:[],version:"current",frontMatter:{id:"table",slug:"./table",title:"Table"},sidebar:"sidebar",previous:{title:"Stream",permalink:"/docs/collections/stream"},next:{title:"Overview",permalink:"/docs/deep/overview"}},u=[{value:"When to use",id:"when-to-use",children:[]},{value:"Exports",id:"exports",children:[]},{value:"Inheritance",id:"inheritance",children:[]},{value:"Usage",id:"usage",children:[{value:"Creation",id:"creation",children:[]},{value:"Query",id:"query",children:[]},{value:"Builder",id:"builder",children:[]}]}],p={toc:u};function b(e){var t=e.components,a=(0,r.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"table"},"Table"),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"Table")," is an immutable 2-dimensional Map, containing row keys and column keys, where a combination of a row and column key can contain one value."),(0,o.kt)("h2",{id:"when-to-use"},"When to use"),(0,o.kt)("p",null,"The Table structure is useful in cases where there are two properties that in combination have some value. For example, a school with students needs to store a grade for each class the student takes. The school is only interested in the last grade. In this case, a Table with the student as row key, the class as column key, and the grade as value would allow easy access to all the grades."),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Internally, a ",(0,o.kt)("inlineCode",{parentName:"p"},"Table<R, C, V>")," is built on: ",(0,o.kt)("inlineCode",{parentName:"p"},"RMap<R, RMap<C, V>>"),". So it is a Map of Maps. The ",(0,o.kt)("inlineCode",{parentName:"p"},".rowMap")," property gives direct access to this Map, and can sometimes provide more convenient ways to access the contained data."))),(0,o.kt)("h2",{id:"exports"},"Exports"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,o.kt)("em",{parentName:"p"},"abstract")," Table types:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"VariantTable<R, C, V>")),(0,o.kt)("td",{parentName:"tr",align:null},"a type-variant ",(0,o.kt)("inlineCode",{parentName:"td"},"Table")," with row keys R, column keys C, and values V")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"Table<R, C, V>")),(0,o.kt)("td",{parentName:"tr",align:null},"a generic ",(0,o.kt)("inlineCode",{parentName:"td"},"Table")," with row keys R, column keys C, and values V")))),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package exports the following ",(0,o.kt)("em",{parentName:"p"},"concrete")," Table types:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"HashTableHashColumn<R, C, V>")),(0,o.kt)("td",{parentName:"tr",align:null},"a ",(0,o.kt)("inlineCode",{parentName:"td"},"Table")," where the row keys and column keys are hashed")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"HashTableSortedColumn<R, C, V>")),(0,o.kt)("td",{parentName:"tr",align:null},"a ",(0,o.kt)("inlineCode",{parentName:"td"},"Table")," where the row keys are hashed and the column keys are sorted")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"SortedTableHashColumn<R, C, V>")),(0,o.kt)("td",{parentName:"tr",align:null},"a ",(0,o.kt)("inlineCode",{parentName:"td"},"Table")," where the row keys are sorted and the column keys are hashed")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"SortedTableSortedColumn<R, C, V>")),(0,o.kt)("td",{parentName:"tr",align:null},"a ",(0,o.kt)("inlineCode",{parentName:"td"},"Table")," where the row keys and column keys are sorted")))),(0,o.kt)("h2",{id:"inheritance"},"Inheritance"),(0,o.kt)(l.G,{contents:"\ninterface Streamable<[R, C, V]>;\ninterface VariantTable<R, C, V>;\nabstract Table<R, C, V>;\nclass HashTableHashColumn<R, C, V>;\nclass HashTableSortedColumn<R, C, V>;\nclass SortedTableHashColumn<R, C, V>;\nclass SortedTableSortedColumn<R, C, V>;\n\nStreamable <|.. VariantTable;\nVariantTable <|-- Table;\nTable <|-- HashTableHashColumn;\nTable <|-- HashTableSortedColumn;\nTable <|-- SortedTableHashColumn;\nTable <|-- SortedTableSortedColumn;\n",mdxType:"UmlGraph"}),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("h3",{id:"creation"},"Creation"),(0,o.kt)(i.r,{path:"table/create.ts",mdxType:"SandBox"}),(0,o.kt)("h3",{id:"query"},"Query"),(0,o.kt)(i.r,{path:"table/query.ts",mdxType:"SandBox"}),(0,o.kt)("h3",{id:"builder"},"Builder"),(0,o.kt)(i.r,{path:"table/build.ts",mdxType:"SandBox"}))}b.isMDXComponent=!0}}]);