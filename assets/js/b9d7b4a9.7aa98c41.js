"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[47034],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>s});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),l=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},c=function(e){var t=l(e.components);return r.createElement(m.Provider,{value:t},e.children)},y="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,m=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),y=l(a),d=n,s=y["".concat(m,".").concat(d)]||y[d]||u[d]||i;return a?r.createElement(s,p(p({ref:t},c),{},{components:a})):r.createElement(s,p({ref:t},c))}));function s(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,p=new Array(i);p[0]=d;var o={};for(var m in t)hasOwnProperty.call(t,m)&&(o[m]=t[m]);o.originalType=e,o[y]="string"==typeof e?e:n,p[1]=o;for(var l=2;l<i;l++)p[l]=a[l];return r.createElement.apply(null,p)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},44472:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>x,contentTitle:()=>f,default:()=>M,frontMatter:()=>s,metadata:()=>b,toc:()=>k});var r=a(3905),n=Object.defineProperty,i=Object.defineProperties,p=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,c=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,y=(e,t)=>{for(var a in t||(t={}))m.call(t,a)&&c(e,a,t[a]);if(o)for(var a of o(t))l.call(t,a)&&c(e,a,t[a]);return e},u=(e,t)=>i(e,p(t)),d=(e,t)=>{var a={};for(var r in e)m.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&o)for(var r of o(e))t.indexOf(r)<0&&l.call(e,r)&&(a[r]=e[r]);return a};const s={title:"ProximityMap (namespace)",slug:"/rimbu/proximity/map/ProximityMap/namespace"},f="namespace ProximityMap",b={unversionedId:"rimbu_proximity/map/ProximityMap/index",id:"rimbu_proximity/map/ProximityMap/index",title:"ProximityMap (namespace)",description:"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the ProximityMap API documentation",source:"@site/api/rimbu_proximity/map/ProximityMap/index.mdx",sourceDirName:"rimbu_proximity/map/ProximityMap",slug:"/rimbu/proximity/map/ProximityMap/namespace",permalink:"/api/rimbu/proximity/map/ProximityMap/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"ProximityMap (namespace)",slug:"/rimbu/proximity/map/ProximityMap/namespace"},sidebar:"defaultSidebar",previous:{title:"@rimbu/proximity/map",permalink:"/api/rimbu/proximity/map"},next:{title:"ProximityMap.Builder<K,V>",permalink:"/api/rimbu/proximity/map/ProximityMap/Builder/interface"}},x={},k=[{value:"Interfaces",id:"interfaces",level:2}],h={toc:k},P="wrapper";function M(e){var t=e,{components:a}=t,n=d(t,["components"]);return(0,r.kt)(P,u(y(y({},h),n),{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",y({},{id:"namespace-proximitymap"}),(0,r.kt)("inlineCode",{parentName:"h1"},"namespace ProximityMap")),(0,r.kt)("p",null,"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",y({parentName:"p"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",y({parentName:"p"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),"ProximityMap API documentation")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,r.kt)("a",y({parentName:"p"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ProximityMap<K,V>"))),(0,r.kt)("h2",y({},{id:"interfaces"}),"Interfaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",y({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",y({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",y({parentName:"tr"},{align:null}),(0,r.kt)("a",y({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/Builder/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ProximityMap.Builder<K,V>"))),(0,r.kt)("td",y({parentName:"tr"},{align:null}),"A mutable ",(0,r.kt)("inlineCode",{parentName:"td"},"ProximityMap")," builder used to efficiently create new immutable instances. See the ",(0,r.kt)("a",y({parentName:"td"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",y({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/Builder/interface"}),"ProximityMap.Builder API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",y({parentName:"tr"},{align:null}),(0,r.kt)("a",y({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ProximityMap.Context<UK>"))),(0,r.kt)("td",y({parentName:"tr"},{align:null}),"A context instance for a ",(0,r.kt)("inlineCode",{parentName:"td"},"ProximityMap")," that acts as a factory for every instance of this type of collection.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",y({parentName:"tr"},{align:null}),(0,r.kt)("a",y({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/NonEmpty/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ProximityMap.NonEmpty<K,V>"))),(0,r.kt)("td",y({parentName:"tr"},{align:null}),"A ",(0,r.kt)("strong",{parentName:"td"},"non-empty")," type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",y({parentName:"tr"},{align:null}),"See the ",(0,r.kt)("a",y({parentName:"td"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",y({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),"ProximityMap API documentation")),(0,r.kt)("td",y({parentName:"tr"},{align:null}))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",y({parentName:"tr"},{align:null}),(0,r.kt)("a",y({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/Types/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ProximityMap.Types"))),(0,r.kt)("td",y({parentName:"tr"},{align:null}),"Utility interface that provides higher-level types for this collection.")))))}M.isMDXComponent=!0}}]);