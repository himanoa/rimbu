(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[4458],{3905:function(e,a,r){"use strict";r.d(a,{Zo:function(){return d},kt:function(){return u}});var t=r(7294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function o(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?o(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function p(e,a){if(null==e)return{};var r,t,n=function(e,a){if(null==e)return{};var r,t,n={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=t.createContext({}),s=function(e){var a=t.useContext(l),r=a;return e&&(r="function"==typeof e?e(a):i(i({},a),e)),r},d=function(e){var a=s(e.components);return t.createElement(l.Provider,{value:a},e.children)},h={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},c=t.forwardRef((function(e,a){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),c=s(r),u=n,m=c["".concat(l,".").concat(u)]||c[u]||h[u]||o;return r?t.createElement(m,i(i({ref:a},d),{},{components:r})):t.createElement(m,i({ref:a},d))}));function u(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=c;var p={};for(var l in a)hasOwnProperty.call(a,l)&&(p[l]=a[l]);p.originalType=e,p.mdxType="string"==typeof e?e:n,i[1]=p;for(var s=2;s<o;s++)i[s]=r[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},1592:function(e,a,r){"use strict";r.d(a,{G:function(){return o}});var t=r(7294);function n(e){return e.replace(/</g,"%3C").replace(/>/g,"%3E")}function o(e){var a=n("https://g.gravizo.com/svg?\n  @startuml;\n  skinparam monochrome true;\n  skinparam backgroundColor none;\n  skinparam classBackgroundColor darkslategrey;\n  skinparam classBorderColor gray;\n  skinparam classFontColor lightgray;\n  skinparam classStereotypeFontColor darkgray;\n  skinparam arrowColor lightgray;\n  skinparam linetype ortho;\n  "+e.contents+"\n  @enduml;");return t.createElement("img",{src:a,className:"diagram"})}},3455:function(e,a,r){"use strict";r.r(a),r.d(a,{contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return h}});var t=r(2122),n=r(9756),o=(r(7294),r(3905)),i=r(1592),p=["components"],l={id:"graph",slug:"../graph",title:"Overview",sidebar_position:1},s="Graph<N>",d={unversionedId:"collections/graph/graph",id:"collections/graph/graph",isDocsHomePage:!1,title:"Overview",description:"A Graph is a data structure consisting of nodes that can be connected through edges. Each node has a unique value or identifier. Edges can be directed, in which case we will call it an Arrow Graph, or undirected, in which case we will call it an Edge Graph. Furthermore, edges and arrows can also have values, in which case we call it a Valued Graph.",source:"@site/docs/collections/graph/graph.mdx",sourceDirName:"collections/graph",slug:"/collections/graph",permalink:"/docs/collections/graph",editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/collections/graph/graph.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"graph",slug:"../graph",title:"Overview",sidebar_position:1},sidebar:"sidebar",previous:{title:"BiMultiMap",permalink:"/docs/collections/bimultimap"},next:{title:"Arrow Graph",permalink:"/docs/collections/graph/arrow-graph"}},h=[{value:"Graph types",id:"graph-types",children:[{value:"Arrow Graph",id:"arrow-graph",children:[]},{value:"Edge Graph",id:"edge-graph",children:[]}]},{value:"Abstract Graph types",id:"abstract-graph-types",children:[]},{value:"Non-valued Graph types",id:"non-valued-graph-types",children:[]},{value:"Valued Graph types",id:"valued-graph-types",children:[]}],c={toc:h};function u(e){var a=e.components,r=(0,n.Z)(e,p);return(0,o.kt)("wrapper",(0,t.Z)({},c,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"graphn"},(0,o.kt)("inlineCode",{parentName:"h1"},"Graph<N>")),(0,o.kt)("p",null,"A Graph is a data structure consisting of nodes that can be connected through edges. Each node has a unique value or identifier. Edges can be directed, in which case we will call it an Arrow Graph, or undirected, in which case we will call it an Edge Graph. Furthermore, edges and arrows can also have values, in which case we call it a Valued Graph."),(0,o.kt)("h2",{id:"graph-types"},"Graph types"),(0,o.kt)("p",null,"Rimbu offers TypeScript implementations for many types of immutable graphs, the main characteristics being valued or non-valued, and directed or undirected:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Edge property"),(0,o.kt)("th",{parentName:"tr",align:null},"Non-valued"),(0,o.kt)("th",{parentName:"tr",align:null},"Valued"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Directed"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./graph/arrow-graph"},(0,o.kt)("inlineCode",{parentName:"a"},"ArrowGraph<N>"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./graph/arrow-valued-graph"},(0,o.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraph<N, V>")))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Undirected"),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./graph/edge-graph"},(0,o.kt)("inlineCode",{parentName:"a"},"EdgeGraph<N>"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"./graph/edge-valued-graph"},(0,o.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraph<N, V>")))))),(0,o.kt)("h3",{id:"arrow-graph"},"Arrow Graph"),(0,o.kt)("p",null,"Properties of an ",(0,o.kt)("strong",{parentName:"p"},"Arrow Graph")," (directed graph) in Rimbu:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"An Arrow Graph consists of 0 or more nodes, and 0 or more arrows"),(0,o.kt)("li",{parentName:"ul"},"Each node in an Arrow Graph has a unique value"),(0,o.kt)("li",{parentName:"ul"},"Each arrow has a start node, and an end node"),(0,o.kt)("li",{parentName:"ul"},"An arrow can connect a node to itself, but only once"),(0,o.kt)("li",{parentName:"ul"},"Two different arrows cannot have the same start node AND end node")),(0,o.kt)("p",null,"Arrow Graphs are useful when instances of one entity type have a directional relation. In an arrow graph, A -> B does not imply B -> A."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Examples of Arrow Graph applications are:"),(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"A site's web pages and links between them"),(0,o.kt)("li",{parentName:"ul"},"Public transit stops and connections (some may be one-way)")))),(0,o.kt)("h3",{id:"edge-graph"},"Edge Graph"),(0,o.kt)("p",null,"An ",(0,o.kt)("strong",{parentName:"p"},"Edge graph")," (undirected graph) has the following properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"An Edge Graph consists of 0 or more nodes, and 0 or more edges"),(0,o.kt)("li",{parentName:"ul"},"Each node in an Edge Graph has a unique value"),(0,o.kt)("li",{parentName:"ul"},"Each edge has 2 nodes indicating a bi-directional connection without direction"),(0,o.kt)("li",{parentName:"ul"},"An edge can connect a node to itself, but only once"),(0,o.kt)("li",{parentName:"ul"},"Two different edges cannot have the same 2 nodes even if the nodes are in reverse order")),(0,o.kt)("p",null,"Edge Graphs are useful when instances of one entity type have a bidirectional relation if they are related. In an edge graph, A -> B also implies that B -> A."),(0,o.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Examples of Edge Graph applications are:"),(0,o.kt)("ul",{parentName:"div"},(0,o.kt)("li",{parentName:"ul"},"A group of persons where connections indicate that those persons are friends."),(0,o.kt)("li",{parentName:"ul"},"Distances between cities")))),(0,o.kt)("h2",{id:"abstract-graph-types"},"Abstract Graph types"),(0,o.kt)("p",null,"To support a large variety of use cases, there are quite a number of abstract graph types available. These cannot be used to construct Graphs, but the can be convenient when writing generic code operating on Graphs."),(0,o.kt)(i.G,{contents:"\ninterface Streamable<GraphElement<N, V>>;\n\nabstract VariantGraph<N>;\nabstract Graph<N>;\nabstract ArrowGraph<N>;\nabstract EdgeGraph<N>;\n\nabstract VariantValuedGraph<N, V>;\nabstract ValuedGraph<N, V>;\nabstract ArrowValuedGraph<N, V>;\nabstract EdgeValuedGraph<N, V>;\n\nStreamable <|.. VariantGraph;\n\nVariantGraph <|-- Graph;\nGraph <|-- ArrowGraph;\nGraph <|-- EdgeGraph;\n\nVariantGraph <|-- VariantValuedGraph;\nVariantValuedGraph <|-- ValuedGraph;\nValuedGraph <|-- ArrowValuedGraph;\nValuedGraph <|-- EdgeValuedGraph;\n",mdxType:"UmlGraph"}),(0,o.kt)("h2",{id:"non-valued-graph-types"},"Non-valued Graph types"),(0,o.kt)("p",null,"Here is an overview of the available concrete non-valued graph types. The concrete types have constructor methods to create graph instances."),(0,o.kt)(i.G,{contents:"\ninterface Streamable<GraphElement<N>>;\n\nabstract VariantGraph<N>;\nabstract Graph<N>;\nabstract ArrowGraph<N>;\nclass ArrowGraphHashed<N>;\nclass ArrowGraphSorted<N>;\nabstract EdgeGraph<N>;\nclass EdgeGraphHashed<N>;\nclass EdgeGraphSorted<N>;\n\nStreamable <|.. VariantGraph;\n\nVariantGraph <|-- Graph;\nGraph <|-- ArrowGraph;\nArrowGraph <|-- ArrowGraphHashed;\nArrowGraph <|-- ArrowGraphSorted;\nGraph <|-- EdgeGraph;\nEdgeGraph <|-- EdgeGraphHashed;\nEdgeGraph <|-- EdgeGraphSorted;\n",mdxType:"UmlGraph"}),(0,o.kt)("h2",{id:"valued-graph-types"},"Valued Graph types"),(0,o.kt)("p",null,"Here is an overview of the available concrete valued graph types. The concrete types have constructor methods to create graph instances."),(0,o.kt)(i.G,{contents:"\ninterface Streamable<GraphElement<N, V>>;\n\nabstract VariantGraph<N>;\n\nabstract VariantValuedGraph<N, V>;\nabstract ValuedGraph<N, V>;\nabstract ArrowValuedGraph<N, V>;\nclass ArrowValuedGraphHashed<N, V>;\nclass ArrowValuedGraphSorted<N, V>;\nabstract EdgeValuedGraph<N, V>;\nclass EdgeValuedGraphHashed<N, V>;\nclass EdgeValuedGraphSorted<N, V>;\n\nStreamable <|.. VariantGraph;\n\nVariantGraph <|-- VariantValuedGraph;\nVariantValuedGraph <|-- ValuedGraph;\nValuedGraph <|-- ArrowValuedGraph;\nArrowValuedGraph <|-- ArrowValuedGraphHashed;\nArrowValuedGraph <|-- ArrowValuedGraphSorted;\nValuedGraph <|-- EdgeValuedGraph;\nEdgeValuedGraph <|-- EdgeValuedGraphHashed;\nEdgeValuedGraph <|-- EdgeValuedGraphSorted;\n",mdxType:"UmlGraph"}))}u.isMDXComponent=!0}}]);