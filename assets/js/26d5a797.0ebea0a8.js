"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[43717],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return s}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),m=c(r),s=a,d=m["".concat(p,".").concat(s)]||m[s]||f[s]||i;return r?n.createElement(d,l(l({ref:t},u),{},{components:r})):n.createElement(d,l({ref:t},u))}));function s(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},45702:function(e,t,r){r.r(t),r.d(t,{assets:function(){return b},contentTitle:function(){return s},default:function(){return O},frontMatter:function(){return m},metadata:function(){return d},toc:function(){return y}});var n=r(3905),a=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,r)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,f=(e,t)=>{for(var r in t||(t={}))p.call(t,r)&&u(e,r,t[r]);if(o)for(var r of o(t))c.call(t,r)&&u(e,r,t[r]);return e};const m={title:"Literal<T>",slug:"/rimbu/deep/Literal/interface"},s="interface Literal<T>",d={unversionedId:"rimbu_deep/Literal.interface",id:"rimbu_deep/Literal.interface",title:"Literal<T>",description:"Type to represent Literal values for the match and patch functions.",source:"@site/api/rimbu_deep/Literal.interface.mdx",sourceDirName:"rimbu_deep",slug:"/rimbu/deep/Literal/interface",permalink:"/api/rimbu/deep/Literal/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"Literal<T>",slug:"/rimbu/deep/Literal/interface"},sidebar:"defaultSidebar",previous:{title:"Value",permalink:"/api/rimbu/deep/Literal/Value/type"},next:{title:"Match (namespace)",permalink:"/api/rimbu/deep/Match/namespace"}},b={},y=[{value:"Type parameters",id:"type-parameters",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>[LITERAL]</code>",id:"literal",level:3},{value:"Definition",id:"definition",level:4}],v={toc:y};function O(e){var t,r=e,{components:a}=r,u=((e,t)=>{var r={};for(var n in e)p.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&o)for(var n of o(e))t.indexOf(n)<0&&c.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=f(f({},v),u),i(t,l({components:a,mdxType:"MDXLayout"}))),(0,n.kt)("h1",f({},{id:"interface-literalt"}),(0,n.kt)("inlineCode",{parentName:"h1"},"interface Literal<T>")),(0,n.kt)("p",null,"Type to represent Literal values for the match and patch functions."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion namespace:")," ",(0,n.kt)("a",f({parentName:"p"},{href:"/api/rimbu/deep/Literal/namespace"}),"Literal")),(0,n.kt)("h3",f({},{id:"type-parameters"}),"Type parameters"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",f({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",f({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",f({parentName:"tr"},{align:null}),"T"),(0,n.kt)("td",f({parentName:"tr"},{align:null}),"undocumented")))),(0,n.kt)("h2",f({},{id:"properties"}),"Properties"),(0,n.kt)("details",null,(0,n.kt)("summary",null,(0,n.kt)("h3",f({},{id:"literal"}),(0,n.kt)("inlineCode",{parentName:"h3"},"[LITERAL]")),(0,n.kt)("p",null,"undocumented")),(0,n.kt)("h4",f({},{id:"definition"}),"Definition"),(0,n.kt)("code",null,(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"readonly [LITERAL]: T;")))))}O.isMDXComponent=!0}}]);