"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[58439],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>b});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var m=r.createContext({}),u=function(e){var t=r.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=u(e.components);return r.createElement(m.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,m=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(a),s=n,b=c["".concat(m,".").concat(s)]||c[s]||d[s]||o;return a?r.createElement(b,l(l({ref:t},p),{},{components:a})):r.createElement(b,l({ref:t},p))}));function b(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,l=new Array(o);l[0]=s;var i={};for(var m in t)hasOwnProperty.call(t,m)&&(i[m]=t[m]);i.originalType=e,i[c]="string"==typeof e?e:n,l[1]=i;for(var u=2;u<o;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}s.displayName="MDXCreateElement"},22588:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>f,default:()=>v,frontMatter:()=>b,metadata:()=>y,toc:()=>k});var r=a(3905),n=Object.defineProperty,o=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,p=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,c=(e,t)=>{for(var a in t||(t={}))m.call(t,a)&&p(e,a,t[a]);if(i)for(var a of i(t))u.call(t,a)&&p(e,a,t[a]);return e},d=(e,t)=>o(e,l(t)),s=(e,t)=>{var a={};for(var r in e)m.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&i)for(var r of i(e))t.indexOf(r)<0&&u.call(e,r)&&(a[r]=e[r]);return a};const b={title:"SortedTableHashColumn (namespace)",slug:"/rimbu/core/SortedTableHashColumn/namespace"},f="namespace SortedTableHashColumn",y={unversionedId:"rimbu_core/SortedTableHashColumn/index",id:"rimbu_core/SortedTableHashColumn/index",title:"SortedTableHashColumn (namespace)",description:"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the Table documentation and the SortedTableHashColumn API documentation",source:"@site/api/rimbu_core/SortedTableHashColumn/index.mdx",sourceDirName:"rimbu_core/SortedTableHashColumn",slug:"/rimbu/core/SortedTableHashColumn/namespace",permalink:"/api/rimbu/core/SortedTableHashColumn/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedTableHashColumn (namespace)",slug:"/rimbu/core/SortedTableHashColumn/namespace"},sidebar:"defaultSidebar",previous:{title:"SortedSet",permalink:"/api/rimbu/core/SortedSet/var"},next:{title:"SortedTableHashColumn.Builder<R,C,V>",permalink:"/api/rimbu/core/SortedTableHashColumn/Builder/interface"}},h={},k=[{value:"Interfaces",id:"interfaces",level:2}],C={toc:k},T="wrapper";function v(e){var t=e,{components:a}=t,n=s(t,["components"]);return(0,r.kt)(T,d(c(c({},C),n),{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",c({},{id:"namespace-sortedtablehashcolumn"}),(0,r.kt)("inlineCode",{parentName:"h1"},"namespace SortedTableHashColumn")),(0,r.kt)("p",null,"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableHashColumn/interface"}),"SortedTableHashColumn API documentation"),"  "),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,r.kt)("a",c({parentName:"p"},{href:"/api/rimbu/core/SortedTableHashColumn/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedTableHashColumn<R,C,V>"))),(0,r.kt)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedTableHashColumn/Builder/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedTableHashColumn.Builder<R,C,V>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedTableHashColumn/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedTableHashColumn.Context<UR,UC>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedTableHashColumn/NonEmpty/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedTableHashColumn.NonEmpty<R,C,V>"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),(0,r.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedTableHashColumn/Types/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedTableHashColumn.Types"))),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}v.isMDXComponent=!0}}]);