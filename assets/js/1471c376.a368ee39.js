"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[66108],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},p=Object.keys(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(a=0;a<p.length;a++)r=p[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=a.createContext({}),c=function(e){var t=a.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,p=e.originalType,d=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),m=c(r),s=n,f=m["".concat(d,".").concat(s)]||m[s]||u[s]||p;return r?a.createElement(f,i(i({ref:t},l),{},{components:r})):a.createElement(f,i({ref:t},l))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var p=r.length,i=new Array(p);i[0]=s;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o[m]="string"==typeof e?e:n,i[1]=o;for(var c=2;c<p;c++)i[c]=r[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},28536:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>O,contentTitle:()=>y,default:()=>v,frontMatter:()=>f,metadata:()=>b,toc:()=>h});var a=r(3905),n=Object.defineProperty,p=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,d=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,l=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,m=(e,t)=>{for(var r in t||(t={}))d.call(t,r)&&l(e,r,t[r]);if(o)for(var r of o(t))c.call(t,r)&&l(e,r,t[r]);return e},u=(e,t)=>p(e,i(t)),s=(e,t)=>{var r={};for(var a in e)d.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&o)for(var a of o(e))t.indexOf(a)<0&&c.call(e,a)&&(r[a]=e[a]);return r};const f={title:"OrderedMap (namespace)",slug:"/rimbu/core/OrderedMap/namespace"},y="namespace OrderedMap",b={unversionedId:"rimbu_core/OrderedMap/index",id:"rimbu_core/OrderedMap/index",title:"OrderedMap (namespace)",description:"A type-invariant immutable Ordered Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the Map documentation and the OrderedMap API documentation",source:"@site/api/rimbu_core/OrderedMap/index.mdx",sourceDirName:"rimbu_core/OrderedMap",slug:"/rimbu/core/OrderedMap/namespace",permalink:"/api/rimbu/core/OrderedMap/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"OrderedMap (namespace)",slug:"/rimbu/core/OrderedMap/namespace"},sidebar:"defaultSidebar",previous:{title:"OrderedHashSet",permalink:"/api/rimbu/core/OrderedHashSet/var"},next:{title:"OrderedMap.Builder<K,V>",permalink:"/api/rimbu/core/OrderedMap/Builder/interface"}},O={},h=[{value:"Interfaces",id:"interfaces",level:2}],k={toc:h},M="wrapper";function v(e){var t=e,{components:r}=t,n=s(t,["components"]);return(0,a.kt)(M,u(m(m({},k),n),{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",m({},{id:"namespace-orderedmap"}),(0,a.kt)("inlineCode",{parentName:"h1"},"namespace OrderedMap")),(0,a.kt)("p",null,"A type-invariant immutable Ordered Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedMap/interface"}),"OrderedMap API documentation"),"  "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/OrderedMap/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedMap<K,V>"))),(0,a.kt)("h2",m({},{id:"interfaces"}),"Interfaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/OrderedMap/Builder/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedMap.Builder<K,V>"))),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"A mutable ",(0,a.kt)("inlineCode",{parentName:"td"},"OrderedMap")," builder used to efficiently create new immutable instances. See the ",(0,a.kt)("a",m({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.kt)("a",m({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedMap/Builder/interface"}),"OrderedMap.Builder API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/OrderedMap/Context/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedMap.Context<UK>"))),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"A context instance for an ",(0,a.kt)("inlineCode",{parentName:"td"},"OrderedMap")," that acts as a factory for every instance of this type of collection.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/OrderedMap/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedMap.NonEmpty<K,V>"))),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable Ordered Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.kt)("a",m({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.kt)("a",m({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedMap/interface"}),"OrderedMap API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/OrderedMap/Types/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedMap.Types"))),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}v.isMDXComponent=!0}}]);