"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[79665],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),p=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=p(e.components);return n.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=u(e,["components","mdxType","originalType","parentName"]),f=p(r),d=o,s=f["".concat(c,".").concat(d)]||f[d]||m[d]||a;return r?n.createElement(s,i(i({ref:t},l),{},{components:r})):n.createElement(s,i({ref:t},l))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var u={};for(var c in t)hasOwnProperty.call(t,c)&&(u[c]=t[c]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},24847:function(e,t,r){r.r(t),r.d(t,{assets:function(){return y},contentTitle:function(){return d},default:function(){return v},frontMatter:function(){return f},metadata:function(){return s},toc:function(){return b}});var n=r(3905),o=Object.defineProperty,a=Object.defineProperties,i=Object.getOwnPropertyDescriptors,u=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,l=(e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,m=(e,t)=>{for(var r in t||(t={}))c.call(t,r)&&l(e,r,t[r]);if(u)for(var r of u(t))p.call(t,r)&&l(e,r,t[r]);return e};const f={title:"Reducer",slug:"/rimbu/common/Reducer/type"},d="type Reducer<I,O>",s={unversionedId:"rimbu_common/Reducer.type",id:"rimbu_common/Reducer.type",title:"Reducer",description:"A Reducer is a stand-alone calculation that takes input values of type I, and, when requested, produces an output value of type O.",source:"@site/api/rimbu_common/Reducer.type.mdx",sourceDirName:"rimbu_common",slug:"/rimbu/common/Reducer/type",permalink:"/api/rimbu/common/Reducer/type",draft:!1,tags:[],version:"current",frontMatter:{title:"Reducer",slug:"/rimbu/common/Reducer/type"},sidebar:"defaultSidebar",previous:{title:"sum",permalink:"/api/rimbu/common/Reducer/sum/var"},next:{title:"RelatedTo",permalink:"/api/rimbu/common/RelatedTo/type"}},y={},b=[{value:"Definition",id:"definition",level:2}],O={toc:b};function v(e){var t,r=e,{components:o}=r,l=((e,t)=>{var r={};for(var n in e)c.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&u)for(var n of u(e))t.indexOf(n)<0&&p.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=m(m({},O),l),a(t,i({components:o,mdxType:"MDXLayout"}))),(0,n.kt)("h1",m({},{id:"type-reducerio"}),(0,n.kt)("inlineCode",{parentName:"h1"},"type Reducer<I,O>")),(0,n.kt)("p",null,"A ",(0,n.kt)("inlineCode",{parentName:"p"},"Reducer")," is a stand-alone calculation that takes input values of type I, and, when requested, produces an output value of type O."),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion namespace:")," ",(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/common/Reducer/namespace"}),"Reducer")),(0,n.kt)("h2",m({},{id:"definition"}),"Definition"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"export declare type Reducer<I, O = I> = "),(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/common/Reducer/Impl/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"Reducer.Impl")),(0,n.kt)("inlineCode",{parentName:"p"},"<I, O, unknown>;")))}v.isMDXComponent=!0}}]);