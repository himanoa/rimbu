"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[57621],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},s=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,f=s["".concat(p,".").concat(d)]||s[d]||m[d]||i;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=s;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},35137:function(e,t,n){n.r(t),n.d(t,{assets:function(){return k},contentTitle:function(){return d},default:function(){return C},frontMatter:function(){return s},metadata:function(){return f},toc:function(){return b}});var r=n(3905),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,t,n)=>t in e?a(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,m=(e,t)=>{for(var n in t||(t={}))p.call(t,n)&&c(e,n,t[n]);if(l)for(var n of l(t))u.call(t,n)&&c(e,n,t[n]);return e};const s={title:"MultiMapCreators",slug:"/rimbu/multimap/custom/MultiMapCreators/interface"},d="interface MultiMapCreators",f={unversionedId:"rimbu_multimap/custom/MultiMapCreators.interface",id:"rimbu_multimap/custom/MultiMapCreators.interface",title:"MultiMapCreators",description:"undocumented",source:"@site/api/rimbu_multimap/custom/MultiMapCreators.interface.mdx",sourceDirName:"rimbu_multimap/custom",slug:"/rimbu/multimap/custom/MultiMapCreators/interface",permalink:"/api/rimbu/multimap/custom/MultiMapCreators/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"MultiMapCreators",slug:"/rimbu/multimap/custom/MultiMapCreators/interface"},sidebar:"defaultSidebar",previous:{title:"MultiMapContext<UK,UV,N,Tp>",permalink:"/api/rimbu/multimap/custom/MultiMapContext/class"},next:{title:"MultiMapEmpty<K,V,Tp>",permalink:"/api/rimbu/multimap/custom/MultiMapEmpty/class"}},k={},b=[{value:"Methods",id:"methods",level:2},{value:"<code>createContext</code>",id:"createcontext",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4}],y={toc:b};function C(e){var t,n=e,{components:a}=n,c=((e,t)=>{var n={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&l)for(var r of l(e))t.indexOf(r)<0&&u.call(e,r)&&(n[r]=e[r]);return n})(n,["components"]);return(0,r.kt)("wrapper",(t=m(m({},y),c),i(t,o({components:a,mdxType:"MDXLayout"}))),(0,r.kt)("h1",m({},{id:"interface-multimapcreators"}),(0,r.kt)("inlineCode",{parentName:"h1"},"interface MultiMapCreators")),(0,r.kt)("p",null,"undocumented"),(0,r.kt)("h2",m({},{id:"methods"}),"Methods"),(0,r.kt)("details",null,(0,r.kt)("summary",null,(0,r.kt)("h3",m({},{id:"createcontext"}),(0,r.kt)("inlineCode",{parentName:"h3"},"createContext")),(0,r.kt)("p",null,"Returns a new MultiMap context instance based on the given ",(0,r.kt)("inlineCode",{parentName:"p"},"options"),".")),(0,r.kt)("h4",m({},{id:"definition"}),"Definition"),(0,r.kt)("code",null,(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"createContext<UK, UV>(options: {"),(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"keyMapContext: "),(0,r.kt)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/map/RMap/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"RMap.Context")),(0,r.kt)("inlineCode",{parentName:"p"},"<UK>;"),(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"keyMapValuesContext: "),(0,r.kt)("a",m({parentName:"p"},{href:"/api/rimbu/collection-types/set/RSet/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"RSet.Context")),(0,r.kt)("inlineCode",{parentName:"p"},"<UV>;"),(0,r.kt)("br",null),"\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"p"},"}): "),(0,r.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multimap/MultiMap/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMap.Context")),(0,r.kt)("inlineCode",{parentName:"p"},"<UK, UV>;"))),(0,r.kt)("h4",m({},{id:"type-parameters"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"UK"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"the upper key type for which the context can create instances")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"UV"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"the upper value type for which the context can create instances")))),(0,r.kt)("h4",m({},{id:"parameters"}),"Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"options")),(0,r.kt)("td",m({parentName:"tr"},{align:null}),(0,r.kt)("inlineCode",{parentName:"td"},"{"),(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"td"},"keyMapContext: "),(0,r.kt)("a",m({parentName:"td"},{href:"/api/rimbu/collection-types/map/RMap/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"RMap.Context")),(0,r.kt)("inlineCode",{parentName:"td"},"<UK>;"),(0,r.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"td"},"keyMapValuesContext: "),(0,r.kt)("a",m({parentName:"td"},{href:"/api/rimbu/collection-types/set/RSet/Context/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"RSet.Context")),(0,r.kt)("inlineCode",{parentName:"td"},"<UV>;"),(0,r.kt)("br",null),"\xa0","\xa0",(0,r.kt)("inlineCode",{parentName:"td"},"}")),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"an object containing the following properties:",(0,r.kt)("br",null)," - keyMapContext - the map context to use for key to valueset mappings",(0,r.kt)("br",null)," - keyMapValuesContext - the set context to use for value sets"))))))}C.isMDXComponent=!0}}]);