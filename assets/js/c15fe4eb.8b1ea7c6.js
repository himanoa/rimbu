"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[83103],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),c=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=c(e.components);return a.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,h=m["".concat(p,".").concat(d)]||m[d]||u[d]||l;return t?a.createElement(h,i(i({ref:n},s),{},{components:t})):a.createElement(h,i({ref:n},s))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},41830:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>k,contentTitle:()=>f,default:()=>N,frontMatter:()=>h,metadata:()=>b,toc:()=>g});var a=t(3905),r=Object.defineProperty,l=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,s=(e,n,t)=>n in e?r(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,m=(e,n)=>{for(var t in n||(n={}))p.call(n,t)&&s(e,t,n[t]);if(o)for(var t of o(n))c.call(n,t)&&s(e,t,n[t]);return e},u=(e,n)=>l(e,i(n)),d=(e,n)=>{var t={};for(var a in e)p.call(e,a)&&n.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&o)for(var a of o(e))n.indexOf(a)<0&&c.call(e,a)&&(t[a]=e[a]);return t};const h={title:"Channel (namespace)",slug:"/rimbu/channel/Channel/namespace"},f="namespace Channel",b={unversionedId:"rimbu_channel/Channel/index",id:"rimbu_channel/Channel/index",title:"Channel (namespace)",description:"A Rimbu Channel offers various ways to synchronize communication between asynchronous processes. These processes can send and receive messages in a blocking way. Channel messages are of type T, and channels can be buffered or unbuffered. A buffered channel can queue a given amount of messages before blocking the sender.",source:"@site/api/rimbu_channel/Channel/index.mdx",sourceDirName:"rimbu_channel/Channel",slug:"/rimbu/channel/Channel/namespace",permalink:"/api/rimbu/channel/Channel/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"Channel (namespace)",slug:"/rimbu/channel/Channel/namespace"},sidebar:"defaultSidebar",previous:{title:"@rimbu/channel",permalink:"/api/rimbu/channel"},next:{title:"Channel.Config",permalink:"/api/rimbu/channel/Channel/Config/interface"}},k={},g=[{value:"Interfaces",id:"interfaces",level:2},{value:"Static Methods",id:"static-methods",level:2},{value:"<code>create</code>",id:"create",level:3},{value:"Definition",id:"definition",level:4},{value:"Type parameters",id:"type-parameters",level:4},{value:"Parameters",id:"parameters",level:4}],y={toc:g},C="wrapper";function N(e){var n=e,{components:t}=n,r=d(n,["components"]);return(0,a.kt)(C,u(m(m({},y),r),{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",m({},{id:"namespace-channel"}),(0,a.kt)("inlineCode",{parentName:"h1"},"namespace Channel")),(0,a.kt)("p",null,"A Rimbu Channel offers various ways to synchronize communication between asynchronous processes. These processes can send and receive messages in a blocking way. Channel messages are of type T, and channels can be buffered or unbuffered. A buffered channel can queue a given amount of messages before blocking the sender."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/channel/Channel/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel<T>"))),(0,a.kt)("h2",m({},{id:"interfaces"}),"Interfaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Config/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel.Config"))),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"The configuration options for creating a Channel.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Constructors/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel.Constructors"))),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"Defines the static ",(0,a.kt)("inlineCode",{parentName:"td"},"Channel")," API.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Read/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel.Read<T>"))),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"A read-only Channel that can perform blocking reads. This means that a ",(0,a.kt)("inlineCode",{parentName:"td"},"receive")," call will block until a message is available.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Write/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel.Write<T>"))),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"A write-only Channel that can perform blocking writes. This means that a ",(0,a.kt)("inlineCode",{parentName:"td"},"send")," call will block until the channel has capacity to send a message.")))),(0,a.kt)("h2",m({},{id:"static-methods"}),"Static Methods"),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("h3",m({},{id:"create"}),(0,a.kt)("inlineCode",{parentName:"h3"},"create")),(0,a.kt)("p",null,"Returns a new Channel instance that can be used to synchronize asynchronous processes within a single thread.")),(0,a.kt)("h4",m({},{id:"definition"}),"Definition"),(0,a.kt)("code",null,(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"create<T = void>(options?: "),(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/channel/Channel/Config/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel.Config")),(0,a.kt)("inlineCode",{parentName:"p"},"): "),(0,a.kt)("a",m({parentName:"p"},{href:"/api/rimbu/channel/Channel/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel")),(0,a.kt)("inlineCode",{parentName:"p"},"<T>;"))),(0,a.kt)("h4",m({},{id:"type-parameters"}),"Type parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Default"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),"T"),(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"void")),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"the channel message type")))),(0,a.kt)("h4",m({},{id:"parameters"}),"Parameters"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Type"),(0,a.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("inlineCode",{parentName:"td"},"options")),(0,a.kt)("td",m({parentName:"tr"},{align:null}),(0,a.kt)("a",m({parentName:"td"},{href:"/api/rimbu/channel/Channel/Config/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"Channel.Config"))),(0,a.kt)("td",m({parentName:"tr"},{align:null}),"(optional) the options used to create the channel",(0,a.kt)("br",null)," - capacity: (optional) the buffer size of the channel",(0,a.kt)("br",null)," - validator: (optional) a function taking a message and returning true if the message is of a valid type, false otherwise"))))))}N.isMDXComponent=!0}}]);