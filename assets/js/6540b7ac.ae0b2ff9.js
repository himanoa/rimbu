"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[35348],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=a.createContext({}),p=function(e){var t=a.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=p(e.components);return a.createElement(u.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,u=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(r),s=n,f=c["".concat(u,".").concat(s)]||c[s]||m[s]||o;return r?a.createElement(f,i(i({ref:t},d),{},{components:r})):a.createElement(f,i({ref:t},d))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=s;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[c]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}s.displayName="MDXCreateElement"},99535:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>S,contentTitle:()=>M,default:()=>v,frontMatter:()=>f,metadata:()=>b,toc:()=>y});var a=r(3905),n=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))u.call(t,r)&&d(e,r,t[r]);if(l)for(var r of l(t))p.call(t,r)&&d(e,r,t[r]);return e},m=(e,t)=>o(e,i(t)),s=(e,t)=>{var r={};for(var a in e)u.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&l)for(var a of l(e))t.indexOf(a)<0&&p.call(e,a)&&(r[a]=e[a]);return r};const f={title:"SortedMultiMapSortedValue (namespace)",slug:"/rimbu/core/SortedMultiMapSortedValue/namespace"},M="namespace SortedMultiMapSortedValue",b={unversionedId:"rimbu_core/SortedMultiMapSortedValue/index",id:"rimbu_core/SortedMultiMapSortedValue/index",title:"SortedMultiMapSortedValue (namespace)",description:"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the MultiMap documentation and the SortedMultiMapSortedValue API documentation",source:"@site/api/rimbu_core/SortedMultiMapSortedValue/index.mdx",sourceDirName:"rimbu_core/SortedMultiMapSortedValue",slug:"/rimbu/core/SortedMultiMapSortedValue/namespace",permalink:"/api/rimbu/core/SortedMultiMapSortedValue/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedMultiMapSortedValue (namespace)",slug:"/rimbu/core/SortedMultiMapSortedValue/namespace"},sidebar:"defaultSidebar",previous:{title:"SortedMultiMapHashValue",permalink:"/api/rimbu/core/SortedMultiMapHashValue/var"},next:{title:"SortedMultiMapSortedValue.Builder<K,V>",permalink:"/api/rimbu/core/SortedMultiMapSortedValue/Builder/interface"}},S={},y=[{value:"Interfaces",id:"interfaces",level:2}],h={toc:y},k="wrapper";function v(e){var t=e,{components:r}=t,n=s(t,["components"]);return(0,a.kt)(k,m(c(c({},h),n),{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",c({},{id:"namespace-sortedmultimapsortedvalue"}),(0,a.kt)("inlineCode",{parentName:"h1"},"namespace SortedMultiMapSortedValue")),(0,a.kt)("p",null,"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,a.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,a.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapSortedValue/interface"}),"SortedMultiMapSortedValue API documentation")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,a.kt)("a",c({parentName:"p"},{href:"/api/rimbu/core/SortedMultiMapSortedValue/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue<K,V>"))),(0,a.kt)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapSortedValue/Builder/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue.Builder<K,V>"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"A mutable ",(0,a.kt)("inlineCode",{parentName:"td"},"SortedMultiMapSortedValue")," builder used to efficiently create new immutable instances. See the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapSortedValue/Builder/interface"}),"SortedMultiMapSortedValue.Builder API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapSortedValue/Context/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue.Context<UK,UV>"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"A context instance for an ",(0,a.kt)("inlineCode",{parentName:"td"},"SortedMultiMapSortedValue")," that acts as a factory for every instance of this type of collection.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapSortedValue/NonEmpty/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue.NonEmpty<K,V>"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,a.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapSortedValue/interface"}),"SortedMultiMapSortedValue API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",c({parentName:"tr"},{align:null}),(0,a.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapSortedValue/Types/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue.Types"))),(0,a.kt)("td",c({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}v.isMDXComponent=!0}}]);