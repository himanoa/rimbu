"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[11269],{3905:(t,e,n)=>{n.d(e,{Zo:()=>c,kt:()=>y});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var u=r.createContext({}),p=function(t){var e=r.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=p(t.components);return r.createElement(u.Provider,{value:e},t.children)},m="mdxType",s={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},f=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,u=t.parentName,c=l(t,["components","mdxType","originalType","parentName"]),m=p(n),f=a,y=m["".concat(u,".").concat(f)]||m[f]||s[f]||i;return n?r.createElement(y,o(o({ref:e},c),{},{components:n})):r.createElement(y,o({ref:e},c))}));function y(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=t,l[m]="string"==typeof t?t:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},93573:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>v,contentTitle:()=>b,default:()=>g,frontMatter:()=>y,metadata:()=>d,toc:()=>h});var r=n(3905),a=Object.defineProperty,i=Object.defineProperties,o=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,c=(t,e,n)=>e in t?a(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,m=(t,e)=>{for(var n in e||(e={}))u.call(e,n)&&c(t,n,e[n]);if(l)for(var n of l(e))p.call(e,n)&&c(t,n,e[n]);return t},s=(t,e)=>i(t,o(e)),f=(t,e)=>{var n={};for(var r in t)u.call(t,r)&&e.indexOf(r)<0&&(n[r]=t[r]);if(null!=t&&l)for(var r of l(t))e.indexOf(r)<0&&p.call(t,r)&&(n[r]=t[r]);return n};const y={title:"VariantMultiSet.NonEmpty<T>",slug:"/rimbu/multiset/VariantMultiSet/NonEmpty/interface"},b="interface VariantMultiSet.NonEmpty<T>",d={unversionedId:"rimbu_multiset/VariantMultiSet/NonEmpty.interface",id:"rimbu_multiset/VariantMultiSet/NonEmpty.interface",title:"VariantMultiSet.NonEmpty<T>",description:"A non-empty type-variant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the MultiSet documentation and the VariantMultiSet API documentation",source:"@site/api/rimbu_multiset/VariantMultiSet/NonEmpty.interface.mdx",sourceDirName:"rimbu_multiset/VariantMultiSet",slug:"/rimbu/multiset/VariantMultiSet/NonEmpty/interface",permalink:"/api/rimbu/multiset/VariantMultiSet/NonEmpty/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"VariantMultiSet.NonEmpty<T>",slug:"/rimbu/multiset/VariantMultiSet/NonEmpty/interface"},sidebar:"defaultSidebar",previous:{title:"VariantMultiSet (namespace)",permalink:"/api/rimbu/multiset/VariantMultiSet/namespace"},next:{title:"VariantMultiSet.Types",permalink:"/api/rimbu/multiset/VariantMultiSet/Types/interface"}},v={},h=[{value:"Type parameters",id:"type-parameters",level:2}],O={toc:h},S="wrapper";function g(t){var e=t,{components:n}=e,a=f(e,["components"]);return(0,r.kt)(S,s(m(m({},O),a),{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",m({},{id:"interface-variantmultisetnonemptyt"}),(0,r.kt)("inlineCode",{parentName:"h1"},"interface VariantMultiSet.NonEmpty<T>")),(0,r.kt)("p",null,"A non-empty type-variant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multiset/VariantMultiSet/interface"}),"VariantMultiSet API documentation")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Extends:")," ",(0,r.kt)("a",m({parentName:"p"},{href:"/api/rimbu/multiset/VariantMultiSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiSet<T>"))),(0,r.kt)("h2",m({},{id:"type-parameters"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"T"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,r.kt)("admonition",m({},{title:"note",type:"note"}),(0,r.kt)("p",{parentName:"admonition"},"Type-variance means that both the value type can be widened in a type-safe way without casting.  @note As a consequence of being variant, the type does not contain methods that (can) add new elements to the collection.")))}g.isMDXComponent=!0}}]);