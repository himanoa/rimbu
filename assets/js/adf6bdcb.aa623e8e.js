"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[99702],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function p(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?p(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):p(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},p=Object.keys(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(n=0;n<p.length;n++)r=p[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},s=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,p=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),s=c(r),f=o,m=s["".concat(l,".").concat(f)]||s[f]||d[f]||p;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var p=r.length,a=new Array(p);a[0]=s;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var c=2;c<p;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}s.displayName="MDXCreateElement"},55605:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>y,contentTitle:()=>f,default:()=>h,frontMatter:()=>s,metadata:()=>m,toc:()=>b});var n=r(3905),o=Object.defineProperty,p=Object.defineProperties,a=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,u=(e,t,r)=>t in e?o(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,d=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&u(e,r,t[r]);if(i)for(var r of i(t))c.call(t,r)&&u(e,r,t[r]);return e};const s={title:"Shape",slug:"/rimbu/deep/Selector/Shape/type"},f="type Shape<SL>",m={unversionedId:"rimbu_deep/Selector/Shape.type",id:"rimbu_deep/Selector/Shape.type",title:"Shape",description:"Type defining the shape of allowed selectors, used to improve compiler checking.",source:"@site/api/rimbu_deep/Selector/Shape.type.mdx",sourceDirName:"rimbu_deep/Selector",slug:"/rimbu/deep/Selector/Shape/type",permalink:"/api/rimbu/deep/Selector/Shape/type",draft:!1,tags:[],version:"current",frontMatter:{title:"Shape",slug:"/rimbu/deep/Selector/Shape/type"},sidebar:"defaultSidebar",previous:{title:"Result",permalink:"/api/rimbu/deep/Selector/Result/type"},next:{title:"Selector",permalink:"/api/rimbu/deep/Selector/type"}},y={},b=[{value:"Definition",id:"definition",level:2}],S={toc:b};function h(e){var t,r=e,{components:o}=r,u=((e,t)=>{var r={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(r[n]=e[n]);if(null!=e&&i)for(var n of i(e))t.indexOf(n)<0&&c.call(e,n)&&(r[n]=e[n]);return r})(r,["components"]);return(0,n.kt)("wrapper",(t=d(d({},S),u),p(t,a({components:o,mdxType:"MDXLayout"}))),(0,n.kt)("h1",d({},{id:"type-shapesl"}),(0,n.kt)("inlineCode",{parentName:"h1"},"type Shape<SL>")),(0,n.kt)("p",null,"Type defining the shape of allowed selectors, used to improve compiler checking."),(0,n.kt)("h2",d({},{id:"definition"}),"Definition"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"type Shape<SL> = IsAnyFunc<SL> extends true ? SL : IsArray<SL> extends true ? readonly [...(SL extends readonly unknown[] ? SL : never)] : SL extends {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"readonly [key: string "),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"},"number"),(0,n.kt)("code",null,"|"),(0,n.kt)("inlineCode",{parentName:"p"}," symbol]: unknown;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} ? {"),(0,n.kt)("br",null),"\xa0","\xa0","\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"readonly [K in keyof SL]: "),(0,n.kt)("a",d({parentName:"p"},{href:"/api/rimbu/deep/Selector/Shape/type"}),(0,n.kt)("inlineCode",{parentName:"a"},"Selector.Shape")),(0,n.kt)("inlineCode",{parentName:"p"},"<SL[K]>;"),(0,n.kt)("br",null),"\xa0","\xa0",(0,n.kt)("inlineCode",{parentName:"p"},"} : SL;")))}h.isMDXComponent=!0}}]);