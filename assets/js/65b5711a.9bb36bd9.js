"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[7211],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),u=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(a),d=n,f=m["".concat(p,".").concat(d)]||m[d]||s[d]||i;return a?r.createElement(f,l(l({ref:t},c),{},{components:a})):r.createElement(f,l({ref:t},c))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[m]="string"==typeof e?e:n,l[1]=o;for(var u=2;u<i;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},2002:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>M,contentTitle:()=>h,default:()=>g,frontMatter:()=>f,metadata:()=>y,toc:()=>b});var r=a(3905),n=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,c=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,m=(e,t)=>{for(var a in t||(t={}))p.call(t,a)&&c(e,a,t[a]);if(o)for(var a of o(t))u.call(t,a)&&c(e,a,t[a]);return e},s=(e,t)=>i(e,l(t)),d=(e,t)=>{var a={};for(var r in e)p.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&o)for(var r of o(e))t.indexOf(r)<0&&u.call(e,r)&&(a[r]=e[r]);return a};const f={title:"SortedMultiMapHashValue<K,V>",slug:"/rimbu/core/SortedMultiMapHashValue/interface"},h="interface SortedMultiMapHashValue<K,V>",y={unversionedId:"rimbu_core/SortedMultiMapHashValue.interface",id:"rimbu_core/SortedMultiMapHashValue.interface",title:"SortedMultiMapHashValue<K,V>",description:"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the MultiMap documentation and the SortedMultiMapHashValue API documentation",source:"@site/api/rimbu_core/SortedMultiMapHashValue.interface.mdx",sourceDirName:"rimbu_core",slug:"/rimbu/core/SortedMultiMapHashValue/interface",permalink:"/api/rimbu/core/SortedMultiMapHashValue/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"SortedMultiMapHashValue<K,V>",slug:"/rimbu/core/SortedMultiMapHashValue/interface"},sidebar:"defaultSidebar",previous:{title:"SortedMultiMapHashValue.Types",permalink:"/api/rimbu/core/SortedMultiMapHashValue/Types/interface"},next:{title:"SortedMultiMapHashValue",permalink:"/api/rimbu/core/SortedMultiMapHashValue/var"}},M={},b=[{value:"Type parameters",id:"type-parameters",level:2}],k={toc:b},v="wrapper";function g(e){var t=e,{components:a}=t,n=d(t,["components"]);return(0,r.kt)(v,s(m(m({},k),n),{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",m({},{id:"interface-sortedmultimaphashvaluekv"}),(0,r.kt)("inlineCode",{parentName:"h1"},"interface SortedMultiMapHashValue<K,V>")),(0,r.kt)("p",null,"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapHashValue/interface"}),"SortedMultiMapHashValue API documentation")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Companion namespace:")," ",(0,r.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/SortedMultiMapHashValue/namespace"}),"SortedMultiMapHashValue")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Implemented by:")," ",(0,r.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/SortedMultiMapHashValue/NonEmpty/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapHashValue.NonEmpty<K,V>"))),(0,r.kt)("h2",m({},{id:"type-parameters"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"K"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"the key type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",m({parentName:"tr"},{align:null}),"V"),(0,r.kt)("td",m({parentName:"tr"},{align:null}),"the value type")))),(0,r.kt)("admonition",m({},{title:"note",type:"note"}),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"SortedMultiMapHashValue")," uses the contexts' ",(0,r.kt)("inlineCode",{parentName:"li"},"SortedMap")," ",(0,r.kt)("inlineCode",{parentName:"li"},"keyContext")," to hash the keys - The ",(0,r.kt)("inlineCode",{parentName:"li"},"SortedMultiMapHashValue")," uses the contexts' ",(0,r.kt)("inlineCode",{parentName:"li"},"HashSet")," ",(0,r.kt)("inlineCode",{parentName:"li"},"valueContext")," to collect the values for each key."))),(0,r.kt)("admonition",m({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",m({parentName:"pre"},{className:"language-ts"}),"const m1 = SortedMultiMapHashValue.empty<number, string>()\nconst m2 = SortedMultiMapHashValue.of([1, 'a'], [1, 'b'], [2, 'a'])\n"))))}g.isMDXComponent=!0}}]);