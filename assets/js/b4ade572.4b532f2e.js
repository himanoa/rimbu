"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[79332],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>f});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var o=r.createContext({}),u=function(e){var t=r.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=u(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,m=p(e,["components","mdxType","originalType","parentName"]),c=u(a),d=n,f=c["".concat(o,".").concat(d)]||c[d]||s[d]||i;return a?r.createElement(f,l(l({ref:t},m),{},{components:a})):r.createElement(f,l({ref:t},m))}));function f(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,l=new Array(i);l[0]=d;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p[c]="string"==typeof e?e:n,l[1]=p;for(var u=2;u<i;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},45198:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>M,contentTitle:()=>h,default:()=>g,frontMatter:()=>f,metadata:()=>y,toc:()=>b});var r=a(3905),n=Object.defineProperty,i=Object.defineProperties,l=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,m=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,c=(e,t)=>{for(var a in t||(t={}))o.call(t,a)&&m(e,a,t[a]);if(p)for(var a of p(t))u.call(t,a)&&m(e,a,t[a]);return e},s=(e,t)=>i(e,l(t)),d=(e,t)=>{var a={};for(var r in e)o.call(e,r)&&t.indexOf(r)<0&&(a[r]=e[r]);if(null!=e&&p)for(var r of p(e))t.indexOf(r)<0&&u.call(e,r)&&(a[r]=e[r]);return a};const f={title:"HashMultiMapSortedValue<K,V>",slug:"/rimbu/multimap/HashMultiMapSortedValue/interface"},h="interface HashMultiMapSortedValue<K,V>",y={unversionedId:"rimbu_multimap/HashMultiMapSortedValue.interface",id:"rimbu_multimap/HashMultiMapSortedValue.interface",title:"HashMultiMapSortedValue<K,V>",description:"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the MultiMap documentation and the HashMultiMapSortedValue API documentation",source:"@site/api/rimbu_multimap/HashMultiMapSortedValue.interface.mdx",sourceDirName:"rimbu_multimap",slug:"/rimbu/multimap/HashMultiMapSortedValue/interface",permalink:"/api/rimbu/multimap/HashMultiMapSortedValue/interface",draft:!1,tags:[],version:"current",frontMatter:{title:"HashMultiMapSortedValue<K,V>",slug:"/rimbu/multimap/HashMultiMapSortedValue/interface"},sidebar:"defaultSidebar",previous:{title:"HashMultiMapSortedValue.Types",permalink:"/api/rimbu/multimap/HashMultiMapSortedValue/Types/interface"},next:{title:"MultiMap (namespace)",permalink:"/api/rimbu/multimap/MultiMap/namespace"}},M={},b=[{value:"Type parameters",id:"type-parameters",level:2}],k={toc:b},v="wrapper";function g(e){var t=e,{components:a}=t,n=d(t,["components"]);return(0,r.kt)(v,s(c(c({},k),n),{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",c({},{id:"interface-hashmultimapsortedvaluekv"}),(0,r.kt)("inlineCode",{parentName:"h1"},"interface HashMultiMapSortedValue<K,V>")),(0,r.kt)("p",null,"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapSortedValue/interface"}),"HashMultiMapSortedValue API documentation")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Companion namespace:")," ",(0,r.kt)("a",c({parentName:"p"},{href:"/api/rimbu/multimap/HashMultiMapSortedValue/namespace"}),"HashMultiMapSortedValue")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Implemented by:")," ",(0,r.kt)("a",c({parentName:"p"},{href:"/api/rimbu/multimap/HashMultiMapSortedValue/NonEmpty/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapSortedValue.NonEmpty<K,V>"))),(0,r.kt)("h2",c({},{id:"type-parameters"}),"Type parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"K"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"the key type")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",c({parentName:"tr"},{align:null}),"V"),(0,r.kt)("td",c({parentName:"tr"},{align:null}),"the value type")))),(0,r.kt)("admonition",c({},{title:"note",type:"note"}),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"HashMultiMapSortedValue")," uses the contexts' ",(0,r.kt)("inlineCode",{parentName:"li"},"HashMap")," ",(0,r.kt)("inlineCode",{parentName:"li"},"keyContext")," to hash the keys - The ",(0,r.kt)("inlineCode",{parentName:"li"},"HashMultiMapSortedValue")," uses the contexts' ",(0,r.kt)("inlineCode",{parentName:"li"},"SortedSet")," ",(0,r.kt)("inlineCode",{parentName:"li"},"valueContext")," to collect the values for each key."))),(0,r.kt)("admonition",c({},{title:"example",type:"note"}),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",c({parentName:"pre"},{className:"language-ts"}),"const m1 = HashMultiMapSortedValue.empty<number, string>()\nconst m2 = HashMultiMapSortedValue.of([1, 'a'], [1, 'b'], [2, 'a'])\n"))))}g.isMDXComponent=!0}}]);