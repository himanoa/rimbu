"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[90049],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),m=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=m(a),h=r,d=u["".concat(o,".").concat(h)]||u[h]||c[h]||i;return a?n.createElement(d,p(p({ref:t},s),{},{components:a})):n.createElement(d,p({ref:t},s))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,p=new Array(i);p[0]=u;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,p[1]=l;for(var m=2;m<i;m++)p[m]=a[m];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},28207:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>f,contentTitle:()=>h,default:()=>y,frontMatter:()=>u,metadata:()=>d,toc:()=>b});var n=a(3905),r=Object.defineProperty,i=Object.defineProperties,p=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,s=(e,t,a)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,c=(e,t)=>{for(var a in t||(t={}))o.call(t,a)&&s(e,a,t[a]);if(l)for(var a of l(t))m.call(t,a)&&s(e,a,t[a]);return e};const u={title:"@rimbu/hashed/map",slug:"/rimbu/hashed/map"},h="package @rimbu/hashed/map",d={unversionedId:"rimbu_hashed/map/index",id:"rimbu_hashed/map/index",title:"@rimbu/hashed/map",description:"The @rimbu/hashed/map package provides the HashMap implementation.",source:"@site/api/rimbu_hashed/map/index.mdx",sourceDirName:"rimbu_hashed/map",slug:"/rimbu/hashed/map",permalink:"/api/rimbu/hashed/map",draft:!1,tags:[],version:"current",frontMatter:{title:"@rimbu/hashed/map",slug:"/rimbu/hashed/map"},sidebar:"defaultSidebar",previous:{title:"Hasher<UK>",permalink:"/api/rimbu/hashed/Hasher/interface"},next:{title:"HashMap (namespace)",permalink:"/api/rimbu/hashed/map/HashMap/namespace"}},f={},b=[{value:"Interfaces",id:"interfaces",level:2},{value:"Namespaces",id:"namespaces",level:2}],k={toc:b};function y(e){var t,a=e,{components:r}=a,s=((e,t)=>{var a={};for(var n in e)o.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&l)for(var n of l(e))t.indexOf(n)<0&&m.call(e,n)&&(a[n]=e[n]);return a})(a,["components"]);return(0,n.kt)("wrapper",(t=c(c({},k),s),i(t,p({components:r,mdxType:"MDXLayout"}))),(0,n.kt)("h1",c({},{id:"package-rimbuhashedmap"}),(0,n.kt)("inlineCode",{parentName:"h1"},"package @rimbu/hashed/map")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"@rimbu/hashed/map")," package provides the ",(0,n.kt)("inlineCode",{parentName:"p"},"HashMap")," implementation."),(0,n.kt)("p",null," See the ",(0,n.kt)("a",c({parentName:"p"},{href:"/docs/collections/map"}),"Rimbu docs Map page")," for more information."),(0,n.kt)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("a",c({parentName:"td"},{href:"/api/rimbu/hashed/map/HashMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap<K,V>"))),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys.")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"HashMap")," uses the context's ",(0,n.kt)("inlineCode",{parentName:"li"},"hasher")," instance to hash keys for performance."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"HashMap")," uses the context's ",(0,n.kt)("inlineCode",{parentName:"li"},"eq")," function to determine equivalence between keys.")),(0,n.kt)("p",null,"See the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/hashed/HashMap/interface"}),"HashMap API documentation")," |"),(0,n.kt)("h2",c({},{id:"namespaces"}),"Namespaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("a",c({parentName:"td"},{href:"/api/rimbu/hashed/map/HashMap/namespace"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap"))),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys.")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"HashMap")," uses the context's ",(0,n.kt)("inlineCode",{parentName:"li"},"hasher")," instance to hash keys for performance."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"HashMap")," uses the context's ",(0,n.kt)("inlineCode",{parentName:"li"},"eq")," function to determine equivalence between keys.")),(0,n.kt)("p",null,"See the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/hashed/HashMap/interface"}),"HashMap API documentation")," |"))}y.isMDXComponent=!0}}]);