"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[19293],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),p=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=p(n),d=r,f=m["".concat(c,".").concat(d)]||m[d]||u[d]||l;return n?a.createElement(f,o(o({ref:t},s),{},{components:n})):a.createElement(f,o({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},31993:function(e,t,n){n.r(t),n.d(t,{assets:function(){return y},contentTitle:function(){return d},default:function(){return h},frontMatter:function(){return m},metadata:function(){return f},toc:function(){return b}});var a=n(3905),r=Object.defineProperty,l=Object.defineProperties,o=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,c=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,s=(e,t,n)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n,u=(e,t)=>{for(var n in t||(t={}))c.call(t,n)&&s(e,n,t[n]);if(i)for(var n of i(t))p.call(t,n)&&s(e,n,t[n]);return e};const m={id:"collections",sidebar_position:3,slug:"."},d="Immutable collections",f={unversionedId:"collections/collections",id:"collections/collections",title:"Immutable collections",description:"Here is a brief overview of the basic Rimbu TypeScript immutable collection types. Many of these types have multiple concrete implementations, see the corresponding links for more information:",source:"@site/docs/collections/collections.mdx",sourceDirName:"collections",slug:"/collections/",permalink:"/docs/collections/",draft:!1,editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/collections/collections.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"collections",sidebar_position:3,slug:"."},sidebar:"sidebar",previous:{title:"Basic Concepts",permalink:"/docs/basic-concepts"},next:{title:"Overview",permalink:"/docs/collections/graph"}},y={},b=[{value:"Single-typed base collections",id:"single-typed-base-collections",level:2},{value:"Two-typed base collections",id:"two-typed-base-collections",level:2},{value:"Three-typed base collections",id:"three-typed-base-collections",level:2}],k={toc:b};function h(e){var t,n=e,{components:r}=n,s=((e,t)=>{var n={};for(var a in e)c.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&i)for(var a of i(e))t.indexOf(a)<0&&p.call(e,a)&&(n[a]=e[a]);return n})(n,["components"]);return(0,a.kt)("wrapper",(t=u(u({},k),s),l(t,o({components:r,mdxType:"MDXLayout"}))),(0,a.kt)("h1",u({},{id:"immutable-collections"}),"Immutable collections"),(0,a.kt)("p",null,"Here is a brief overview of the basic Rimbu TypeScript immutable collection types. Many of these types have multiple concrete implementations, see the corresponding links for more information:"),(0,a.kt)("h2",u({},{id:"single-typed-base-collections"}),"Single-typed base collections"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/stream"}),(0,a.kt)("inlineCode",{parentName:"a"},"Stream<T>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"an Iterable-like structure that represents a source that can produce values of type T when requested")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/list"}),(0,a.kt)("inlineCode",{parentName:"a"},"List<T>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"an immutable ordered sequence of elements of type T that can be manipulated and accessed randomly in a relatively efficient way")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/set"}),(0,a.kt)("inlineCode",{parentName:"a"},"RSet<T>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a Set collection with values of type T, where the collection does not contain duplicate values")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/multiset"}),(0,a.kt)("inlineCode",{parentName:"a"},"MultiSet<T>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a Set-like structure where each unique element of type T can be added multiple times, and its count is stored")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/graph"}),(0,a.kt)("inlineCode",{parentName:"a"},"Graph<N>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a collection of nodes of type N that can be connected through edges")))),(0,a.kt)("h2",u({},{id:"two-typed-base-collections"}),"Two-typed base collections"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/map"}),(0,a.kt)("inlineCode",{parentName:"a"},"RMap<K, V>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a Map collection with entries containing keys of type K and values of type V. Each key has exactly one value, and each key is unique")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/multimap"}),(0,a.kt)("inlineCode",{parentName:"a"},"MultiMap<K, V>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a Map-like structure in which each key of type K has one or more values of type V. For each key, it's associated values are unique")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/bimap"}),(0,a.kt)("inlineCode",{parentName:"a"},"BiMap<K, V>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a bidirectional Map of keys of type K and values of type V, where each key has exactly one value, and each value has exactly one key")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/bimultimap"}),(0,a.kt)("inlineCode",{parentName:"a"},"BiMultiMap<K, V>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a bidirectional MultiMap of keys of type K and values of type V, where each key-value association also has an inverse value-key association")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/graph"}),(0,a.kt)("inlineCode",{parentName:"a"},"ValuedGraph<N, V>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"a collection of nodes of type N that can be connected through edges with values of type V")))),(0,a.kt)("h2",u({},{id:"three-typed-base-collections"}),"Three-typed base collections"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"collections/table"}),(0,a.kt)("inlineCode",{parentName:"a"},"Table<R, C, V>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"an immutable 2-dimensional Map, containing row keys of type R and column keys of type C, where a combination of a row and column key can contain one value of type V")))))}h.isMDXComponent=!0}}]);