"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[94495],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return s}});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function d(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?d(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):d(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},d=Object.keys(e);for(a=0;a<d.length;a++)r=d[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(a=0;a<d.length;a++)r=d[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),l=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,d=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),c=l(r),s=n,h=c["".concat(p,".").concat(s)]||c[s]||u[s]||d;return r?a.createElement(h,i(i({ref:t},m),{},{components:r})):a.createElement(h,i({ref:t},m))}));function s(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var d=r.length,i=new Array(d);i[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var l=2;l<d;l++)i[l]=r[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},84852:function(e,t,r){r.r(t),r.d(t,{assets:function(){return k},contentTitle:function(){return s},default:function(){return N},frontMatter:function(){return c},metadata:function(){return h},toc:function(){return b}});var a=r(3905),n=Object.defineProperty,d=Object.defineProperties,i=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,p=Object.prototype.hasOwnProperty,l=Object.prototype.propertyIsEnumerable,m=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,u=(e,t)=>{for(var r in t||(t={}))p.call(t,r)&&m(e,r,t[r]);if(o)for(var r of o(t))l.call(t,r)&&m(e,r,t[r]);return e};const c={title:"@rimbu/ordered",slug:"/rimbu/ordered"},s="package @rimbu/ordered",h={unversionedId:"rimbu_ordered/index",id:"rimbu_ordered/index",title:"@rimbu/ordered",description:"The @rimbu/ordered package provides various OrderedMap and OrderedSet implementations.",source:"@site/api/rimbu_ordered/index.mdx",sourceDirName:"rimbu_ordered",slug:"/rimbu/ordered",permalink:"/api/rimbu/ordered",draft:!1,tags:[],version:"current",frontMatter:{title:"@rimbu/ordered",slug:"/rimbu/ordered"},sidebar:"defaultSidebar",previous:{title:"VariantMultiSetBase<T,Tp>",permalink:"/api/rimbu/multiset/custom/VariantMultiSetBase/interface"},next:{title:"OrderedHashMap (namespace)",permalink:"/api/rimbu/ordered/OrderedHashMap/namespace"}},k={},b=[{value:"Interfaces",id:"interfaces",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"Constants",id:"constants",level:2}],f={toc:b};function N(e){var t,r=e,{components:n}=r,m=((e,t)=>{var r={};for(var a in e)p.call(e,a)&&t.indexOf(a)<0&&(r[a]=e[a]);if(null!=e&&o)for(var a of o(e))t.indexOf(a)<0&&l.call(e,a)&&(r[a]=e[a]);return r})(r,["components"]);return(0,a.kt)("wrapper",(t=u(u({},f),m),d(t,i({components:n,mdxType:"MDXLayout"}))),(0,a.kt)("h1",u({},{id:"package-rimbuordered"}),(0,a.kt)("inlineCode",{parentName:"h1"},"package @rimbu/ordered")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"@rimbu/ordered")," package provides various ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderedMap")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"OrderedSet")," implementations."),(0,a.kt)("p",null," See the ",(0,a.kt)("a",u({parentName:"p"},{href:"/docs/collections/map"}),"Rimbu docs Map page")," and ",(0,a.kt)("a",u({parentName:"p"},{href:"/docs/collections/set"}),"Rimbu docs Set page")," for more information."),(0,a.kt)("p",null," This is a convenience package that exports everything from the following packages:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",u({parentName:"li"},{href:"./ordered/map"}),(0,a.kt)("inlineCode",{parentName:"a"},"@rimbu/ordered/map"))," - ",(0,a.kt)("a",u({parentName:"li"},{href:"./ordered/set"}),(0,a.kt)("inlineCode",{parentName:"a"},"@rimbu/ordered/set")))),(0,a.kt)("h2",u({},{id:"interfaces"}),"Interfaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedHashMap/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedHashMap<K,V>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered HashMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedHashMap/interface"}),"OrderedHashMap API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedHashSet/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedHashSet<T>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered HashSet of value type T. In the Set, there are no duplicate values. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedHashSet/interface"}),"OrderedHashSet API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedMap/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedMap<K,V>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedMap/interface"}),"OrderedMap API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedSet/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedSet<T>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered Set of value type T. In the Set, there are no duplicate values. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedSet/interface"}),"OrderedSet API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedSortedMap/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedSortedMap<K,V>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered SortedMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedSortedMap/interface"}),"OrderedSortedMap API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedSortedSet/interface"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedSortedSet<T>"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered SortedSet of value type T. In the Set, there are no duplicate values. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedSortedSet/interface"}),"OrderedSortedSet API documentation"))))),(0,a.kt)("h2",u({},{id:"namespaces"}),"Namespaces"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedHashMap/namespace"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedHashMap"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered HashMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedHashMap/interface"}),"OrderedHashMap API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedHashSet/namespace"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedHashSet"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered HashSet of value type T. In the Set, there are no duplicate values. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedHashSet/interface"}),"OrderedHashSet API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedMap/namespace"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedMap"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedMap/interface"}),"OrderedMap API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedSet/namespace"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedSet"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered Set of value type T. In the Set, there are no duplicate values. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedSet/interface"}),"OrderedSet API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedSortedMap/namespace"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedSortedMap"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered SortedMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedSortedMap/interface"}),"OrderedSortedMap API documentation"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),(0,a.kt)("a",u({parentName:"td"},{href:"/api/rimbu/ordered/OrderedSortedSet/namespace"}),(0,a.kt)("inlineCode",{parentName:"a"},"OrderedSortedSet"))),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered SortedSet of value type T. In the Set, there are no duplicate values. See the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,a.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedSortedSet/interface"}),"OrderedSortedSet API documentation"))))),(0,a.kt)("h2",u({},{id:"constants"}),"Constants"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,a.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"OrderedMap"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",u({parentName:"tr"},{align:null}),"OrderedSet"),(0,a.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")))))}N.isMDXComponent=!0}}]);