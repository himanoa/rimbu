(self.webpackChunkmy_docs=self.webpackChunkmy_docs||[]).push([[7132],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,f=d["".concat(s,".").concat(m)]||d[m]||l[m]||a;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3664:function(e,t,n){"use strict";n.d(t,{r:function(){return a}});var r=n(7294),o={previewwindow:"console",view:"split",editorsize:"60",codemirror:"1",moduleview:"1"};function a(e){var t=function(e){var t="",n="";for(var r in e)t+=""+n+r+"="+e[r],n="&";return""===t?"":"?"+t}(Object.assign({},o,{module:"/src/"+e.path})),n="https://codesandbox.io/embed/github/vitoke/rimbu-sandbox/tree/main"+t,a="https://codesandbox.io/s/github/vitoke/rimbu-sandbox/tree/main"+t;return console.log({embedUrl:n}),r.createElement(r.Fragment,null,r.createElement("a",{target:"_blank",className:"button button--secondary",href:a,style:{marginBottom:10}},"Open file below in new window with full type-check"),r.createElement("iframe",{src:n,className:"codesandbox-iframe",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts"}))}},3909:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return l},default:function(){return m}});var r=n(2122),o=n(9756),a=(n(7294),n(3905)),i=n(3664),p=["components"],s={id:"deep-path",slug:"./path",title:"Deep Path"},c=void 0,u={unversionedId:"deep/deep-path",id:"deep/deep-path",isDocsHomePage:!1,title:"Deep Path",description:"Path is a function to easily retrieve and update a possibly nested property in an object. As shown in the Patch documentation, it can be quite hard to update an immutable object without helpers. That Path object allows you to specify the location of a nested property using a string:",source:"@site/docs/deep/path.mdx",sourceDirName:"deep",slug:"/deep/path",permalink:"/docs/deep/path",editUrl:"https://github.com/rimbu-org/rimbu/edit/master/website/docs/deep/path.mdx",tags:[],version:"current",frontMatter:{id:"deep-path",slug:"./path",title:"Deep Path"},sidebar:"sidebar",previous:{title:"Deep Patch",permalink:"/docs/deep/patch"},next:{title:"Tuple",permalink:"/docs/deep/tuple"}},l=[],d={toc:l};function m(e){var t=e.components,n=(0,o.Z)(e,p);return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Path")," is a function to easily retrieve and update a possibly nested property in an object. As shown in the ",(0,a.kt)("inlineCode",{parentName:"p"},"Patch")," documentation, it can be quite hard to update an immutable object without helpers. That ",(0,a.kt)("inlineCode",{parentName:"p"},"Path")," object allows you to specify the location of a nested property using a string:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { Path } from '@rimbu/core';\n\ntype Person = {\n  name: string;\n  address: {\n    street: string;\n    number: number;\n  };\n};\n\nfunction updateAddressNumber(person: Person, value: number): Person {\n  return Path.patchValue(person, 'address.number', value);\n}\n\nfunction getPersonStreet(person: Person): string {\n  return Path.getValue(person, 'address.number');\n}\n")),(0,a.kt)("p",null,"The following CodeSandbox shows more examples of how to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"Path")," object:"),(0,a.kt)(i.r,{path:"deep/path.ts",mdxType:"SandBox"}))}m.isMDXComponent=!0}}]);