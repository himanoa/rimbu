"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[68100],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>d});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function p(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):p(p({},t),e)),a},s=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),m=c(a),h=r,d=m["".concat(l,".").concat(h)]||m[h]||u[h]||i;return a?n.createElement(d,p(p({ref:t},s),{},{components:a})):n.createElement(d,p({ref:t},s))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,p=new Array(i);p[0]=h;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[m]="string"==typeof e?e:r,p[1]=o;for(var c=2;c<i;c++)p[c]=a[c];return n.createElement.apply(null,p)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},59012:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>b,contentTitle:()=>f,default:()=>v,frontMatter:()=>d,metadata:()=>y,toc:()=>k});var n=a(3905),r=Object.defineProperty,i=Object.defineProperties,p=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,c=Object.prototype.propertyIsEnumerable,s=(e,t,a)=>t in e?r(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,m=(e,t)=>{for(var a in t||(t={}))l.call(t,a)&&s(e,a,t[a]);if(o)for(var a of o(t))c.call(t,a)&&s(e,a,t[a]);return e},u=(e,t)=>i(e,p(t)),h=(e,t)=>{var a={};for(var n in e)l.call(e,n)&&t.indexOf(n)<0&&(a[n]=e[n]);if(null!=e&&o)for(var n of o(e))t.indexOf(n)<0&&c.call(e,n)&&(a[n]=e[n]);return a};const d={title:"HashMap (namespace)",slug:"/rimbu/core/HashMap/namespace"},f="namespace HashMap",y={unversionedId:"rimbu_core/HashMap/index",id:"rimbu_core/HashMap/index",title:"HashMap (namespace)",description:"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys.",source:"@site/api/rimbu_core/HashMap/index.mdx",sourceDirName:"rimbu_core/HashMap",slug:"/rimbu/core/HashMap/namespace",permalink:"/api/rimbu/core/HashMap/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"HashMap (namespace)",slug:"/rimbu/core/HashMap/namespace"},sidebar:"defaultSidebar",previous:{title:"HashBiMultiMap",permalink:"/api/rimbu/core/HashBiMultiMap/var"},next:{title:"HashMap.Builder<K,V>",permalink:"/api/rimbu/core/HashMap/Builder/interface"}},b={},k=[{value:"Interfaces",id:"interfaces",level:2}],M={toc:k},N="wrapper";function v(e){var t=e,{components:a}=t,r=h(t,["components"]);return(0,n.kt)(N,u(m(m({},M),r),{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h1",m({},{id:"namespace-hashmap"}),(0,n.kt)("inlineCode",{parentName:"h1"},"namespace HashMap")),(0,n.kt)("p",null,"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"HashMap")," uses the context's ",(0,n.kt)("inlineCode",{parentName:"li"},"hasher")," instance to hash keys for performance."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"HashMap")," uses the context's ",(0,n.kt)("inlineCode",{parentName:"li"},"eq")," function to determine equivalence between keys.")),(0,n.kt)("p",null,"See the ",(0,n.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,n.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/api/rimbu/hashed/map/HashMap/interface"}),"HashMap API documentation")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/HashMap/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap<K,V>"))),(0,n.kt)("h2",m({},{id:"interfaces"}),"Interfaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",m({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/HashMap/Builder/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap.Builder<K,V>"))),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"A mutable ",(0,n.kt)("inlineCode",{parentName:"td"},"HashMap")," builder used to efficiently create new immutable instances. See the ",(0,n.kt)("a",m({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,n.kt)("a",m({parentName:"td"},{href:"https://rimbu.org/api/rimbu/hashed/HashMap/Builder/interface"}),"HashMap.Builder API documentation"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/HashMap/Context/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap.Context<UK>"))),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"A context instance for a ",(0,n.kt)("inlineCode",{parentName:"td"},"HashMap")," that acts as a factory for every instance of this type of collection.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",m({parentName:"tr"},{align:null}),(0,n.kt)("a",m({parentName:"td"},{href:"/api/rimbu/core/HashMap/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap.NonEmpty<K,V>"))),(0,n.kt)("td",m({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys.")))),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"HashMap")," uses the context's ",(0,n.kt)("inlineCode",{parentName:"li"},"hasher")," instance to hash keys for performance."),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("inlineCode",{parentName:"li"},"HashMap")," uses the context's ",(0,n.kt)("inlineCode",{parentName:"li"},"eq")," function to determine equivalence between keys.")),(0,n.kt)("p",null,"See the ",(0,n.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,n.kt)("a",m({parentName:"p"},{href:"https://rimbu.org/api/rimbu/hashed/map/HashMap/interface"}),"HashMap API documentation")," |\n| ",(0,n.kt)("a",m({parentName:"p"},{href:"/api/rimbu/core/HashMap/Types/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashMap.Types"))," | Utility interface that provides higher-kinded types for this collection. |"))}v.isMDXComponent=!0}}]);