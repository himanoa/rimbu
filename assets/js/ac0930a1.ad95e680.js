"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[41543],{3905:(e,a,t)=>{t.d(a,{Zo:()=>p,kt:()=>h});var n=t(67294);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=n.createContext({}),u=function(e){var a=n.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=u(e.components);return n.createElement(m.Provider,{value:a},e.children)},c="mdxType",s={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},b=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,o=e.originalType,m=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(t),b=r,h=c["".concat(m,".").concat(b)]||c[b]||s[b]||o;return t?n.createElement(h,l(l({ref:a},p),{},{components:t})):n.createElement(h,l({ref:a},p))}));function h(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=b;var i={};for(var m in a)hasOwnProperty.call(a,m)&&(i[m]=a[m]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}b.displayName="MDXCreateElement"},28051:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>y,contentTitle:()=>d,default:()=>T,frontMatter:()=>h,metadata:()=>f,toc:()=>H});var n=t(3905),r=Object.defineProperty,o=Object.defineProperties,l=Object.getOwnPropertyDescriptors,i=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,p=(e,a,t)=>a in e?r(e,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[a]=t,c=(e,a)=>{for(var t in a||(a={}))m.call(a,t)&&p(e,t,a[t]);if(i)for(var t of i(a))u.call(a,t)&&p(e,t,a[t]);return e},s=(e,a)=>o(e,l(a)),b=(e,a)=>{var t={};for(var n in e)m.call(e,n)&&a.indexOf(n)<0&&(t[n]=e[n]);if(null!=e&&i)for(var n of i(e))a.indexOf(n)<0&&u.call(e,n)&&(t[n]=e[n]);return t};const h={title:"HashTableHashColumn (namespace)",slug:"/rimbu/core/HashTableHashColumn/namespace"},d="namespace HashTableHashColumn",f={unversionedId:"rimbu_core/HashTableHashColumn/index",id:"rimbu_core/HashTableHashColumn/index",title:"HashTableHashColumn (namespace)",description:"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the Table documentation and the HashTableHashColumn API documentation",source:"@site/api/rimbu_core/HashTableHashColumn/index.mdx",sourceDirName:"rimbu_core/HashTableHashColumn",slug:"/rimbu/core/HashTableHashColumn/namespace",permalink:"/api/rimbu/core/HashTableHashColumn/namespace",draft:!1,tags:[],version:"current",frontMatter:{title:"HashTableHashColumn (namespace)",slug:"/rimbu/core/HashTableHashColumn/namespace"},sidebar:"defaultSidebar",previous:{title:"HashSet",permalink:"/api/rimbu/core/HashSet/var"},next:{title:"HashTableHashColumn.Builder<R,C,V>",permalink:"/api/rimbu/core/HashTableHashColumn/Builder/interface"}},y={},H=[{value:"Interfaces",id:"interfaces",level:2}],k={toc:H},C="wrapper";function T(e){var a=e,{components:t}=a,r=b(a,["components"]);return(0,n.kt)(C,s(c(c({},k),r),{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",c({},{id:"namespace-hashtablehashcolumn"}),(0,n.kt)("inlineCode",{parentName:"h1"},"namespace HashTableHashColumn")),(0,n.kt)("p",null,"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,n.kt)("a",c({parentName:"p"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableHashColumn/interface"}),"HashTableHashColumn API documentation"),"  "),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"Companion interface:")," ",(0,n.kt)("a",c({parentName:"p"},{href:"/api/rimbu/core/HashTableHashColumn/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashTableHashColumn<R,C,V>"))),(0,n.kt)("h2",c({},{id:"interfaces"}),"Interfaces"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Name"),(0,n.kt)("th",c({parentName:"tr"},{align:null}),"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/HashTableHashColumn/Builder/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashTableHashColumn.Builder<R,C,V>"))),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/HashTableHashColumn/Context/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashTableHashColumn.Context<UR,UC>"))),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"undocumented")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/HashTableHashColumn/NonEmpty/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashTableHashColumn.NonEmpty<R,C,V>"))),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"A non-empty type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,n.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,n.kt)("a",c({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableHashColumn/interface"}),"HashTableHashColumn API documentation"))),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",c({parentName:"tr"},{align:null}),(0,n.kt)("a",c({parentName:"td"},{href:"/api/rimbu/core/HashTableHashColumn/Types/interface"}),(0,n.kt)("inlineCode",{parentName:"a"},"HashTableHashColumn.Types"))),(0,n.kt)("td",c({parentName:"tr"},{align:null}),"Utility interface that provides higher-kinded types for this collection.")))))}T.isMDXComponent=!0}}]);