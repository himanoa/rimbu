"use strict";(self.webpackChunkrimbu_docs=self.webpackChunkrimbu_docs||[]).push([[21346],{3905:(t,e,a)=>{a.d(e,{Zo:()=>o,kt:()=>k});var r=a(67294);function n(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,r)}return a}function p(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){n(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function l(t,e){if(null==t)return{};var a,r,n=function(t,e){if(null==t)return{};var a,r,n={},i=Object.keys(t);for(r=0;r<i.length;r++)a=i[r],e.indexOf(a)>=0||(n[a]=t[a]);return n}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)a=i[r],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(n[a]=t[a])}return n}var m=r.createContext({}),d=function(t){var e=r.useContext(m),a=e;return t&&(a="function"==typeof t?t(e):p(p({},e),t)),a},o=function(t){var e=d(t.components);return r.createElement(m.Provider,{value:e},t.children)},u="mdxType",h={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},c=r.forwardRef((function(t,e){var a=t.components,n=t.mdxType,i=t.originalType,m=t.parentName,o=l(t,["components","mdxType","originalType","parentName"]),u=d(a),c=n,k=u["".concat(m,".").concat(c)]||u[c]||h[c]||i;return a?r.createElement(k,p(p({ref:e},o),{},{components:a})):r.createElement(k,p({ref:e},o))}));function k(t,e){var a=arguments,n=e&&e.mdxType;if("string"==typeof t||n){var i=a.length,p=new Array(i);p[0]=c;var l={};for(var m in e)hasOwnProperty.call(e,m)&&(l[m]=e[m]);l.originalType=t,l[u]="string"==typeof t?t:n,p[1]=l;for(var d=2;d<i;d++)p[d]=a[d];return r.createElement.apply(null,p)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},67537:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>b,contentTitle:()=>s,default:()=>S,frontMatter:()=>k,metadata:()=>N,toc:()=>g});var r=a(3905),n=Object.defineProperty,i=Object.defineProperties,p=Object.getOwnPropertyDescriptors,l=Object.getOwnPropertySymbols,m=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,o=(t,e,a)=>e in t?n(t,e,{enumerable:!0,configurable:!0,writable:!0,value:a}):t[e]=a,u=(t,e)=>{for(var a in e||(e={}))m.call(e,a)&&o(t,a,e[a]);if(l)for(var a of l(e))d.call(e,a)&&o(t,a,e[a]);return t},h=(t,e)=>i(t,p(e)),c=(t,e)=>{var a={};for(var r in t)m.call(t,r)&&e.indexOf(r)<0&&(a[r]=t[r]);if(null!=t&&l)for(var r of l(t))e.indexOf(r)<0&&d.call(t,r)&&(a[r]=t[r]);return a};const k={title:"@rimbu/core",slug:"/rimbu/core"},s="package @rimbu/core",N={unversionedId:"rimbu_core/index",id:"rimbu_core/index",title:"@rimbu/core",description:"The @rimbu/core package is a convenience package that exports most items from the following packages:",source:"@site/api/rimbu_core/index.mdx",sourceDirName:"rimbu_core",slug:"/rimbu/core",permalink:"/api/rimbu/core",draft:!1,tags:[],version:"current",frontMatter:{title:"@rimbu/core",slug:"/rimbu/core"},sidebar:"defaultSidebar",previous:{title:"Update",permalink:"/api/rimbu/common/Update/type"},next:{title:"ArrowGraph (namespace)",permalink:"/api/rimbu/core/ArrowGraph/namespace"}},b={},g=[{value:"Interfaces",id:"interfaces",level:2},{value:"Namespaces",id:"namespaces",level:2},{value:"Constants",id:"constants",level:2}],f={toc:g},y="wrapper";function S(t){var e=t,{components:a}=e,n=c(e,["components"]);return(0,r.kt)(y,h(u(u({},f),n),{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",u({},{id:"package-rimbucore"}),(0,r.kt)("inlineCode",{parentName:"h1"},"package @rimbu/core")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@rimbu/core")," package is a convenience package that exports most items from the following packages:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./bimap"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/bimap"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./bimultimap"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/bimultimap"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./collection-types"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/collection-types"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./common"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/common"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./deep"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/deep"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./graph"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/graph"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./hashed"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/hashed"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./list"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/list"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./multimap"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/multimap"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./multiset"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/multiset"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./ordered"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/ordered"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./proximity"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/proximity"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./sorted"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/sorted"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./stream"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/stream"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",u({parentName:"li"},{href:"./table"}),(0,r.kt)("inlineCode",{parentName:"a"},"@rimbu/table")))),(0,r.kt)("h2",u({},{id:"interfaces"}),"Interfaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraph<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable arrow (directed) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraph/interface"}),"ArrowGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphHashed/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraphHashed<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using hashed collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphHashed/interface"}),"ArrowGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphSorted/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraphSorted<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using sorted collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphSorted/interface"}),"ArrowGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraph<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraph/interface"}),"ArrowValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraphHashed/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraphHashed<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The nodes are internally maintained using HashMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraphHashed/interface"}),"ArrowValuedGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraphSorted/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraphSorted<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The nodes are internally maintained using SortedMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraphSorted/interface"}),"ArrowValuedGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncFastIterable/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncFastIterable<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncFastIterator/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncFastIterator<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncStream/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncStream<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A possibly infinite asynchronous sequence of elements of type T. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/stream"}),"Stream documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/stream/async/AsyncStream/interface"}),"AsyncStream API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncStreamable/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncStreamable<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimap"}),"BiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimap/BiMap/interface"}),"BiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/BiMultiMap/interface"}),"BiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraph<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable edge (undirected) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraph/interface"}),"EdgeGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraphHashed/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraphHashed<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The connections are internally maintained using hashed collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraphHashed/interface"}),"EdgeGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraphSorted/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraphSorted<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The connections are internally maintained using sorted collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraphSorted/interface"}),"EdgeGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraph<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraph/interface"}),"EdgeValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraphHashed/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraphHashed<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The nodes are internally maintained using HashMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraphHashed/interface"}),"EdgeValuedGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraphSorted/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraphSorted<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The nodes are internally maintained using SortedMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraphSorted/interface"}),"EdgeValuedGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/FastIterable/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"FastIterable<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An interface that extends the standard ",(0,r.kt)("inlineCode",{parentName:"td"},"Iterable")," interface to return a ",(0,r.kt)("inlineCode",{parentName:"td"},"FastIterator")," instead of a normal ",(0,r.kt)("inlineCode",{parentName:"td"},"Iterator"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/FastIterator/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"FastIterator<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An iterator that extends the default ",(0,r.kt)("inlineCode",{parentName:"td"},"Iterator")," interface with methods that give more performance.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Graph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Graph<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/Graph/interface"}),"Graph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashBiMultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashBiMultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are hashed. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/HashBiMultiMap/interface"}),"HashBiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Hasher/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Hasher<UK>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"Interface used to hash objects for hashed collections.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/hashed/map/HashMap/interface"}),"HashMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapHashValue/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapHashValue/interface"}),"HashMultiMapHashValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapSortedValue/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapSortedValue<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapSortedValue/interface"}),"HashMultiMapSortedValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/HashMultiSet/interface"}),"HashMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/hashed/HashSet/interface"}),"HashSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashTableHashColumn/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashTableHashColumn<R,C,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableHashColumn/interface"}),"HashTableHashColumn API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashTableSortedColumn/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashTableSortedColumn<R,C,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableSortedColumn/interface"}),"HashTableSortedColumn API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/List/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"List<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A random accessible immutable sequence of values of type T. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/list"}),"List documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/list/List/interface"}),"List API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/MultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/MultiMap/interface"}),"MultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/MultiSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/interface"}),"MultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedHashMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedHashMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered HashMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedHashMap/interface"}),"OrderedHashMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedHashSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedHashSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered HashSet of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedHashSet/interface"}),"OrderedHashSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedMap/interface"}),"OrderedMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedSet/interface"}),"OrderedSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedSortedMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedSortedMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered SortedMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedSortedMap/interface"}),"OrderedSortedMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedSortedSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedSortedSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered SortedSet of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedSortedSet/interface"}),"OrderedSortedSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ProximityMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ProximityMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),"ProximityMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/RMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"RMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/collection-types/map/RMap/interface"}),"RMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/RSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"RSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/collection-types/set/RSet/interface"}),"RSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedBiMultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are sorted. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/SortedBiMultiMap/interface"}),"HashBiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/sorted/map/SortedMap/interface"}),"SortedMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapHashValue/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapHashValue<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapHashValue/interface"}),"SortedMultiMapHashValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapSortedValue/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapSortedValue/interface"}),"SortedMultiMapSortedValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMultiSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/SortedMultiSet/interface"}),"SortedMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/SortedSet/interface"}),"SortedSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedTableHashColumn/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedTableHashColumn<R,C,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableHashColumn/interface"}),"SortedTableHashColumn API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedTableSortedColumn/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedTableSortedColumn<R,C,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableSortedColumn/interface"}),"SortedTableSortedColumn API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Stream/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Stream<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A possibly infinite sequence of elements of type T. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/stream"}),"Stream documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/stream/Stream/interface"}),"Stream API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Streamable/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Streamable<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An object that can create a Stream of elements of type ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Table/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"Table<R,C,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/Table/interface"}),"Table API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ValuedGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"ValuedGraph<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ValuedGraph/interface"}),"ValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraph<N>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-variant immutable graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/VariantGraph/interface"}),"VariantGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/collection-types/map/VariantMap/interface"}),"VariantMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantMultiMap/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiMap<K,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/VariantMultiMap/interface"}),"VariantMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantMultiSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/VariantMultiSet/interface"}),"VariantMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantSet/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantSet<T>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/collection-types/set/VariantSet/interface"}),"VariantSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantTable/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantTable<R,C,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/VariantTable/interface"}),"VariantTable API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantValuedGraph/interface"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantValuedGraph<N,V>"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-variant immutable valued graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/VariantValuedGraph/interface"}),"VariantValuedGraph API documentation"))))),(0,r.kt)("h2",u({},{id:"namespaces"}),"Namespaces"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable arrow (directed) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraph/interface"}),"ArrowGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphHashed/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraphHashed"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using hashed collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphHashed/interface"}),"ArrowGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowGraphSorted/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowGraphSorted"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The connections are internally maintained using sorted collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowGraphSorted/interface"}),"ArrowGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraph/interface"}),"ArrowValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraphHashed/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraphHashed"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The nodes are internally maintained using HashMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraphHashed/interface"}),"ArrowValuedGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ArrowValuedGraphSorted/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ArrowValuedGraphSorted"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued arrow (directed) graph. The nodes are internally maintained using SortedMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ArrowValuedGraphSorted/interface"}),"ArrowValuedGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncStream/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncStream"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A possibly infinite asynchronous sequence of elements of type T. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/stream"}),"Stream documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/stream/async/AsyncStream/interface"}),"AsyncStream API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncStreamable/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncStreamable"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncStreamSource/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncStreamSource"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/AsyncTransformer/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"AsyncTransformer"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An AsyncReducer that produces instances of ",(0,r.kt)("inlineCode",{parentName:"td"},"AsyncStreamSource"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional Map where keys and values have a one-to-one mapping. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimap"}),"BiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimap/BiMap/interface"}),"BiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/BiMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"BiMultiMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/BiMultiMap/interface"}),"BiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Deep/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Deep"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable edge (undirected) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraph/interface"}),"EdgeGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraphHashed/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraphHashed"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The connections are internally maintained using hashed collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraphHashed/interface"}),"EdgeGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeGraphSorted/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeGraphSorted"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The connections are internally maintained using sorted collections See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeGraphSorted/interface"}),"EdgeGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraph/interface"}),"EdgeValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraphHashed/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraphHashed"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The nodes are internally maintained using HashMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraphHashed/interface"}),"EdgeValuedGraphHashed API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/EdgeValuedGraphSorted/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"EdgeValuedGraphSorted"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued edge (undirected) graph. The nodes are internally maintained using SortedMaps See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/EdgeValuedGraphSorted/interface"}),"EdgeValuedGraphSorted API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Graph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Graph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/Graph/interface"}),"Graph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashBiMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashBiMultiMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are hashed. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/HashBiMultiMap/interface"}),"HashBiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Hasher/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Hasher"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"Interface used to hash objects for hashed collections.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/hashed/map/HashMap/interface"}),"HashMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapHashValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapHashValue"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapHashValue/interface"}),"HashMultiMapHashValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiMapSortedValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiMapSortedValue"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/HashMultiMapSortedValue/interface"}),"HashMultiMapSortedValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashMultiSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashMultiSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/HashMultiSet/interface"}),"HashMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/hashed/HashSet/interface"}),"HashSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashTableHashColumn/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashTableHashColumn"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableHashColumn/interface"}),"HashTableHashColumn API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/HashTableSortedColumn/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"HashTableSortedColumn"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/hash-row/HashTableSortedColumn/interface"}),"HashTableSortedColumn API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/List/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"List"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A random accessible immutable sequence of values of type T. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/list"}),"List documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/list/List/interface"}),"List API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/MultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/MultiMap/interface"}),"MultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/MultiSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"MultiSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/MultiSet/interface"}),"MultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedHashMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedHashMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered HashMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedHashMap/interface"}),"OrderedHashMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedHashSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedHashSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered HashSet of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedHashSet/interface"}),"OrderedHashSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedMap/interface"}),"OrderedMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedSet/interface"}),"OrderedSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedSortedMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedSortedMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered SortedMap of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/map/OrderedSortedMap/interface"}),"OrderedSortedMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/OrderedSortedSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"OrderedSortedSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Ordered SortedSet of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/OrderedSortedSet/interface"}),"OrderedSortedSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ProximityMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ProximityMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/proximity/map/ProximityMap/interface"}),"ProximityMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/RMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"RMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/collection-types/map/RMap/interface"}),"RMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/RSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"RSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/collection-types/set/RSet/interface"}),"RSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedBiMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedBiMultiMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable bi-directional MultiMap where keys and values have a many-to-many mapping. Its keys and values are sorted. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/bimultimap"}),"BiMultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/bimultimap/SortedBiMultiMap/interface"}),"HashBiMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/sorted/map/SortedMap/interface"}),"SortedMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapHashValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapHashValue"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapHashValue/interface"}),"SortedMultiMapHashValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMultiMapSortedValue/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiMapSortedValue"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiMap of key type K, and value type V. In the MultiMap, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/SortedMultiMapSortedValue/interface"}),"SortedMultiMapSortedValue API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedMultiSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedMultiSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/SortedMultiSet/interface"}),"SortedMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/ordered/set/SortedSet/interface"}),"SortedSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedTableHashColumn/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedTableHashColumn"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableHashColumn/interface"}),"SortedTableHashColumn API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/SortedTableSortedColumn/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"SortedTableSortedColumn"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/sorted-row/SortedTableSortedColumn/interface"}),"SortedTableSortedColumn API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Stream/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Stream"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A possibly infinite sequence of elements of type T. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/stream"}),"Stream documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/stream/Stream/interface"}),"Stream API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Streamable/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Streamable"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An object that can create a Stream of elements of type ",(0,r.kt)("inlineCode",{parentName:"td"},"T"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/StreamSource/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"StreamSource"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"Any object that is Iterable, a Stream, or can produce a Stream.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Table/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Table"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-invariant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/Table/interface"}),"Table API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Transformer_2/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Transformer_2"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A Reducer that produces instances of ",(0,r.kt)("inlineCode",{parentName:"td"},"StreamSource"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Traverse/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Traverse"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/Tuple/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"Tuple"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A readonly array of fixed length and types.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/ValuedGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"ValuedGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-invariant immutable valued graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/ValuedGraph/interface"}),"ValuedGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-variant immutable graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/VariantGraph/interface"}),"VariantGraph API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable Map of key type K, and value type V. In the Map, each key has exactly one value, and the Map cannot contain duplicate keys. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/map"}),"Map documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/collection-types/map/VariantMap/interface"}),"VariantMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantMultiMap/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiMap"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable MultiMap of key type K, and value type V. In the Map, each key has at least one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multimap"}),"MultiMap documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multimap/VariantMultiMap/interface"}),"VariantMultiMap API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantMultiSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantMultiSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable MultiSet of value type T. In the MultiSet, each value can occur multiple times. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/multiset"}),"MultiSet documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/multiset/VariantMultiSet/interface"}),"VariantMultiSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantSet/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantSet"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable Set of value type T. In the Set, there are no duplicate values. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/set"}),"Set documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/collection-types/set/VariantSet/interface"}),"VariantSet API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantTable/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantTable"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"A type-variant immutable Table of row key type R, column key type C, and value type V. In the Table, a combination of a row and column key has exactly one value. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/table"}),"Table documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/table/VariantTable/interface"}),"VariantTable API documentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),(0,r.kt)("a",u({parentName:"td"},{href:"/api/rimbu/core/VariantValuedGraph/namespace"}),(0,r.kt)("inlineCode",{parentName:"a"},"VariantValuedGraph"))),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"An type-variant immutable valued graph. See the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/docs/collections/graph"}),"Graph documentation")," and the ",(0,r.kt)("a",u({parentName:"td"},{href:"https://rimbu.org/api/rimbu/graph/VariantValuedGraph/interface"}),"VariantValuedGraph API documentation"))))),(0,r.kt)("h2",u({},{id:"constants"}),"Constants"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Name"),(0,r.kt)("th",u({parentName:"tr"},{align:null}),"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"ArrowGraph"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"ArrowGraphHashed"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"ArrowGraphSorted"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"ArrowValuedGraph"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"ArrowValuedGraphHashed"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"ArrowValuedGraphSorted"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"AsyncStream"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"BiMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"BiMultiMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"EdgeGraph"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"EdgeGraphHashed"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"EdgeGraphSorted"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"EdgeValuedGraph"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"EdgeValuedGraphHashed"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"EdgeValuedGraphSorted"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"HashBiMultiMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"HashMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"HashMultiMapHashValue"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"HashMultiMapSortedValue"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"HashMultiSet"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"HashSet"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"HashTableHashColumn"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"HashTableSortedColumn"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"List"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"MultiMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"MultiSet"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"OrderedHashMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"OrderedHashSet"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"OrderedMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"OrderedSet"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"OrderedSortedMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"OrderedSortedSet"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"ProximityMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"SortedBiMultiMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"SortedMap"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"SortedMultiMapHashValue"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"SortedMultiMapSortedValue"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"SortedMultiSet"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"SortedSet"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"SortedTableHashColumn"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"SortedTableSortedColumn"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"Stream"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",u({parentName:"tr"},{align:null}),"Table"),(0,r.kt)("td",u({parentName:"tr"},{align:null}),"undocumented")))))}S.isMDXComponent=!0}}]);